{"version":3,"sources":["../../../src/util/color/transformSRGB.ts"],"names":[],"mappings":";;;;;QAkCgB,O,GAAA,O;QAkBA,K,GAAA,K;;AAjDhB,IAAM,oBAAoB,CACxB,CAAC,MAAD,EAAS,CAAC,MAAV,EAAkB,CAAC,MAAnB,CADwB,EAExB,CAAC,CAAC,MAAF,EAAU,MAAV,EAAkB,MAAlB,CAFwB,EAGxB,CAAC,MAAD,EAAS,CAAC,MAAV,EAAkB,MAAlB,CAHwB,CAA1B;AAMA;AACA,IAAM,uBAAuB,SAAvB,oBAAuB,CAAC,CAAD;AAAA,WAC3B,KAAK,SAAL,GACI,IAAI,KADR,GAEI,iBAAQ,CAAR,EAAc,IAAI,GAAlB,IAAyB,KAHF;AAAA,CAA7B;AAMA;AACA,IAAM,oBAAoB,CACxB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CADwB,EAExB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAFwB,EAGxB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAHwB,CAA1B;AAMA;AACA,IAAM,uBAAuB,SAAvB,oBAAuB,CAAC,CAAD;AAAA,WAC3B,KAAK,OAAL,GACI,IAAI,KADR,YAEK,CAAC,IAAI,KAAL,IAAc,KAFnB,EAE6B,GAF7B,CAD2B;AAAA,CAA7B;AAMA,SAAS,KAAT,CAAgB,KAAhB,EAA6B;AAC3B,WAAO,KAAK,GAAL,CAAS,CAAT,EAAY,KAAK,GAAL,CAAS,CAAT,EAAY,KAAZ,CAAZ,CAAP;AACD;AAEK,SAAU,OAAV,CAAmB,GAAnB,EAA2B;AAC/B,QAAM,MAAM,MAAM,CAAN,CAAZ;AACA,QAAM,YAAY,oBAAlB;AACA,QAAM,SAAS,iBAAf;AAEA;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,YAAI,CAAJ,IAAS,KAAK,KAAL,CAAW,MAAM,UACxB,OAAO,CAAP,EAAU,CAAV,IAAe,IAAI,CAAJ,CAAf,GACA,OAAO,CAAP,EAAU,CAAV,IAAe,IAAI,CAAJ,CADf,GAEA,OAAO,CAAP,EAAU,CAAV,IAAe,IAAI,CAAJ,CAHS,CAAN,IAIf,GAJI,CAAT;AAKD;AAED;AACA,WAAO,CAAC,IAAI,CAAJ,KAAU,EAAX,KAAkB,IAAI,CAAJ,KAAU,CAA5B,KAAkC,IAAI,CAAJ,KAAU,CAA5C,CAAP;AACD;AAEK,SAAU,KAAV,CAAiB,GAAjB,EAAyB;AAC7B,QAAM,MAAW,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAjB;AACA,QAAM,YAAY,oBAAlB;AACA,QAAM,SAAS,iBAAf;AAEA;AACA,QAAM,IAAI,UAAU,CAAC,OAAO,EAAP,GAAY,IAAb,IAAqB,GAA/B,CAAV;AACA,QAAM,IAAI,UAAU,CAAC,OAAO,CAAP,GAAW,IAAZ,IAAoB,GAA9B,CAAV;AACA,QAAM,IAAI,UAAU,CAAC,OAAO,CAAP,GAAW,IAAZ,IAAoB,GAA9B,CAAV;AAEA;AACA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,EAAE,CAAzB,EAA4B;AAC1B,YAAI,CAAJ,IAAS,OAAO,CAAP,EAAU,CAAV,IAAe,CAAf,GAAmB,OAAO,CAAP,EAAU,CAAV,IAAe,CAAlC,GAAsC,OAAO,CAAP,EAAU,CAAV,IAAe,CAA9D;AACD;AAED,WAAO,GAAP;AACD","sourcesContent":["import { RGB, XYZ } from '../colorUtils'\n\n// For converting XYZ to sRGB\nconst srgbForwardMatrix = [\n  [3.2406, -1.5372, -0.4986],\n  [-0.9689, 1.8758, 0.0415],\n  [0.0557, -0.2040, 1.0570]\n]\n\n// Forward gamma adjust\nconst srgbForwardTransform = (C: number): number => (\n  C <= 0.0031308\n    ? C * 12.92\n    : 1.055 * C ** (1 / 2.4) - 0.055\n)\n\n// For converting sRGB to XYZ\nconst srgbReverseMatrix = [\n  [0.4124, 0.3576, 0.1805],\n  [0.2126, 0.7152, 0.0722],\n  [0.0193, 0.1192, 0.9505]\n]\n\n// Reverse gamma adjust\nconst srgbReverseTransform = (C: number): number => (\n  C <= 0.04045\n    ? C / 12.92\n    : ((C + 0.055) / 1.055) ** 2.4\n)\n\nfunction clamp (value: number): number {\n  return Math.max(0, Math.min(1, value))\n}\n\nexport function fromXYZ (xyz: XYZ): RGB {\n  const rgb = Array(3)\n  const transform = srgbForwardTransform\n  const matrix = srgbForwardMatrix\n\n  // Matrix transform, then gamma adjustment\n  for (let i = 0; i < 3; ++i) {\n    rgb[i] = Math.round(clamp(transform(\n      matrix[i][0] * xyz[0] +\n      matrix[i][1] * xyz[1] +\n      matrix[i][2] * xyz[2]\n    )) * 255)\n  }\n\n  // Rescale back to [0, 255]\n  return (rgb[0] << 16) + (rgb[1] << 8) + (rgb[2] << 0)\n}\n\nexport function toXYZ (rgb: RGB): XYZ {\n  const xyz: XYZ = [0, 0, 0]\n  const transform = srgbReverseTransform\n  const matrix = srgbReverseMatrix\n\n  // Rescale from [0, 255] to [0, 1] then adjust sRGB gamma to linear RGB\n  const r = transform((rgb >> 16 & 0xff) / 255)\n  const g = transform((rgb >> 8 & 0xff) / 255)\n  const b = transform((rgb >> 0 & 0xff) / 255)\n\n  // Matrix color space transform\n  for (let i = 0; i < 3; ++i) {\n    xyz[i] = matrix[i][0] * r + matrix[i][1] * g + matrix[i][2] * b\n  }\n\n  return xyz\n}\n"],"sourceRoot":""}