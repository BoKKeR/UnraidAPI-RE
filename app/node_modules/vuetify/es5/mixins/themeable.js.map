{"version":3,"sources":["../../src/mixins/themeable.ts"],"names":[],"mappings":";;;;;;;;QAUgB,sB,GAAA,sB;;;;;;;;AAAV,SAAU,sBAAV,CAAkC,OAAlC,EAAwD;AAC5D,QAAM,kBACD,QAAQ,KADP,EAED,QAAQ,UAFP,CAAN;AAIA,QAAM,SAAS,UAAU,OAAV,CAAkB,QAAlB,CAA2B,MAA3B,CAAkC,IAAlC,CAAuC,EAAvC,CAAf;AACA,WAAO,UAAU,OAAV,CAAkB,QAAlB,CAA2B,YAA3B,CAAwC,IAAxC,CAA6C,EAAE,cAAF,EAA7C,CAAP;AACD;AAED;AACA,IAAM,YAAY,cAAI,MAAJ,GAAwB,MAAxB,CAA+B;AAC/C,UAAM,WADyC;AAG/C,WAH+C,qBAGxC;AACL,eAAO;AACL,mBAAO,KAAK;AADP,SAAP;AAGD,KAP8C;;AAS/C,YAAQ;AACN,eAAO;AACL,qBAAS;AACP,wBAAQ;AADD;AADJ;AADD,KATuC;AAiB/C,WAAO;AACL,cAAM;AACJ,kBAAM,OADF;AAEJ,qBAAS;AAFL,SADD;AAKL,eAAO;AACL,kBAAM,OADD;AAEL,qBAAS;AAFJ;AALF,KAjBwC;AA4B/C,QA5B+C,kBA4B3C;AACF,eAAO;AACL,8BAAkB;AAChB,wBAAQ;AADQ;AADb,SAAP;AAKD,KAlC8C;;AAoC/C,cAAU;AACR,cADQ,oBACF;AACJ,gBAAI,KAAK,IAAL,KAAc,IAAlB,EAAwB;AACtB;AACA,uBAAO,IAAP;AACD,aAHD,MAGO,IAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;AAC9B;AACA,uBAAO,KAAP;AACD,aAHM,MAGA;AACL;AACA,uBAAO,KAAK,KAAL,CAAW,MAAlB;AACD;AACF,SAZO;AAaR,oBAbQ,0BAaI;AACV,mBAAO;AACL,+BAAe,KAAK,MADf;AAEL,gCAAgB,CAAC,KAAK;AAFjB,aAAP;AAID,SAlBO;;AAmBR;AACA,kBApBQ,wBAoBE;AACR,gBAAI,KAAK,IAAL,KAAc,IAAlB,EAAwB;AACtB;AACA,uBAAO,IAAP;AACD,aAHD,MAGO,IAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;AAC9B;AACA,uBAAO,KAAP;AACD,aAHM,MAGA;AACL;AACA,uBAAO,KAAK,QAAL,CAAc,IAArB;AACD;AACF,SA/BO;AAgCR,wBAhCQ,8BAgCQ;AACd,mBAAO;AACL,+BAAe,KAAK,UADf;AAEL,gCAAgB,CAAC,KAAK;AAFjB,aAAP;AAID;AArCO,KApCqC;AA4E/C,WAAO;AACL,gBAAQ;AACN,mBADM,mBACG,MADH,EACW,MADX,EACiB;AACrB,oBAAI,WAAW,MAAf,EAAuB;AACrB,yBAAK,gBAAL,CAAsB,MAAtB,GAA+B,KAAK,MAApC;AACD;AACF,aALK;;AAMN,uBAAW;AANL;AADH;AA5EwC,CAA/B,CAAlB;kBAwFe,S","sourcesContent":["import Vue from 'vue'\nimport { PropValidator, RenderContext } from 'vue/types/options'\n\n/* eslint-disable-next-line no-use-before-define */\ninterface Themeable extends Vue {\n  theme: {\n    isDark: boolean\n  }\n}\n\nexport function functionalThemeClasses (context: RenderContext): object {\n  const vm = {\n    ...context.props,\n    ...context.injections\n  }\n  const isDark = Themeable.options.computed.isDark.call(vm)\n  return Themeable.options.computed.themeClasses.call({ isDark })\n}\n\n/* @vue/component */\nconst Themeable = Vue.extend<Themeable>().extend({\n  name: 'themeable',\n\n  provide (): object {\n    return {\n      theme: this.themeableProvide\n    }\n  },\n\n  inject: {\n    theme: {\n      default: {\n        isDark: false\n      }\n    }\n  },\n\n  props: {\n    dark: {\n      type: Boolean,\n      default: null\n    } as PropValidator<boolean | null>,\n    light: {\n      type: Boolean,\n      default: null\n    } as PropValidator<boolean | null>\n  },\n\n  data () {\n    return {\n      themeableProvide: {\n        isDark: false\n      }\n    }\n  },\n\n  computed: {\n    isDark (): boolean {\n      if (this.dark === true) {\n        // explicitly dark\n        return true\n      } else if (this.light === true) {\n        // explicitly light\n        return false\n      } else {\n        // inherit from parent, or default false if there is none\n        return this.theme.isDark\n      }\n    },\n    themeClasses (): object {\n      return {\n        'theme--dark': this.isDark,\n        'theme--light': !this.isDark\n      }\n    },\n    /** Used by menus and dialogs, inherits from v-app instead of the parent */\n    rootIsDark (): boolean {\n      if (this.dark === true) {\n        // explicitly dark\n        return true\n      } else if (this.light === true) {\n        // explicitly light\n        return false\n      } else {\n        // inherit from v-app\n        return this.$vuetify.dark\n      }\n    },\n    rootThemeClasses (): Dictionary<boolean> {\n      return {\n        'theme--dark': this.rootIsDark,\n        'theme--light': !this.rootIsDark\n      }\n    }\n  },\n\n  watch: {\n    isDark: {\n      handler (newVal, oldVal) {\n        if (newVal !== oldVal) {\n          this.themeableProvide.isDark = this.isDark\n        }\n      },\n      immediate: true\n    }\n  }\n})\n\nexport default Themeable\n"],"sourceRoot":""}