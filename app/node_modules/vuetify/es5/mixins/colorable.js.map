{"version":3,"sources":["../../src/mixins/colorable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAGA,SAAS,UAAT,CAAqB,KAArB,EAA2C;AACzC,WAAO,CAAC,CAAC,KAAF,IAAW,CAAC,CAAC,MAAM,KAAN,CAAY,oBAAZ,CAApB;AACD;kBAEc,cAAI,MAAJ,CAAW;AACxB,UAAM,WADkB;AAGxB,WAAO;AACL,eAAO;AADF,KAHiB;AAOxB,aAAS;AACP,0BADO,8BACa,KADb,EACyD;AAAA,gBAApB,IAAoB,uEAAF,EAAE;;AAC9D,gBAAI,WAAW,KAAX,CAAJ,EAAuB;AACrB,qBAAK,KAAL,gBACK,KAAK,KADV;AAEE,6CAAuB,KAFzB;AAGE,yCAAmB;AAHrB;AAKD,aAND,MAMO,IAAI,KAAJ,EAAW;AAChB,qBAAK,KAAL,gBACK,KAAK,KADV,sBAEG,KAFH,EAEW,IAFX;AAID;AAED,mBAAO,IAAP;AACD,SAhBM;AAkBP,oBAlBO,wBAkBO,KAlBP,EAkBmD;AAAA,gBAApB,IAAoB,uEAAF,EAAE;;AACxD,gBAAI,WAAW,KAAX,CAAJ,EAAuB;AACrB,qBAAK,KAAL,gBACK,KAAK,KADV;AAEE,kCAAY,KAFd;AAGE,wCAAkB;AAHpB;AAKD,aAND,MAMO,IAAI,KAAJ,EAAW;AAAA,4CACmB,MAAM,QAAN,GAAiB,IAAjB,GAAwB,KAAxB,CAA8B,GAA9B,EAAmC,CAAnC,CADnB;AAAA;AAAA,oBACT,SADS;AAAA,oBACE,aADF;;AAEhB,qBAAK,KAAL,gBACK,KAAK,KADV,sBAEG,YAAY,QAFf,EAE0B,IAF1B;AAIA,oBAAI,aAAJ,EAAmB;AACjB,yBAAK,KAAL,CAAW,WAAW,aAAtB,IAAuC,IAAvC;AACD;AACF;AACD,mBAAO,IAAP;AACD;AApCM;AAPe,CAAX,C","sourcesContent":["import Vue from 'vue'\nimport { VNodeData } from 'vue/types/vnode'\n\nfunction isCssColor (color?: string | false): boolean {\n  return !!color && !!color.match(/^(#|(rgb|hsl)a?\\()/)\n}\n\nexport default Vue.extend({\n  name: 'colorable',\n\n  props: {\n    color: String\n  },\n\n  methods: {\n    setBackgroundColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'background-color': `${color}`,\n          'border-color': `${color}`\n        }\n      } else if (color) {\n        data.class = {\n          ...data.class,\n          [color]: true\n        }\n      }\n\n      return data\n    },\n\n    setTextColor (color?: string | false, data: VNodeData = {}): VNodeData {\n      if (isCssColor(color)) {\n        data.style = {\n          ...data.style as object,\n          'color': `${color}`,\n          'caret-color': `${color}`\n        }\n      } else if (color) {\n        const [colorName, colorModifier] = color.toString().trim().split(' ', 2) as (string | undefined)[]\n        data.class = {\n          ...data.class,\n          [colorName + '--text']: true\n        }\n        if (colorModifier) {\n          data.class['text--' + colorModifier] = true\n        }\n      }\n      return data\n    }\n  }\n})\n"],"sourceRoot":""}