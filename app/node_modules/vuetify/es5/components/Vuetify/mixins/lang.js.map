{"version":3,"sources":["../../../../src/components/Vuetify/mixins/lang.ts"],"names":[],"mappings":";;;;;kBA0BwB,I;;;;;;AAzBxB;;AACA;;;;;;AAIA,IAAM,cAAc,WAApB;AACA,IAAM,WAAW,OAAO,eAAP,CAAjB;AAEA,SAAS,cAAT,CAAyB,MAAzB,EAAgD,GAAhD,EAAkF;AAAA,QAArB,aAAqB,uEAAL,KAAK;;AAChF,QAAM,WAAW,IAAI,OAAJ,CAAY,WAAZ,EAAyB,EAAzB,CAAjB;AACA,QAAI,cAAc,mCAAqB,MAArB,EAA6B,QAA7B,EAAuC,QAAvC,CAAlB;AAEA,QAAI,gBAAgB,QAApB,EAA8B;AAC5B,YAAI,aAAJ,EAAmB;AACjB,6DAAiC,QAAjC;AACA,0BAAc,GAAd;AACD,SAHD,MAGO;AACL,4DAAgC,QAAhC;AACA,0BAAc,eAAe,YAAf,EAAmB,GAAnB,EAAwB,IAAxB,CAAd;AACD;AACF;AAED,WAAO,WAAP;AACD;AAEa,SAAU,IAAV,GAA4C;AAAA,QAA5B,MAA4B,uEAAF,EAAE;;AACxD,WAAO;AACL,iBAAS,OAAO,MAAP,CAAc,EAAE,gBAAF,EAAd,EAAsB,OAAO,OAA7B,CADJ;AAEL,iBAAS,OAAO,OAAP,IAAkB,IAFtB;AAGL,SAHK,aAGF,GAHE,EAGY;AAAA,8CAAN,MAAM;AAAN,sBAAM;AAAA;;AACf,gBAAI,CAAC,IAAI,UAAJ,CAAe,WAAf,CAAL,EAAkC,OAAO,GAAP;AAElC,gBAAI,OAAO,CAAX,EAAc,OAAO,OAAO,CAAP,gBAAS,GAAT,4BAAiB,MAAjB,GAAP;AAEd,gBAAM,cAAc,eAAe,KAAK,OAAL,CAAa,KAAK,OAAlB,CAAf,EAA2C,GAA3C,CAApB;AAEA,mBAAO,YAAY,OAAZ,CAAoB,YAApB,EAAkC,UAAC,KAAD,EAAgB,KAAhB,EAAiC;AACxE,uBAAO,OAAO,OAAO,CAAC,KAAR,CAAP,CAAP;AACD,aAFM,CAAP;AAGD;AAbI,KAAP;AAeD","sourcesContent":["import en from '../../../locale/en'\nimport { getObjectValueByPath } from '../../../util/helpers'\nimport { consoleError, consoleWarn } from '../../../util/console'\nimport { VuetifyUseOptions as Options } from 'vuetify/types'\nimport { VuetifyLanguage, VuetifyLocale } from 'vuetify/types/lang'\n\nconst LANG_PREFIX = '$vuetify.'\nconst fallback = Symbol('Lang fallback')\n\nfunction getTranslation (locale: VuetifyLocale, key: string, usingFallback = false): string {\n  const shortKey = key.replace(LANG_PREFIX, '')\n  let translation = getObjectValueByPath(locale, shortKey, fallback) as string | typeof fallback\n\n  if (translation === fallback) {\n    if (usingFallback) {\n      consoleError(`Translation key \"${shortKey}\" not found in fallback`)\n      translation = key\n    } else {\n      consoleWarn(`Translation key \"${shortKey}\" not found, falling back to default`)\n      translation = getTranslation(en, key, true)\n    }\n  }\n\n  return translation\n}\n\nexport default function lang (config: Options['lang'] = {}): VuetifyLanguage {\n  return {\n    locales: Object.assign({ en }, config.locales),\n    current: config.current || 'en',\n    t (key, ...params) {\n      if (!key.startsWith(LANG_PREFIX)) return key\n\n      if (config.t) return config.t(key, ...params)\n\n      const translation = getTranslation(this.locales[this.current], key)\n\n      return translation.replace(/\\{(\\d+)\\}/g, (match: string, index: string) => {\n        return String(params[+index])\n      })\n    }\n  }\n}\n"],"sourceRoot":""}