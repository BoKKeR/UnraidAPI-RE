'use strict';

const _require = require('./util'),
      argument = _require.argument,
      argument2 = _require.argument2,
      expectToBeCase = _require.expectToBeCase,
      expectNotToBeCase = _require.expectNotToBeCase,
      expectToEqualCase = _require.expectToEqualCase,
      expectNotToEqualCase = _require.expectNotToEqualCase,
      getDocsUrl = _require.getDocsUrl,
      method = _require.method,
      method2 = _require.method2;

module.exports = {
  meta: {
    docs: {
      url: getDocsUrl(__filename)
    },
    fixable: 'code'
  },

  create(context) {
    return {
      CallExpression(node) {
        const is = expectToBeCase(node, undefined) || expectToEqualCase(node, undefined);
        const isNot = expectNotToEqualCase(node, undefined) || expectNotToBeCase(node, undefined);

        if (is || isNot) {
          context.report({
            fix(fixer) {
              if (is) {
                return [fixer.replaceText(method(node), 'toBeUndefined'), fixer.remove(argument(node))];
              }

              return [fixer.replaceText(method2(node), 'toBeUndefined'), fixer.remove(argument2(node))];
            },

            message: 'Use toBeUndefined() instead',
            node: is ? method(node) : method2(node)
          });
        }
      }

    };
  }

};