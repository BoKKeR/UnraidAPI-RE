'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const _require = require('./util'),
      getDocsUrl = _require.getDocsUrl,
      hasExpressions = _require.hasExpressions,
      isDescribe = _require.isDescribe,
      isTestCase = _require.isTestCase,
      isTemplateLiteral = _require.isTemplateLiteral,
      isString = _require.isString,
      getStringValue = _require.getStringValue;

const errorMessages = {
  describe: 'describe should not have an empty title',
  test: 'test should not have an empty title'
};
module.exports = {
  meta: {
    docs: {
      url: getDocsUrl(__filename)
    }
  },

  create(context) {
    return {
      CallExpression(node) {
        const is = {
          describe: isDescribe(node),
          testCase: isTestCase(node)
        };

        if (!is.describe && !is.testCase) {
          return;
        }

        const _node$arguments = _slicedToArray(node.arguments, 1),
              firstArgument = _node$arguments[0];

        if (!isString(firstArgument)) {
          return;
        }

        if (isTemplateLiteral(firstArgument) && hasExpressions(firstArgument)) {
          return;
        }

        if (getStringValue(firstArgument) === '') {
          const message = is.describe ? errorMessages.describe : errorMessages.test;
          context.report({
            message,
            node
          });
        }
      }

    };
  },

  errorMessages
};