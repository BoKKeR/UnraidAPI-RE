{"version":3,"sources":["../src/index.js"],"names":["gaussian","r","cb","throwError","call","rs","Math","ceil","y","bitmap","height","x","width","red","green","blue","alpha","wsum","iy","ix","x1","min","max","y1","dsq","wght","exp","PI","idx","data","round"],"mappings":"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","sourcesContent":["import { isNodePattern, throwError } from '@jimp/utils';\n\n/**\n * Applies a true Gaussian blur to the image (warning: this is VERY slow)\n * @param {number} r the pixel radius of the blur\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  gaussian(r, cb) {\n    // http://blog.ivank.net/fastest-gaussian-blur.html\n    if (typeof r !== 'number') {\n      return throwError.call(this, 'r must be a number', cb);\n    }\n\n    if (r < 1) {\n      return throwError.call(this, 'r must be greater than 0', cb);\n    }\n\n    const rs = Math.ceil(r * 2.57); // significant radius\n\n    for (let y = 0; y < this.bitmap.height; y++) {\n      for (let x = 0; x < this.bitmap.width; x++) {\n        let red = 0;\n        let green = 0;\n        let blue = 0;\n        let alpha = 0;\n        let wsum = 0;\n\n        for (let iy = y - rs; iy < y + rs + 1; iy++) {\n          for (let ix = x - rs; ix < x + rs + 1; ix++) {\n            const x1 = Math.min(this.bitmap.width - 1, Math.max(0, ix));\n            const y1 = Math.min(this.bitmap.height - 1, Math.max(0, iy));\n            const dsq = (ix - x) * (ix - x) + (iy - y) * (iy - y);\n            const wght = Math.exp(-dsq / (2 * r * r)) / (Math.PI * 2 * r * r);\n            const idx = (y1 * this.bitmap.width + x1) << 2;\n\n            red += this.bitmap.data[idx] * wght;\n            green += this.bitmap.data[idx + 1] * wght;\n            blue += this.bitmap.data[idx + 2] * wght;\n            alpha += this.bitmap.data[idx + 3] * wght;\n            wsum += wght;\n          }\n\n          const idx = (y * this.bitmap.width + x) << 2;\n\n          this.bitmap.data[idx] = Math.round(red / wsum);\n          this.bitmap.data[idx + 1] = Math.round(green / wsum);\n          this.bitmap.data[idx + 2] = Math.round(blue / wsum);\n          this.bitmap.data[idx + 3] = Math.round(alpha / wsum);\n        }\n      }\n    }\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"],"file":"index.js"}