/*!
 * @nuxt/cli v2.8.1 (c) 2016-2019

 * - All the amazing contributors
 * Released under the MIT License.
 * Website: https://nuxtjs.org
*/
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('path');
const consola = _interopDefault(require('consola'));
require('exit');
require('@nuxt/utils');
const chalk = _interopDefault(require('chalk'));
require('std-env');
require('wrap-ansi');
require('boxen');
const __chunk_2 = require('./cli-chunk2.js');
require('@nuxt/config');
const __chunk_3 = require('./cli-chunk3.js');
require('pretty-bytes');
const __chunk_4 = require('./cli-chunk4.js');
const opener = _interopDefault(require('opener'));

const dev = {
  name: 'dev',
  description: 'Start the application in development mode (e.g. hot-code reloading, error reporting)',
  usage: 'dev <dir>',
  options: {
    ...__chunk_3.common,
    ...__chunk_3.server,
    open: {
      alias: 'o',
      type: 'boolean',
      description: 'Opens the server listeners url in the default browser'
    }
  },

  async run(cmd) {
    const { argv } = cmd;

    await this.startDev(cmd, argv, argv.open);
  },

  async startDev(cmd, argv) {
    try {
      const nuxt = await this._startDev(cmd, argv);

      return nuxt
    } catch (error) {
      consola.error(error);
    }
  },

  async _startDev(cmd, argv) {
    const config = await cmd.getNuxtConfig({ dev: true, _build: true });
    const nuxt = await cmd.getNuxt(config);

    // Setup hooks
    nuxt.hook('watch:restart', payload => this.onWatchRestart(payload, { nuxt, cmd, argv }));
    nuxt.hook('bundler:change', changedFileName => this.onBundlerChange(changedFileName));

    // Wait for nuxt to be ready
    await nuxt.ready();

    // Start listening
    await nuxt.server.listen();

    // Show banner when listening
    __chunk_4.showBanner(nuxt, false);

    // Opens the server listeners url in the default browser (only once)
    if (argv.open) {
      argv.open = false;
      const openerPromises = nuxt.server.listeners.map(listener => opener(listener.url));
      await Promise.all(openerPromises);
    }

    // Create builder instance
    const builder = await cmd.getBuilder(nuxt);

    // Start Build
    await builder.build();

    // Print memory usage
    __chunk_4.showMemoryUsage();

    // Return instance
    return nuxt
  },

  logChanged({ event, path }) {
    const { icon, color, action } = __chunk_2.eventsMapping[event] || __chunk_2.eventsMapping.change;

    consola.log({
      type: event,
      icon: chalk[color].bold(icon),
      message: `${action} ${chalk.cyan(__chunk_2.formatPath(path))}`
    });
  },

  async onWatchRestart({ event, path }, { nuxt, cmd, argv }) {
    this.logChanged({ event, path });

    await nuxt.close();

    await this.startDev(cmd, argv);
  },

  onBundlerChange(path) {
    this.logChanged({ event: 'change', path });
  }
};

exports.default = dev;
