/*!
 * @nuxt/cli v2.8.1 (c) 2016-2019

 * - All the amazing contributors
 * Released under the MIT License.
 * Website: https://nuxtjs.org
*/
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const path = _interopDefault(require('path'));
const exit = _interopDefault(require('exit'));
const utils = require('@nuxt/utils');
const chalk = _interopDefault(require('chalk'));
const env = _interopDefault(require('std-env'));
const wrapAnsi = _interopDefault(require('wrap-ansi'));
const boxen = _interopDefault(require('boxen'));

const forceExitTimeout = 5;

const startSpaces = 2;
const optionSpaces = 2;

// 80% of terminal column width
// this is a fn because console width can have changed since startup
const maxCharsPerLine = () => (process.stdout.columns || 100) * 80 / 100;

function indent(count, chr = ' ') {
  return chr.repeat(count)
}

function indentLines(string, spaces, firstLineSpaces) {
  const lines = Array.isArray(string) ? string : string.split('\n');
  let s = '';
  if (lines.length) {
    const i0 = indent(firstLineSpaces === undefined ? spaces : firstLineSpaces);
    s = i0 + lines.shift();
  }
  if (lines.length) {
    const i = indent(spaces);
    s += '\n' + lines.map(l => i + l).join('\n');
  }
  return s
}

function foldLines(string, spaces, firstLineSpaces, charsPerLine = maxCharsPerLine()) {
  return indentLines(wrapAnsi(string, charsPerLine), spaces, firstLineSpaces)
}

function colorize(text) {
  return text
    .replace(/\[[^ ]+]/g, m => chalk.grey(m))
    .replace(/<[^ ]+>/g, m => chalk.green(m))
    .replace(/ (-[-\w,]+)/g, m => chalk.bold(m))
    .replace(/`([^`]+)`/g, (_, m) => chalk.bold.cyan(m))
}

function box(message, title, options) {
  return boxen([
    title || chalk.white('Nuxt Message'),
    '',
    chalk.white(foldLines(message, 0, 0, maxCharsPerLine()))
  ].join('\n'), Object.assign({
    borderColor: 'white',
    borderStyle: 'round',
    padding: 1,
    margin: 1
  }, options)) + '\n'
}

function successBox(message, title) {
  return box(message, title || chalk.green('✔ Nuxt Success'), {
    borderColor: 'green'
  })
}

function warningBox(message, title) {
  return box(message, title || chalk.yellow('⚠ Nuxt Warning'), {
    borderColor: 'yellow'
  })
}

function errorBox(message, title) {
  return box(message, title || chalk.red('✖ Nuxt Error'), {
    borderColor: 'red'
  })
}

function fatalBox(message, title) {
  return errorBox(message, title || chalk.red('✖ Nuxt Fatal Error'))
}

const eventsMapping = {
  add: { icon: '+', color: 'green', action: 'Created' },
  change: { icon: env.windows ? '»' : '↻', color: 'blue', action: 'Updated' },
  unlink: { icon: '-', color: 'red', action: 'Removed' }
};

function formatPath(filePath) {
  if (!filePath) {
    return
  }
  return filePath.replace(process.cwd() + path.sep, '')
}

/**
 * Normalize string argument in command
 *
 * @export
 * @param {String} argument
 * @param {*} defaultValue
 * @returns formatted argument
 */
function normalizeArg(arg, defaultValue) {
  switch (arg) {
    case 'true': arg = true; break
    case '': arg = true; break
    case 'false': arg = false; break
    case undefined: arg = defaultValue; break
  }
  return arg
}

function forceExit(cmdName, timeout) {
  if (timeout !== false) {
    const exitTimeout = setTimeout(() => {
      const msg = `The command 'nuxt ${cmdName}' finished but did not exit after ${timeout}s
This is most likely not caused by a bug in Nuxt.js
Make sure to cleanup all timers and listeners you or your plugins/modules start.
Nuxt.js will now force exit

${chalk.bold('DeprecationWarning: Starting with Nuxt version 3 this will be a fatal error')}`;

      // TODO: Change this to a fatal error in v3
      process.stderr.write(warningBox(msg));
      exit(0);
    }, timeout * 1000);
    exitTimeout.unref();
  } else {
    exit(0);
  }
}

// An immediate export throws an error when mocking with jest
// TypeError: Cannot set property createLock of #<Object> which has only a getter
function createLock(...args) {
  return utils.lock(...args)
}

exports.colorize = colorize;
exports.createLock = createLock;
exports.eventsMapping = eventsMapping;
exports.fatalBox = fatalBox;
exports.foldLines = foldLines;
exports.forceExit = forceExit;
exports.forceExitTimeout = forceExitTimeout;
exports.formatPath = formatPath;
exports.indent = indent;
exports.normalizeArg = normalizeArg;
exports.optionSpaces = optionSpaces;
exports.startSpaces = startSpaces;
exports.successBox = successBox;
