{"version":3,"sources":["../lib/utils.js","../lib/parse.js","../lib/ast.js","../lib/transform.js","../lib/output.js","../lib/scope.js","../lib/compress/index.js","../tools/domprops.js","../lib/propmangle.js","../lib/minify.js","../lib/sourcemap.js","../tools/node.js","../lib/mozilla-ast.js"],"names":["characters","str","split","member","name","array","includes","find_if","func","i","n","length","configure_error_stack","fn","Object","defineProperty","prototype","get","err","Error","this","message","e","stack","DefaultsError","msg","defs","defaults","args","croak","ret","HOP","noop","return_false","return_true","return_this","return_null","create","constructor","MAP","a","f","backwards","top","doit","val","is_last","Last","v","AtTop","Splice","push","apply","slice","reverse","skip","Array","isArray","concat","at_top","splice","last","push_uniq","el","string_template","text","props","replace","p","remove","mergeSort","cmp","_ms","m","Math","floor","left","right","b","r","ai","bi","merge","makePredicate","words","Set","all","predicate","map_add","map","key","value","has","set","obj","prop","hasOwnProperty","call","first_in_statement","node","parent","AST_Statement","body","AST_Sequence","expressions","TYPE","expression","AST_Dot","AST_Sub","AST_Conditional","condition","AST_Binary","AST_UnaryPostfix","keep_name","keep_setting","RegExp","test","KEYWORDS","KEYWORDS_ATOM","RESERVED_WORDS","KEYWORDS_BEFORE_EXPRESSION","OPERATOR_CHARS","RE_NUM_LITERAL","RE_HEX_NUMBER","RE_OCT_NUMBER","RE_ES6_OCT_NUMBER","RE_BIN_NUMBER","RE_DEC_NUMBER","OPERATORS","WHITESPACE_CHARS","NEWLINE_CHARS","PUNC_AFTER_EXPRESSION","PUNC_BEFORE_EXPRESSION","PUNC_CHARS","UNICODE","ID_Start","ID_Continue","get_full_char","pos","char","charAt","is_surrogate_pair_head","next","is_surrogate_pair_tail","prev","code","charCodeAt","is_digit","is_identifier_start","ch","is_identifier_char","is_identifier_string","JS_Parse_Error","filename","line","col","js_error","is_token","token","type","EX_EOF","tokenizer","$TEXT","html5_comments","shebang","S","tokpos","tokline","tokcol","newline_before","regex_allowed","brace_counter","template_braces","comments_before","directives","directive_stack","peek","signal_eof","in_string","forward","looking_at","substr","find","what","indexOf","start_token","prev_was_dot","previous_token","is_comment","UNARY_POSTFIX","endline","endcol","endpos","nlb","file","raw","substring","comments_after","AST_Token","skip_whitespace","parse_error","read_num","prefix","has_e","after_e","has_x","has_dot","num","pred","read_while","next_token","has_directive","valid","parseInt","parseFloat","parse_js_number","isNaN","read_escaped_char","strict_hex","template_string","String","fromCharCode","hex_bytes","result","strict_octal","read_octal_escape_sequence","digit","read_string","with_eof_error","quote_char","quote","tok","read_template_characters","begin","content","end","tmp","pop","skip_line_comment","find_eol","skip_multiline_comment","surrogates","get_full_char_length","read_name","escaped","read_escaped_identifier_char","read_regexp","source","prev_backslash","in_class","mods","regexp","raw_source","read_operator","grow","op","bigger","handle_slash","eof_error","cont","x","ex","force_regexp","word","context","nc","add_directive","directive","undefined","push_directives_stack","pop_directives_stack","UNARY_PREFIX","ASSIGNMENT","PRECEDENCE","j","ATOMIC_START_TOKEN","parse","options","bare_returns","ecma","module","strict","toplevel","input","peeked","in_function","in_async","in_generator","in_directives","in_loop","labels","is","ctx","token_error","unexpected","expect_token","expect","punc","has_newline_before","comment","can_insert_semicolon","is_in_generator","is_in_async","semicolon","optional","parenthesised","exp","embed_tokens","parser","start","expr","arguments","handle_regexp","statement","is_export_default","is_for_body","is_if_body","dir","stat","simple_statement","AST_String","AST_Directive","function_","AST_Defun","imported_name","imported_names","as_symbol","AST_SymbolImport","map_names","mod_str","AST_Import","module_name","import_","label","AST_Label","l","AST_IterationStatement","references","forEach","ref","AST_Continue","AST_LabeledStatement","labeled_statement","AST_BlockStatement","block_","AST_EmptyStatement","break_cont","AST_Break","AST_Debugger","AST_Do","AST_While","for_await_error","await_tok","init","var_","let_","const_","is_in","is_of","AST_Definitions","definitions","is_assignable","to_destructuring","AST_Destructuring","AST_ForIn","object","for_in","is_await","lhs","AST_ForOf","await","for_of","step","AST_For","regular_for","for_","class_","AST_DefClass","cond","belse","AST_If","alternative","if_","AST_Return","AST_Switch","switch_body_","AST_Throw","bcatch","bfinally","parameter","AST_SymbolCatch","AST_Catch","argname","AST_Finally","AST_Try","try_","AST_With","is_default","exported_names","exported_value","exported_definition","AST_Export","AST_Lambda","AST_SimpleStatement","export_","ldef","AST_LabelRef","thedef","arrow_function","argnames","is_async","_function_body","AST_Arrow","async","ctor","is_generator_property","in_statement","is_generator","AST_SymbolDefun","AST_SymbolLambda","AST_Function","AST_Accessor","AST_SymbolDeclaration","track_used_binding_identifiers","is_parameter","parameters","duplicate","default_assignment","spread","strict_mode","tracker","add_parameter","check_strict","add","mark_default_assignment","mark_spread","mark_strict_mode","is_strict","used_parameters","symbol_type","param","expand","binding_element","AST_DefaultAssign","operator","AST_Expansion","expand_token","elements","first","is_expand","first_token","AST_SymbolFunarg","AST_Hole","names","is_array","AST_ObjectKeyVal","property_token","property","as_property_name","block","generator","loop","current_generator","current_async","params","_verify_symbol","cur","branch","AST_Case","AST_Default","vardefs","no_in","kind","def","sym_type","AST_SymbolVar","AST_SymbolConst","AST_SymbolLet","AST_VarDef","AST_Var","AST_Let","AST_Const","as_atom_node","_make_symbol","AST_SymbolRef","AST_Number","AST_RegExp","AST_False","AST_True","AST_Null","to_fun_args","_","__","default_seen_above","insert_default","default_value","AST_Object","properties","AST_Array","AST_Assign","expr_atom","allow_calls","allow_arrows","subscripts","AST_NewTarget","newexp","expr_list","AST_New","mark_pure","new_","exprs","maybe_sequence","spread_token","invalid_sequence","trailing_comma","params_or_seq_","AST_Call","len","unshift","comments_before_length","array_","object_or_destructuring_","cls","AST_ClassExpression","tagged","segments","AST_TemplateSegment","AST_TemplateString","closing","allow_trailing_comma","allow_empty","create_accessor","concise","concise_method_or_getset","AST_Node","KindOfClass","method","class_name","extends_","AST_SymbolDefClass","AST_SymbolClass","extends","is_class","get_ast","AST_SymbolMethod","is_static","AST_ConciseMethod","static","AST_ObjectGetter","AST_ObjectSetter","map_name","is_import","make_symbol","foreign_name","foreign_type","AST_SymbolImportForeign","AST_SymbolExportForeign","AST_SymbolExport","AST_NameMapping","map_nameAsterisk","AST_This","AST_Super","sym","noerror","comments","pure","call_args","AST_PrefixedTemplateString","maybe_unary","AST_Await","make_unary","AST_UnaryPrefix","expr_op","min_prec","prec","maybe_conditional","expr_ops","yes","consequent","AST_PropAccess","AST_ObjectProperty","maybe_assign","star","has_expression","AST_Yield","is_star","_yield_expression","commas","AST_Toplevel","DEFNODE","methods","base","self_props","PROPS","proto","initialize","Function","BASE","SUBCLASSES","CTOR","SELF_PROPS","DEFMETHOD","_clone","deep","self","clone","transform","TreeTransformer","$documentation","$propdoc","_walk","visitor","_visit","walk","warn_function","warn","txt","walk_body","clone_block_scope","block_scope","AST_Block","AST_StatementWithBody","TreeWalker","AST_LoopControl","AST_DWLoop","AST_Scope","variables","functions","uses_with","uses_eval","parent_scope","enclosed","cname","get_defun_scope","is_block_scope","Map","pinned","globals","wrap_commonjs","wrapped_tl","wrap_enclose","args_values","index","join","uses_arguments","args_as_names","out","all_symbols","AST_Symbol","seg","AST_Jump","AST_Exit","AST_SwitchBranch","name_import","name_export","AST_Unary","AST_Class","scope","AST_SymbolBlockDeclaration","AST_Constant","getValue","literal","AST_Atom","AST_NaN","AST_Undefined","AST_Infinity","AST_Boolean","callback","visit","before","after","descend","getPrototypeOf","find_parent","st","loopcontrol_target","tw","in_list","y","do_list","list","EXPECT_DIRECTIVE","is_some_comments","OutputStream","readonly","ascii_only","beautify","braces","ie8","indent_level","indent_start","inline_script","keep_quoted_props","max_line_len","preamble","quote_keys","quote_style","safari10","semicolons","shorthand","source_map","webkit","width","wrap_iife","comment_filter","regex_pos","lastIndexOf","indentation","current_col","current_line","current_pos","OUTPUT","to_utf8","identifier","get_full_char_code","toString","s","encode_string","dq","sq","quote_single","quote_double","make_string","make_indent","back","repeat_string","d","mapping_token","mapping_name","has_parens","might_need_space","might_need_semicolon","might_add_newline","need_newline_indented","need_space","newline_insert","mappings","do_add_mapping","mapping","cline","ccol","ensure_line_len","delta","requireSemicolonChars","print","indent","space","half","with_indent","next_indent","save_indentation","newline","force_semicolon","has_nlb","current_width","should_break","comma","colon","print_name","make_name","print_string","escape_directive","encoded","print_template_string_chars","with_block","with_parens","with_square","add_mapping","option","opt","prepend_comments","_dumped","shift","filter","last_nlb","c","append_comments","tail","insert","push_node","pop_node","SymbolDef","orig","eliminated","replaced","global","export","mangled_name","undeclared","id","next_id","DEFPRINT","nodetype","in_directive","active_scope","use_asm","PARENS","display_body","is_toplevel","output","allow_directives","stmt","print_braced_empty","print_braced","parenthesize_for_noin","noin","parens","print_property_name","make_num","force_statement","make_block","need_constructor_parens","toLowerCase","exec","best","best_of","DEFMAP","stream","force_parens","_codegen","add_source_map","needs_parens","po","pp","so","sp","p1","_do_print_body","nokeyword","arg","_do_print","tag","parenthesize_tag","is_tagged","make_then","definition","get_name","allowShortHand","_print_getter_setter","MASK_EXPORT_DONT_MANGLE","MASK_EXPORT_WANT_MANGLE","next_mangled","ext","base54","reserved","unmangleable","eval","keep_fnames","keep_classnames","mangle","cache","redefined","defun","in_destructuring","for_scopes","save_scope","init_scope_vars","save_defun","save_labels","delete","def_function","mark_export","def_variable","destructuring","mark_enclosed","find_variable","reference","level","exported","def_global","refs","g","symbol","mangled_names","tricky_def","tricky_name","_default_mangler_options","lname","to_mangle","collect","save_nesting","avoid","to_avoid","add_def","reset","sort","find_colliding_names","rename","next_name","_print","consider","skip_string","tail_node","print_to_string","chars","frequency","leading","digits","compare","Compressor","false_by_default","arrows","booleans","booleans_as_integers","collapse_vars","comparisons","computed_props","conditionals","dead_code","drop_console","drop_debugger","evaluate","global_defs","hoist_funs","hoist_props","hoist_vars","if_return","inline","join_vars","keep_fargs","keep_infinity","loops","negate_iife","passes","pure_getters","pure_funcs","reduce_funcs","reduce_vars","sequences","side_effects","switches","top_retain","typeofs","unsafe","unsafe_arrows","unsafe_comps","unsafe_Function","unsafe_math","unsafe_methods","unsafe_proto","unsafe_regexp","unsafe_undefined","unused","warnings","funcs","vars","sequences_limit","warnings_produced","count","exposed","in_boolean_context","compress","resolve_defines","process_expression","min_count","stopping","pass","figure_out_scope","reset_opt_flags","info","clear_warnings","_squeezed","was_scope","hoist_properties","hoist_declarations","optimize","drop_unused","def_optimize","optimizer","compressor","_optimized","read_property","get_value","make_node_from_constant","fixed_value","is_modified","immutable","is_lhs","is_expr_pure","contains_this","is_func_expr","is_lhs_read_only","is_immutable","is_ref_of","make_node","make_sequence","reduce","merge_sequence","isFinite","maintain_this_binding","as_statement_array","thing","is_empty","can_be_evicted_from_block","loop_body","is_iife_call","is_undeclared_ref","tt","drop_side_effect_free","def_reduce_vars","reset_def","assignments","chained","direct_access","fixed","recursive_refs","should_replace","single_use","reset_variables","safe_ids","mark","loop_ids","reset_block_variables","safe","safe_to_read","safe_to_assign","mark_escaped","depth","is_constant","is_constant_expression","lazy_op","suppressor","mark_def_node","inlined","save_ids","mark_func_expr","iife","eq","saved_loop","has_break_or_continue","recursive_ref","ref_once","_top","global_names","def_is_string","identifier_atom","is_identifier_atom","tighten_body","statements","in_try","find_loop_scope_try","CHANGED","max_iter","eliminate_spurious_blocks","eliminate_dead_code","handle_if_return","sequencesize","sequencesize_2","join_consecutive_vars","collapse","candidates","stat_index","scanner","abort","hit","hit_stack","hit_index","handle_custom_scan_order","stop_after","find_stop","write_only","lvalues","equivalent_to","replace_all","is_declared","stop_if_hit","lhs_local","can_replace","value_def","candidate","funarg","may_modify","may_throw_on_access","may_throw","has_side_effects","side_effects_external","multi_replacer","extract_args","extract_candidates","get_lhs","get_lvalues","is_lhs_local","value_has_side_effects","replace_all_symbols","remove_candidate","has_overlapping_symbol","fn_strict","found","scan_this","referenced","var_def","mangleable_var","get_rvalue","min","seen_dirs","multiple_if_returns","has_multiple_if_returns","in_lambda","next_index","ab","can_merge_flow","aborts","negate","as_statement_array_with_return","extract_functions","prev_index","lct","is_return_void","declarations_only","has_quit","extract_declarations_from_unreachable_code","seq","push_seq","to_simple_statement","decls","cons_seq","alt","join_object_assignments","defn","trimmed","diff","extract_object_assignments","target","remove_initializers","is_undefined","def_dot_throw","_dot_throw","def_is_boolean","unary_bool","binary_bool","is_boolean","def_is_number","unary","binary","is_number","is_string","unary_side_effects","best_of_expression","ast1","ast2","convert_to_predicate","keys","def_find_defs","_find_defs","child","suffix","defines","to_node","object_fns","native_fns","Boolean","Number","static_fns","def_eval","_eval","unaryPrefix","element","non_converting_unary","non_converting_binary","pow","global_objs","static_values","aa","first_arg","static_value","static_fn","native_fn","def_negate","basic_negation","negated","global_pure_fns","def_has_side_effects","any","is_call_pure","def_may_throw","def_is_constant_expression","all_refs_local","scope_def","block_aborts","opt_AST_Lambda","drop_funcs","drop_vars","assign_as_unused","in_use_ids","fixed_ids","var_defs_by_id","initializations","destructuring_value","node_def","in_export","destructuring_cache","scan_ref_scoped","in_use","trim","__unused","unreferenced","template","drop_block","head","is_destructure","var_defs","assign","dirs","hoisted","vars_found","var_decl","to_assignments","varNames","var_names","_var_names","defs_by_id","make_sym","new_var","make_var_name","def_drop_side_effect_free","nodes","changed","values","pure_prop_access_globals","retain_top_func","if_break_in_loop","is_break","drop_it","rest","self_condition_length","negated_length","negated_is_best","default_branch","exact_match","decl","eliminate_branch","default_index","has_break","varDef","inline_array_like_spread","simple_args","is_func","EXIT","separator","consts","ast","fun","comp","compute_char_frequency","mangle_names","is_regular_func","can_inline","return_value","can_flatten_body","block_scoped","variable","safe_to_inject","can_inject_vars","can_inject_args","is_reachable","can_inject_symbols","append_var","flatten_args","lines","flatten_vars","flatten_fn","ev","trim_right_for_undefined","lift_sequences","commutativeOperators","is_atomic","reachable","find_ref","scan_scope","reversible","is_strict_comparison","combined","ll","rr","truthy","falsy","lr","associative","reversed","within_array_or_object_literal","defun_def","lambda_def","value_length","has_symbol_ref","name_length","overhead","undef","ASSIGN_OPS","ASSIGN_OPS_COMMUTATIVE","safe_to_flatten","literals_in_boolean_context","lift_key","evaluateRight","arg_index","single_arg_diff","in_bool","is_true","is_false","booleanize","OPT_ARGUMENTS","sub","flatten_object","retValue","FLATTEN","flatten","k","optimized","has_special_symbol","segment","arrow","ancestors","is_destructuring_export_decl","keep","elem","should_retain","domprops","reserve_quoted_keys","addStrings","mangle_properties","reserved_option","builtins","debug","keep_quoted","only_cache","regex","objects","global_ref","new_global","Date","Symbol","ArrayBuffer","DataView","decodeURI","decodeURIComponent","encodeURI","encodeURIComponent","EvalError","Float32Array","Float64Array","Int8Array","Int16Array","Int32Array","JSON","Promise","Proxy","RangeError","ReferenceError","Reflect","SyntaxError","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","URIError","WeakMap","WeakSet","getOwnPropertyNames","find_builtins","debug_name_suffix","names_to_mangle","keep_quoted_strict","root","mangleStrings","can_mangle","should_mangle","mangled","debug_mangled","to_ascii","atob","b64","Buffer","from","to_base64","btoa","set_shorthand","init_cache","map_from_object","to_json","minify","files","match","quoted_props","timings","enclose","nameCache","sourceMap","wrap","now","includeSources","url","warning","orig_line_diff","dest_line_diff","MOZ_SourceMap","SourceMapGenerator","sourceRoot","orig_map","SourceMapConsumer","sources","sourceContent","sourceContentFor","setSourceContent","gen_line","gen_col","orig_line","orig_col","originalPositionFor","column","addMapping","generated","original","stringify","toJSON","SourceMap","total","error","infer_options","normalize_directives","MOZ_TO_ME","Program","M","my_start_token","my_end_token","from_moz","ArrayPattern","elm","ObjectPattern","AssignmentPattern","SpreadElement","argument","RestElement","TemplateElement","cooked","TemplateLiteral","quasis","TaggedTemplateExpression","quasi","FunctionDeclaration","FunctionExpression","ArrowFunctionExpression","ExpressionStatement","TryStatement","handlers","handler","guardedHandlers","finalizer","Property","computed","MethodDefinition","ArrayExpression","ObjectExpression","SequenceExpression","MemberExpression","SwitchCase","VariableDeclaration","declarations","ImportDeclaration","specifiers","specifier","imported","local","ExportAllDeclaration","ExportNamedDeclaration","declaration","ExportDefaultDeclaration","Literal","rx","pattern","flags","MetaProperty","meta","Identifier","FROM_MOZ_STACK","raw_token","moznode","loc","range","moztype","mytype","propmap","moz_to_me","me_to_moz","moz","how","my","to_moz","to_moz_block","to_moz_scope","def_to_moz","UpdateExpression","UnaryExpression","ClassDeclaration","ClassExpression","superClass","to_moz_in_destructuring","guard","name_mapping","isComputed","string_or_num","to_mozilla_ast","mynode","from_mozilla_ast","save_stack","TO_MOZ_STACK","0","component","[object Object]"],"mappings":"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,EAAKtsC,iBAAiB2U,KACrB43B,EAAczV,EAAYwV,EAAKtsC,MAAMwuB,eACzC6d,EAAK7uC,KAAK8uC,GAGdD,EAAKrxC,QAAUilB,EAAKvJ,MAAM1b,SAC1BilB,EAAKvJ,MAAQ21B,GAGrB,OAAOpsB,EAgBP,SAASssB,EAAczV,EAAYhf,GAC/B,QAAIA,EAAIxI,WAAWtU,UACd8c,EAAIwT,UACLwL,EAAW/qB,SAASupB,QACfwB,EAAWtC,YACJsC,EAAWtC,WAAW1c,OA37MlD,GCxZO,IAAI00B,GAAW,CAClB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,SACA,aACA,YACA,SACA,oBACA,iBACA,kBACA,WACA,2BACA,2BACA,uBACA,UACA,QACA,aACA,WACA,SACA,WACA,0BACA,eACA,uBACA,mBACA,iBACA,YACA,oBACA,eACA,iBACA,qBACA,mBACA,6BACA,QACA,cACA,OACA,QACA,cACA,wBACA,eACA,uBACA,gBACA,YACA,aACA,uBACA,mBACA,yBACA,OACA,yBACA,WACA,QACA,cACA,kBACA,gBACA,iBACA,uBACA,qBACA,kBACA,gBACA,YACA,OACA,OACA,eACA,YACA,YACA,YACA,OACA,wBACA,iBACA,cACA,eACA,OACA,oBACA,UACA,WACA,iBACA,kBACA,oBACA,mBACA,OACA,YACA,UACA,kBACA,MACA,eACA,qBACA,SACA,eACA,WACA,gBACA,QACA,SACA,UACA,oBACA,mBACA,oBACA,kBACA,eACA,iBACA,gCACA,gCACA,gCACA,+BACA,6BACA,aACA,iBACA,iBACA,iBACA,qBACA,eACA,qBACA,MACA,iBACA,iBACA,mBACA,sBACA,kBACA,2BACA,kBACA,gBACA,kBACA,mBACA,eACA,qBACA,mBACA,cACA,oBACA,UACA,cACA,sBACA,eACA,gBACA,kBACA,iBACA,WACA,eACA,0BACA,mBACA,kBACA,WACA,SACA,cACA,aACA,UACA,gBACA,UACA,UACA,kBACA,wBACA,sBACA,oBACA,yBACA,uBACA,wBACA,oBACA,qBACA,uBACA,sBACA,mBACA,WACA,SACA,YACA,SACA,cACA,UACA,aACA,eACA,SACA,SACA,aACA,SACA,iBACA,kBACA,sBACA,SACA,SACA,UACA,WACA,eACA,aACA,eACA,cACA,cACA,cACA,QACA,YACA,cACA,aACA,aACA,aACA,WACA,YACA,YACA,aACA,gBACA,kBACA,iBACA,iBACA,iBACA,cACA,UACA,iBACA,SACA,WACA,WACA,SACA,YACA,iBACA,kBACA,wBACA,SACA,KACA,iBACA,gBACA,2BACA,gBACA,oBACA,sBACA,gBACA,aACA,iBACA,YACA,iBACA,aACA,WACA,eACA,UACA,mBACA,UACA,cACA,gBACA,UACA,SACA,YACA,cACA,eACA,iBACA,WACA,WACA,OACA,YACA,gBACA,mBACA,aACA,mBACA,oBACA,kBACA,oBACA,aACA,cACA,gBACA,2BACA,aACA,kBACA,iBACA,iBACA,kBACA,eACA,WACA,uBACA,SACA,yBACA,gBACA,iCACA,6BACA,iCACA,8BACA,4CACA,8BACA,qBACA,YACA,WACA,eACA,oBACA,sBACA,YACA,oBACA,YACA,WACA,mBACA,UACA,UACA,cACA,kBACA,aACA,qBACA,uBACA,gBACA,eACA,eACA,sBACA,iBACA,iBACA,kBACA,wBACA,+BACA,uBACA,4BACA,8BACA,0BACA,yBACA,0BACA,2BACA,yBACA,4BACA,wBACA,0BACA,0BACA,yBACA,4BACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,gBACA,aACA,aACA,eACA,mBACA,kBACA,YACA,cACA,WACA,mBACA,oBACA,oBACA,oBACA,WACA,gBACA,mBACA,oBACA,eACA,uBACA,6BACA,qBACA,eACA,eACA,sBACA,iBACA,iBACA,eACA,cACA,WACA,iBACA,gBACA,gBACA,gBACA,sBACA,cACA,WACA,cACA,aACA,eACA,gBACA,eACA,gBACA,qBACA,iBACA,eACA,WACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,aACA,aACA,aACA,aACA,aACA,aACA,aACA,YACA,YACA,YACA,YACA,YACA,YACA,eACA,eACA,WACA,sBACA,WACA,gBACA,eACA,cACA,cACA,mBACA,cACA,sBACA,WACA,gBACA,WACA,eACA,WACA,cACA,eACA,WACA,cACA,kBACA,mBACA,WACA,cACA,oBACA,kBACA,WACA,oBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,iBACA,kBACA,WACA,eACA,iBACA,eACA,eACA,eACA,eACA,eACA,eACA,eACA,mBACA,mBACA,oBACA,kBACA,sBACA,4BACA,oBACA,WACA,aACA,kBACA,gBACA,mBACA,iBACA,eACA,iBACA,gBACA,cACA,cACA,cACA,eACA,qBACA,oBACA,oBACA,WACA,uBACA,eACA,WACA,cACA,gBACA,eACA,WACA,qBACA,gBACA,mBACA,mBACA,eACA,eACA,eACA,eACA,kBACA,WACA,aACA,eACA,WACA,oBACA,cACA,iBACA,YACA,WACA,qBACA,qBACA,mBACA,WACA,aACA,gBACA,oBACA,uBACA,sBACA,sBACA,sBACA,yBACA,uBACA,sBACA,uBACA,sBACA,wBACA,0BACA,yBACA,4BACA,yBACA,4BACA,sBACA,qBACA,qBACA,qBACA,uBACA,wBACA,WACA,6BACA,iCACA,kCACA,kCACA,8BACA,mCACA,4BACA,2BACA,2BACA,4BACA,2BACA,2BACA,mCACA,kCACA,6BACA,6BACA,6BACA,2BACA,qBACA,qBACA,6BACA,wBACA,qBACA,0BACA,qBACA,kCACA,2BACA,yBACA,mBACA,sBACA,0BACA,gCACA,qBACA,oBACA,4BACA,wBACA,0BACA,oBACA,sBACA,sBACA,yBACA,0BACA,wBACA,wBACA,2BACA,8BACA,qBACA,mBACA,sBACA,0BACA,wBACA,0BACA,0BACA,wBACA,oCACA,kCACA,iCACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,wBACA,yBACA,yBACA,yBACA,yBACA,yBACA,yBACA,2BACA,wBACA,qBACA,6BACA,uBACA,wBACA,qBACA,wBACA,wBACA,0BACA,oCACA,kCACA,sBACA,4BACA,yBACA,oBACA,qBACA,4BACA,qBACA,yBACA,uBACA,sBACA,sBACA,yBACA,2BACA,0BACA,oBACA,wBACA,uBACA,sBACA,4BACA,6BACA,0BACA,+BACA,4BACA,4BACA,qBACA,6BACA,6BACA,4BACA,0BACA,uBACA,qBACA,qBACA,sBACA,6BACA,wBACA,sBACA,qBACA,yBACA,wBACA,wBACA,0BACA,yBACA,qBACA,sBACA,yBACA,2BACA,uBACA,wBACA,wBACA,wBACA,oBACA,4BACA,sBACA,qBACA,wBACA,wBACA,6BACA,qBACA,qBACA,oBACA,qBACA,uBACA,wBACA,yBACA,WACA,WACA,cACA,OACA,YACA,cACA,WACA,YACA,YACA,eACA,cACA,eACA,mBACA,uBACA,WACA,OACA,iBACA,YACA,sBACA,4BACA,mBACA,oBACA,yBACA,uBACA,gBACA,2BACA,WACA,mBACA,eACA,YACA,yBACA,IACA,uBACA,+BACA,eACA,QACA,eACA,QACA,aACA,eACA,cACA,wBACA,UACA,QACA,aACA,QACA,uBACA,UACA,eACA,SACA,kBACA,QACA,aACA,YACA,QACA,iBACA,cACA,cACA,WACA,UACA,UACA,gBACA,mBACA,gBACA,cACA,iBACA,0BACA,QACA,aACA,aACA,aACA,aACA,aACA,aACA,QACA,iBACA,2BACA,kBACA,sCACA,cACA,qCACA,qCACA,+CACA,uCACA,sBACA,uBACA,oCACA,oCACA,4CACA,0BACA,QACA,iBACA,aACA,WACA,wBACA,gBACA,OACA,YACA,OACA,YACA,WACA,aACA,aACA,eACA,eACA,aACA,WACA,WACA,WACA,uBACA,SACA,UACA,aACA,WACA,UACA,gBACA,eACA,eACA,oBACA,mBACA,mBACA,gBACA,eACA,mBACA,SACA,wBACA,WACA,YACA,aACA,WACA,aACA,kBACA,OACA,oBACA,oBACA,oBACA,kBACA,mBACA,gBACA,kBACA,sBACA,wBACA,kBACA,oBACA,oBACA,iBACA,qBACA,qBACA,mBACA,kBACA,sBACA,qBACA,oBACA,uBACA,iBACA,eACA,cACA,mBACA,sBACA,kBACA,6BACA,kBACA,mBACA,sBACA,gBACA,kBACA,qBACA,kBACA,oBACA,mBACA,mBACA,qBACA,oBACA,gBACA,mBACA,oBACA,kBACA,iBACA,qBACA,mBACA,kBACA,sBACA,kBACA,mBACA,iBACA,mBACA,oBACA,sBACA,oBACA,wBACA,oBACA,uBACA,mBACA,qBACA,iBACA,sBACA,2BACA,mBACA,oBACA,oBACA,oBACA,oBACA,kBACA,mBACA,0BACA,uBACA,sBACA,mBACA,sBACA,0BACA,sBACA,sBACA,kBACA,mBACA,mBACA,mBACA,qBACA,mBACA,kBACA,UACA,UACA,eACA,aACA,gBACA,gBACA,aACA,gBACA,cACA,YACA,qBACA,cACA,uBACA,aACA,gBACA,iBACA,WACA,cACA,iBACA,iBACA,mBACA,aACA,iBACA,wBACA,OACA,mCACA,iCACA,cACA,OACA,YACA,iBACA,MACA,WACA,WACA,WACA,sBACA,qBACA,wBACA,eACA,yBACA,gCACA,2BACA,wBACA,oBACA,oBACA,gBACA,mBACA,SACA,eACA,QACA,cACA,YACA,WACA,aACA,qBACA,iBACA,aACA,aACA,YACA,SACA,gBACA,OACA,4BACA,WACA,OACA,OACA,UACA,iBACA,gBACA,WACA,QACA,WACA,gBACA,uBACA,gCACA,uBACA,SACA,OACA,SACA,kBACA,uBACA,wBACA,QACA,YACA,aACA,aACA,cACA,OACA,OACA,MACA,SACA,UACA,SACA,QACA,UACA,WACA,YACA,UACA,cACA,iBACA,YACA,kBACA,mBACA,WACA,mCACA,4BACA,+BACA,wBACA,mBACA,0BACA,iCACA,mBACA,YACA,sBACA,qBACA,iCACA,6BACA,oBACA,oBACA,mBACA,sBACA,oBACA,8BACA,sBACA,sBACA,8BACA,sBACA,uBACA,uBACA,aACA,eACA,aACA,YACA,mBACA,YACA,kBACA,oBACA,mBACA,eACA,YACA,YACA,YACA,WACA,YACA,UACA,qBACA,oBACA,oBACA,oBACA,sBACA,mBACA,iBACA,mBACA,qBACA,uBACA,wBACA,qBACA,yBACA,sBACA,uBACA,qBACA,uBACA,2CACA,kCACA,qCACA,iCACA,gCACA,8BACA,2BACA,6BACA,+BACA,kCACA,kCACA,iCACA,gCACA,kCACA,kCACA,gCACA,yBACA,yBACA,yBACA,iCACA,yBACA,0BACA,0BACA,MACA,OACA,kBACA,eACA,8BACA,sBACA,aACA,gBACA,gBACA,uBACA,sBACA,kBACA,oBACA,uBACA,YACA,YACA,iBACA,sBACA,gBACA,cACA,cACA,kCACA,6BACA,mBACA,mBACA,wBACA,iBACA,eACA,cACA,UACA,WACA,gBACA,aACA,mBACA,eACA,oBACA,wBACA,uBACA,uBACA,6BACA,mBACA,wBACA,6BACA,gBACA,wBACA,aACA,wBACA,eACA,oBACA,oBACA,oBACA,iBACA,sBACA,uBACA,iBACA,sBACA,sBACA,sBACA,qBACA,cACA,kBACA,aACA,qBACA,eACA,aACA,eACA,qBACA,sBACA,iBACA,gBACA,eACA,gBACA,qBACA,qBACA,qBACA,iBACA,aACA,wBACA,eACA,yBACA,0BACA,0BACA,aACA,iBACA,eACA,iBACA,cACA,gBACA,yBACA,sBACA,YACA,mBACA,6BACA,8BACA,0BACA,2BACA,gBACA,kBACA,iBACA,uBACA,kBACA,mBACA,cACA,gBACA,iBACA,aACA,mBACA,yBACA,wBACA,yBACA,oBACA,eACA,qBACA,oBACA,gBACA,qBACA,wBACA,wBACA,8BACA,eACA,eACA,gBACA,gBACA,oBACA,kBACA,gBACA,mBACA,iBACA,gBACA,iBACA,UACA,wBACA,yBACA,oBACA,gBACA,cACA,eACA,iBACA,kBACA,oBACA,QACA,MACA,OACA,oBACA,SACA,aACA,cACA,wBACA,cACA,OACA,oBACA,gBACA,QACA,WACA,kBACA,gBACA,mBACA,oBACA,sBACA,SACA,WACA,8BACA,cACA,iCACA,MACA,eACA,YACA,cACA,qBACA,OACA,aACA,eACA,WACA,WACA,eACA,mBACA,SACA,eACA,WACA,MACA,2BACA,2BACA,sBACA,sBACA,sBACA,sBACA,OACA,SACA,UACA,6BACA,6BACA,gBACA,SACA,8BACA,sBACA,sBACA,SACA,iBACA,gBACA,iBACA,YACA,YACA,kBACA,kBACA,oBACA,4BACA,4BACA,mCACA,mCACA,gCACA,gCACA,uCACA,uCACA,qBACA,gCACA,gCACA,qBACA,8BACA,8BACA,qBACA,qBACA,kBACA,kBACA,UACA,oBACA,aACA,KACA,gBACA,SACA,wBACA,sBACA,uBACA,uBACA,oBACA,OACA,oBACA,8BACA,kBACA,sBACA,eACA,mBACA,aACA,SACA,cACA,mBACA,kBACA,qBACA,wBACA,4BACA,oBACA,eACA,SACA,cACA,gBACA,oBACA,wBACA,gBACA,UACA,mBACA,QACA,cACA,mBACA,IACA,YACA,qBACA,iBACA,YACA,gBACA,aACA,WACA,UACA,eACA,0BACA,uBACA,yBACA,0BACA,0BACA,sBACA,+BACA,wBACA,4BACA,qBACA,WACA,yCACA,wBACA,8BACA,yCACA,8BACA,2BACA,SACA,UACA,MACA,SACA,UACA,OACA,QACA,WACA,qBACA,4BACA,sBACA,kBACA,4BACA,iBACA,eACA,wBACA,iBACA,gBACA,QACA,aACA,iBACA,mBACA,OACA,iBACA,SACA,UACA,WACA,aACA,eACA,UACA,2BACA,iBACA,kBACA,yBACA,wBACA,WACA,kBACA,cACA,eACA,mBACA,iBACA,aACA,YACA,eACA,eACA,SACA,gBACA,iBACA,uBACA,mBACA,kBACA,cACA,2BACA,aACA,QACA,UACA,WACA,iBACA,qBACA,eACA,gBACA,yBACA,qBACA,eACA,cACA,wBACA,gBACA,8BACA,YACA,OACA,aACA,eACA,UACA,QACA,SACA,YACA,qBACA,YACA,eACA,iBACA,cACA,qBACA,oBACA,oBACA,+BACA,+BACA,mBACA,0BACA,yBACA,eACA,qBACA,sBACA,eACA,eACA,gBACA,iBACA,0BACA,0BACA,cACA,eACA,qBACA,oBACA,cACA,cACA,aACA,gBACA,gBACA,cACA,wBACA,qBACA,yBACA,WACA,yBACA,oBACA,0BACA,6BACA,mBACA,qBACA,yBACA,qBACA,oBACA,wBACA,oBACA,wBACA,iCACA,kBACA,oBACA,2BACA,sBACA,mBACA,qBACA,WACA,sCACA,mBACA,iBACA,iBACA,oBACA,cACA,aACA,qBACA,yBACA,oBACA,eACA,oBACA,0BACA,gCACA,wBACA,6BACA,8BACA,8BACA,2BACA,yBACA,oBACA,oBACA,oBACA,oBACA,oBACA,2BACA,oBACA,oBACA,wBACA,yBACA,qBACA,yBACA,+BACA,wBACA,mBACA,yBACA,mBACA,iBACA,qBACA,2BACA,yBACA,wBACA,wBACA,0BACA,cACA,qBACA,kBACA,qBACA,qBACA,qBACA,kBACA,kBACA,YACA,gBACA,iBACA,2BACA,kBACA,mBACA,iBACA,YACA,qBACA,yBACA,YACA,gBACA,WACA,iBACA,aACA,mBACA,mBACA,sBACA,4BACA,4BACA,kCACA,kCACA,gCACA,gCACA,sCACA,sCACA,sBACA,gCACA,gCACA,sBACA,8BACA,8BACA,iBACA,sBACA,sBACA,oBACA,WACA,eACA,oBACA,qBACA,yBACA,2BACA,UACA,iBACA,qBACA,gBACA,mBACA,gBACA,iBACA,gBACA,kBACA,mBACA,mBACA,iBACA,kBACA,wBACA,iBACA,qBACA,4BACA,kBACA,eACA,mBACA,eACA,gBACA,kBACA,iBACA,cACA,gBACA,eACA,oBACA,qBACA,oBACA,wBACA,4BACA,gBACA,gBACA,gBACA,gBACA,sBACA,6BACA,yBACA,kCACA,wBACA,yBACA,oBACA,uBACA,oBACA,yBACA,8BACA,+BACA,0BACA,8BACA,6BACA,8BACA,uBACA,2BACA,8BACA,4BACA,0BACA,2BACA,8BACA,0BACA,8BACA,2BACA,mCACA,0CACA,gCACA,kCACA,iCACA,wCACA,qCACA,wCACA,sCACA,qCACA,uCACA,sCACA,gCACA,8BACA,+BACA,gCACA,mCACA,+BACA,wBACA,oBACA,qBACA,qBACA,oBACA,oBACA,wBACA,oBACA,4BACA,oBACA,oBACA,yBACA,8BACA,0BACA,iCACA,0BACA,yBACA,4BACA,qBACA,yBACA,4BACA,uBACA,wBACA,0BACA,iCACA,gCACA,kCACA,6BACA,qBACA,yBACA,kCACA,wBACA,oBACA,iCACA,yBACA,6BACA,sCACA,+BACA,kCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,uBACA,2BACA,0BACA,2BACA,0BACA,wBACA,yBACA,uBACA,uBACA,sBACA,sBACA,sBACA,0BACA,wBACA,mCACA,iCACA,8BACA,kCACA,wBACA,+BACA,qBACA,yBACA,yBACA,yBACA,aACA,aACA,SACA,oBACA,SACA,sBACA,kBACA,+BACA,YACA,gBACA,yBACA,4BACA,qBACA,MACA,aACA,eACA,qBACA,uBACA,2BACA,gBACA,UACA,eACA,SACA,aACA,iBACA,eACA,SACA,cACA,YACA,4BACA,8BACA,8BACA,4BACA,6BACA,+BACA,UACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,WACA,WACA,WACA,WACA,WACA,WACA,aACA,qBACA,2BACA,mBACA,8BACA,8BACA,8BACA,8BACA,8BACA,8BACA,qBACA,6BACA,qBACA,iBACA,iBACA,YACA,UACA,cACA,gBACA,2BACA,WACA,YACA,eACA,iBACA,oBACA,WACA,oBACA,gBACA,cACA,gBACA,OACA,cACA,cACA,YACA,cACA,YACA,eACA,mBACA,gBACA,YACA,aACA,QACA,aACA,YACA,aACA,kBACA,aACA,YACA,UACA,WACA,cACA,eACA,0BACA,wBACA,+BACA,+BACA,mBACA,qCACA,sBACA,iCACA,oBACA,SACA,gBACA,eACA,iBACA,yBACA,yBACA,uBACA,6BACA,cACA,WACA,MACA,kBACA,eACA,mBACA,MACA,cACA,cACA,aACA,oBACA,qBACA,+BACA,qBACA,kBACA,iBACA,iBACA,SACA,UACA,iBACA,cACA,qCACA,oCACA,8BACA,iCACA,8BACA,2BACA,6BACA,2BACA,gBACA,WACA,gBACA,UACA,WACA,gBACA,SACA,YACA,gBACA,mBACA,qBACA,wBACA,uBACA,qBACA,qBACA,iBACA,UACA,UACA,kBACA,cACA,oBACA,mBACA,eACA,oBACA,wBACA,cACA,6BACA,eACA,uBACA,mBACA,uBACA,oBACA,sBACA,uBACA,wBACA,yBACA,kBACA,sBACA,0BACA,gBACA,gBACA,sBACA,6BACA,wBACA,kBACA,oBACA,yBACA,kBACA,wCACA,cACA,mBACA,qBACA,yBACA,wBACA,YACA,aACA,SACA,SACA,cACA,iBACA,4BACA,0BACA,8BACA,uBACA,gBACA,qCACA,iBACA,iBACA,kBACA,kBACA,cACA,gBACA,OACA,SACA,SACA,mBACA,mBACA,mBACA,mBACA,UACA,YACA,gBACA,IACA,QACA,OACA,QACA,MACA,WACA,eACA,+BACA,cACA,SACA,gBACA,aACA,YACA,iBACA,WACA,OACA,QACA,SACA,YACA,SACA,aACA,gBACA,sBACA,oBACA,gBACA,MACA,cACA,eACA,eACA,SACA,aACA,mBACA,YACA,gBACA,aACA,kBACA,YACA,cACA,WACA,cACA,UACA,aACA,WACA,YACA,UACA,kBACA,kBACA,YACA,eACA,WACA,sBACA,aACA,iBACA,kBACA,SACA,YACA,MACA,UACA,QACA,YACA,QACA,gBACA,cACA,aACA,eACA,aACA,YACA,oBACA,aACA,MACA,kBACA,oBACA,QACA,MACA,cACA,UACA,SACA,UACA,WACA,mBACA,YACA,kBACA,SACA,aACA,eACA,UACA,QACA,UACA,UACA,uBACA,gCACA,sBACA,iBACA,YACA,kBACA,sBACA,qBACA,sBACA,4BACA,iBACA,uBACA,4BACA,iBACA,qBACA,oBACA,oBACA,0BACA,gBACA,qBACA,qBACA,0BACA,mBACA,cACA,MACA,cACA,kBACA,UACA,mBACA,aACA,SACA,eACA,cACA,aACA,aACA,eACA,cACA,aACA,eACA,kBACA,oBACA,UACA,mBACA,QACA,eACA,MACA,QACA,UACA,QACA,YACA,cACA,OACA,QACA,SACA,SACA,QACA,QACA,OACA,QACA,QACA,OACA,cACA,eACA,cACA,SACA,aACA,WACA,gBACA,qBACA,aACA,cACA,gBACA,aACA,iBACA,eACA,cACA,YACA,WACA,cACA,YACA,WACA,aACA,eACA,YACA,WACA,OACA,OACA,UACA,IACA,OACA,sBACA,qBACA,aACA,wBACA,wBACA,kBACA,mBACA,mBACA,oBACA,sBACA,oBACA,kBACA,uBACA,sBACA,iBACA,kBACA,kBACA,mBACA,qBACA,sBACA,sBACA,mBACA,iBACA,WACA,UACA,iBACA,iBACA,WACA,aACA,UACA,UACA,gBACA,UACA,OACA,eACA,iBACA,YACA,WACA,iBACA,eACA,eACA,OACA,gBACA,UACA,eACA,OACA,MACA,aACA,OACA,qBACA,aACA,kBACA,mBACA,cACA,aACA,gBACA,wBACA,YACA,oBACA,QACA,OACA,iBACA,OACA,OACA,OACA,WACA,OACA,YACA,eACA,SACA,gBACA,sBACA,4BACA,6BACA,sBACA,sBACA,kBACA,eACA,eACA,sBACA,sBACA,qBACA,sBACA,qBACA,cACA,oBACA,oBACA,oBACA,gBACA,eACA,qBACA,qBACA,qBACA,iBACA,eACA,aACA,mBACA,yBACA,0BACA,mBACA,mBACA,eACA,eACA,oBACA,yBACA,0BACA,oBACA,oBACA,iBACA,cACA,kBACA,mBACA,cACA,oBACA,oBACA,mBACA,oBACA,mBACA,aACA,kBACA,kBACA,kBACA,eACA,cACA,mBACA,mBACA,mBACA,gBACA,cACA,YACA,iBACA,sBACA,uBACA,iBACA,iBACA,cACA,SACA,eACA,QACA,gBACA,qBACA,iBACA,eACA,cACA,gBACA,SACA,uBACA,aACA,aACA,qBACA,YACA,YACA,aACA,cACA,cACA,kBACA,OACA,UACA,SACA,aACA,cACA,aACA,gBACA,WACA,iBACA,UACA,cACA,SACA,WACA,UACA,aACA,aACA,IACA,OACA,SACA,iBACA,eACA,cACA,kBACA,cACA,cACA,SACA,uBACA,eACA,wBACA,aACA,YACA,SACA,UACA,eACA,cACA,gBACA,oBACA,yBACA,sBACA,OACA,QACA,WACA,OACA,KACA,OACA,YACA,cACA,cACA,QACA,KACA,QACA,QACA,YACA,iBACA,UACA,eACA,mBACA,wBACA,OACA,SACA,WACA,aACA,YACA,eACA,WACA,eACA,UACA,iBACA,yBACA,oBACA,gBACA,UACA,oBACA,aACA,WACA,SACA,aACA,OACA,YACA,YACA,UACA,QACA,kBACA,aACA,YACA,aACA,iBACA,gBACA,aACA,gBACA,kBACA,YACA,uBACA,cACA,eACA,eACA,aACA,QACA,aACA,eACA,oBACA,aACA,aACA,cACA,YACA,cACA,UACA,UACA,OACA,YACA,YACA,aACA,WACA,WACA,gBACA,YACA,WACA,UACA,gBACA,QACA,gBACA,YACA,aACA,QACA,YACA,SACA,UACA,MACA,QACA,MACA,OACA,WACA,cACA,WACA,UACA,WACA,gBACA,kBACA,YACA,UACA,QACA,QACA,sBACA,8BACA,aACA,qBACA,4BACA,YACA,YACA,OACA,cACA,aACA,YACA,eACA,aACA,kBACA,kBACA,kBACA,aACA,cACA,UACA,UACA,oBACA,0BACA,UACA,wBACA,0BACA,mBACA,cACA,eACA,aACA,aACA,UACA,gBACA,WACA,qBACA,uBACA,yBACA,uBACA,0BACA,SACA,gBACA,iBACA,iBACA,gBACA,UACA,qBACA,uCACA,kCACA,UACA,aACA,eACA,YACA,aACA,kBACA,UACA,cACA,qBACA,cACA,YACA,WACA,eACA,UACA,kBACA,kBACA,kBACA,oBACA,mBACA,cACA,gBACA,UACA,cACA,cACA,WACA,aACA,UACA,aACA,WACA,0BACA,SACA,gBACA,SACA,kBACA,iBACA,oBACA,gBACA,aACA,uBACA,0BACA,MACA,OACA,QACA,oBACA,gBACA,mBACA,eACA,WACA,kBACA,SACA,iBACA,eACA,kBACA,oBACA,qBACA,eACA,qBACA,qBACA,sBACA,gBACA,sBACA,wBACA,gBACA,2BACA,qBACA,kBACA,mBACA,oBACA,cACA,kBACA,iBACA,yBACA,qBACA,2BACA,gBACA,kBACA,wBACA,cACA,oBACA,mBACA,oBACA,iBACA,aACA,iBACA,qBACA,oBACA,kBACA,cACA,uBACA,uBACA,2BACA,kBACA,+BACA,0BACA,oBACA,mBACA,qBACA,qBACA,oBACA,kBACA,cACA,mBACA,eACA,gBACA,qBACA,cACA,8BACA,gBACA,uBACA,cACA,wBACA,qBACA,iBACA,kBACA,kBACA,kBACA,yBACA,yBACA,4BACA,kCACA,kCACA,wCACA,wCACA,sCACA,sCACA,4CACA,4CACA,4BACA,sCACA,sCACA,4BACA,oCACA,oCACA,4BACA,4BACA,iBACA,gBACA,qBACA,+BACA,wBACA,gBACA,eACA,mBACA,qBACA,mBACA,cACA,cACA,cACA,iBACA,kBACA,gBACA,cACA,kBACA,mBACA,mBACA,eACA,cACA,SACA,MACA,WACA,WACA,UACA,eACA,UACA,WACA,OACA,WACA,cACA,cACA,eACA,gBACA,aACA,eACA,eACA,gBACA,cACA,mBACA,cACA,SACA,QACA,cACA,KACA,KACA,IACA,OACA,UACA,eACA,eACA,UACA,eACA,WACA,UACA,WACA,KACA,QACA,kBACA,UACA,SACA,kBACA,eACA,YACA,qBACA,UACA,UACA,iBACA,iBACA,eACA,sBACA,mBACA,kBACA,gBACA,aACA,eACA,cACA,gBACA,QACA,sBACA,sBACA,mBACA,iBACA,YACA,SACA,eACA,gBACA,aACA,iBACA,aACA,iBACA,oBACA,qBACA,cACA,eACA,oBACA,gBACA,qBACA,YACA,aACA,eACA,cACA,cACA,gBACA,uBACA,WACA,eACA,iBACA,oBACA,QACA,YACA,SACA,SACA,SACA,YACA,YACA,aACA,aACA,YACA,cACA,cACA,aACA,cACA,iBACA,SACA,cACA,eACA,SACA,SACA,mBACA,aACA,aACA,kBACA,SACA,aACA,MACA,UACA,YACA,SACA,UACA,2BACA,WACA,kBACA,aACA,gBACA,UACA,gBACA,UACA,SACA,WACA,WACA,aACA,WACA,UACA,WACA,kBACA,eACA,cACA,UACA,oBACA,cACA,cACA,cACA,2BACA,6BACA,iBACA,aACA,SACA,kBACA,oBACA,oBACA,mBACA,OACA,gBACA,WACA,WACA,YACA,aACA,2BACA,sBACA,eACA,6BACA,oBACA,YACA,oBACA,sBACA,sBACA,qBACA,aACA,qBACA,WACA,OACA,YACA,WACA,SACA,QACA,KACA,KACA,SACA,IACA,WACA,gBACA,cACA,mBACA,WACA,YACA,UACA,QACA,SACA,QACA,cACA,aACA,SACA,mBACA,0BACA,0BACA,UACA,gBACA,SACA,YACA,qBACA,WACA,UACA,UACA,MACA,eACA,aACA,eACA,cACA,YACA,UACA,QACA,WACA,WACA,UACA,YACA,YACA,oBACA,QACA,YACA,SACA,OACA,WACA,QACA,aACA,QACA,YACA,OACA,cACA,sBACA,aACA,iBACA,kBACA,MACA,SACA,yBACA,UACA,YACA,aACA,yBACA,QACA,WACA,+BACA,YACA,SACA,aACA,aACA,eACA,WACA,4BACA,kBACA,cACA,IACA,OACA,eACA,WACA,aACA,0BACA,WACA,QACA,QACA,aACA,UACA,UACA,kBACA,aACA,mBACA,WACA,WACA,kBACA,WACA,QACA,OACA,eACA,YACA,cACA,WACA,WACA,YACA,WACA,SACA,aACA,aACA,cACA,UACA,UACA,OACA,YACA,WACA,WACA,SACA,YACA,aACA,oBACA,YACA,QACA,OACA,aACA,iBACA,YACA,YACA,cACA,YACA,YACA,gBACA,WACA,WACA,aACA,WACA,QACA,QACA,QACA,cACA,gBACA,aACA,eACA,QACA,QACA,QACA,YACA,cACA,OACA,cACA,wBACA,eACA,yBACA,YACA,mBACA,eACA,aACA,iBACA,eACA,0BACA,oBACA,0BACA,yBACA,uBACA,wBACA,cACA,aACA,sBACA,cACA,uBACA,WACA,iBACA,uBACA,cACA,YACA,gBACA,cACA,wBACA,kBACA,uBACA,uBACA,qBACA,sBACA,aACA,YACA,QACA,WACA,MACA,UACA,cACA,OACA,aACA,cACA,aACA,iBACA,aACA,SACA,QACA,UACA,KACA,QACA,cACA,eACA,eACA,0BACA,uBACA,SACA,YACA,SACA,YACA,oBACA,OACA,eACA,gBACA,cACA,YACA,SACA,aACA,oBACA,oBACA,KACA,KACA,OACA,UACA,QACA,iBACA,cACA,iBACA,kBACA,cACA,gBACA,MACA,kBACA,mBACA,kBACA,SACA,wBACA,YACA,cACA,qBACA,oBACA,eACA,iBACA,mBACA,qBACA,iBACA,UACA,aACA,UACA,cACA,wBACA,qBACA,uBACA,wBACA,sBACA,SACA,+BACA,iBACA,uBACA,gBACA,iBACA,6BACA,mBACA,wBACA,mBACA,aACA,uBACA,kBACA,eACA,aACA,qBACA,iBACA,UACA,mBACA,UACA,SACA,0BACA,gCACA,sBACA,cACA,iBACA,yBACA,oBACA,uBACA,yBACA,mBACA,uBACA,aACA,mBACA,mBACA,WACA,eACA,kBACA,aACA,UACA,aACA,aACA,wBACA,yBACA,gBACA,oCACA,uBACA,cACA,cACA,WACA,eACA,WACA,WACA,UACA,sBACA,UACA,WACA,SACA,cACA,kBACA,WACA,qBACA,cACA,cACA,kBACA,aACA,mBACA,WACA,eACA,iBACA,cACA,mBACA,mCACA,mBACA,2BACA,sBACA,wBACA,eACA,qBACA,mBACA,gBACA,uBACA,2BACA,oBACA,oBACA,sBACA,sBACA,sBACA,uBACA,mBACA,iBACA,mBACA,kBACA,aACA,eACA,eACA,kBACA,mBACA,2BACA,oBACA,UACA,oBACA,iBACA,eACA,aACA,eACA,aACA,mBACA,qBACA,2BACA,kBACA,oBACA,eACA,aACA,2BACA,yBACA,eACA,WACA,oBACA,gBACA,iBACA,qBACA,kBACA,yBACA,kBACA,UACA,oBACA,iBACA,eACA,YACA,wBACA,aACA,YACA,iBACA,cACA,qBACA,gBACA,cACA,gBACA,YACA,YACA,WACA,aACA,qBACA,eACA,YACA,aACA,mBACA,kBACA,wBACA,0BACA,iBACA,mBACA,UACA,YACA,SACA,cACA,2BACA,6BACA,2BACA,WACA,KACA,oBACA,gBACA,WACA,QACA,QACA,iBACA,WACA,sBACA,MACA,eACA,iBACA,gBACA,gBACA,iBACA,eACA,aACA,WACA,YACA,iBACA,OACA,OACA,UACA,UACA,SACA,SACA,OACA,YACA,OACA,OACA,UACA,kBACA,kBACA,qBACA,OACA,WACA,OACA,WACA,SACA,wBACA,UACA,WACA,YACA,cACA,QACA,QACA,qBACA,oBACA,OACA,KACA,aACA,WACA,YACA,aACA,oBACA,kBACA,mBACA,iBACA,SACA,WACA,UACA,iBACA,YACA,aACA,mBACA,UACA,OACA,OACA,MACA,MACA,kCACA,UACA,WACA,cACA,gBACA,QACA,aACA,UACA,YACA,sBACA,sBACA,OACA,OACA,qBACA,sBACA,qBACA,iBACA,mBACA,uBACA,kBACA,WACA,wBACA,6BACA,gBACA,iBACA,YACA,iBACA,mBACA,sBACA,eACA,oBACA,0BACA,mBACA,iBACA,uBACA,sBACA,oBACA,mBACA,oBACA,gBACA,0BACA,mBACA,oBACA,oBACA,sBACA,yBACA,mBACA,gBACA,gBACA,iBACA,sBACA,cACA,2BACA,4BACA,uBACA,iBACA,cACA,aACA,gBACA,QACA,YACA,cACA,YACA,aACA,QACA,cACA,gBACA,cACA,wBACA,qBACA,qBACA,eACA,aACA,aACA,mBACA,aACA,YACA,aACA,eACA,YACA,iBACA,iBACA,iBACA,WACA,uBACA,UACA,aACA,KACA,OACA,cACA,UACA,6BACA,WACA,2BACA,SACA,cACA,cACA,oBACA,6BACA,gBACA,qBACA,aACA,YACA,UACA,cACA,eACA,WACA,gBACA,WACA,cACA,OACA,aACA,YACA,QACA,cACA,QACA,SACA,gBACA,gBACA,iBACA,kBACA,kBACA,YACA,YACA,qBACA,8BACA,gBACA,iBACA,gBACA,aACA,WACA,WACA,cACA,aACA,YACA,YACA,kBACA,SACA,YACA,UACA,OACA,SACA,WACA,UACA,YACA,WACA,YACA,cACA,WACA,cACA,WACA,OACA,OACA,kBACA,iBACA,KACA,KACA,KACA,KACA,eACA,oBACA,oBACA,UACA,MACA,UACA,SACA,gBACA,kBACA,cACA,UACA,YACA,UACA,WACA,OACA,UACA,OACA,OACA,QACA,SACA,OACA,WACA,YACA,eACA,YACA,mBACA,cACA,YACA,cACA,YACA,qBACA,kBACA,eACA,mBACA,WACA,YACA,YACA,oBACA,WACA,SACA,SACA,aACA,aACA,iBACA,iBACA,iBACA,iBACA,SACA,OACA,cACA,aACA,SACA,eACA,mBACA,iBACA,gBACA,QACA,iBACA,gBACA,oBACA,OACA,cACA,YACA,YACA,UACA,iBACA,aACA,WACA,aACA,SACA,YACA,0BACA,SACA,OACA,YACA,cACA,QACA,OACA,aACA,mBACA,sBACA,kBACA,YACA,iBACA,oBACA,gBACA,WACA,OACA,eACA,iBACA,YACA,SACA,mBACA,YACA,eACA,SACA,gBACA,WACA,cACA,OACA,aACA,MACA,QACA,QACA,OACA,cACA,cACA,WACA,YACA,qBACA,eACA,OACA,UACA,YACA,UACA,MACA,QACA,aACA,YACA,SACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,WACA,MACA,UACA,SACA,gBACA,cACA,eACA,aACA,eACA,eACA,aACA,cACA,YACA,cACA,OACA,SACA,aACA,aACA,gBACA,eACA,YACA,eACA,YACA,eACA,cACA,cACA,cACA,QACA,OACA,YACA,mBACA,WACA,YACA,QACA,aACA,cACA,UACA,SACA,kBACA,MACA,aACA,YACA,kBACA,kBACA,0BACA,cACA,cACA,YACA,YACA,iBACA,WACA,WACA,UACA,cACA,QACA,oBACA,eACA,eACA,aACA,YACA,YACA,cACA,SACA,UACA,kBACA,UACA,eACA,kBACA,UACA,SACA,WACA,YACA,MACA,aACA,YACA,cACA,YACA,WACA,WACA,aACA,iBACA,eACA,OACA,SACA,QACA,OACA,SACA,UACA,YACA,gBACA,gBACA,iBACA,cACA,WACA,UACA,YACA,SACA,iBACA,oBACA,cACA,SACA,wBACA,UACA,UACA,mBACA,sBACA,qBACA,0BACA,sBACA,iCACA,mBACA,6BACA,iBACA,aACA,cACA,sBACA,sBACA,6BACA,YACA,UACA,gBACA,mBACA,qBACA,cACA,iBACA,gBACA,gBACA,uBACA,uBACA,YACA,gBACA,eACA,eACA,iBACA,kBACA,cACA,aACA,YACA,2BACA,eACA,kBACA,kBACA,iBACA,iBACA,UACA,eACA,WACA,YACA,qBACA,qBACA,eACA,eACA,YACA,iBACA,gBACA,mBACA,kBACA,SACA,wBACA,qBACA,oBACA,cACA,mBACA,qBACA,uBACA,2BACA,YACA,2BACA,uBACA,wBACA,eACA,qBACA,gBACA,eACA,YACA,eACA,eACA,aACA,uBACA,mBACA,qBACA,cACA,mBACA,uBACA,sBACA,sBACA,4BACA,kBACA,uBACA,uBACA,4BACA,uBACA,qBACA,6BACA,YACA,mBACA,gCACA,uBACA,mBACA,UACA,wBACA,sBACA,qBACA,wBACA,wBACA,oBACA,0BACA,wBACA,mBACA,eACA,WACA,eACA,sBACA,qBACA,mBACA,iBACA,aACA,eACA,SACA,cACA,kBACA,aACA,kBACA,iBACA,iBACA,cACA,aACA,iBACA,sBACA,aACA,aACA,aACA,wBACA,sBACA,sBACA,oBACA,qBACA,2BACA,wBACA,eACA,oBACA,mBACA,gBACA,YACA,iBACA,gBACA,aACA,WACA,uBACA,wBACA,wBACA,uBACA,YACA,0BACA,aACA,cACA,sBACA,iBACA,cACA,SACA,cACA,oBACA,6BACA,eACA,oBACA,mBACA,gBACA,kBACA,gBACA,sBACA,mBACA,6BACA,kBACA,mBACA,mBACA,0BACA,0BACA,sBACA,aACA,mBACA,mBACA,gBACA,oBACA,oBACA,oBACA,oBACA,gBACA,sBACA,sBACA,mBACA,gBACA,gBACA,sBACA,iBACA,iBACA,sBACA,0BACA,mBACA,WACA,gBACA,gBACA,gCACA,+BACA,iCACA,gCACA,cACA,oBACA,mBACA,eACA,oBACA,uBACA,uBACA,6BACA,sBACA,gCACA,eACA,oBACA,aACA,eACA,gBACA,sBACA,SACA,WACA,KACA,aACA,oBACA,YACA,WACA,WACA,eACA,cACA,QACA,IACA,OACA,WACA,YACA,iBACA,QACA,eACA,aACA,gBACA,eACA,WACA,aACA,iBACA,kBACA,YACA,OACA,yBACA,WACA,WACA,eACA,WACA,eACA,SACA,WACA,yBACA,aACA,UACA,OACA,qBACA,WACA,WACA,cACA,WACA,SACA,WACA,UACA,aACA,SACA,WACA,WACA,YACA,YACA,wBACA,eACA,YACA,OACA,cACA,UACA,SACA,MACA,aACA,SACA,mBACA,iBACA,gBACA,kBACA,cACA,mBACA,SACA,aACA,kBACA,YACA,iBACA,cACA,mBACA,UACA,KACA,qBACA,SACA,eACA,aACA,aACA,eACA,YACA,cACA,UACA,UACA,KACA,SACA,WACA,aACA,kBACA,SACA,UACA,aACA,WACA,cACA,aACA,eACA,uBACA,gBACA,aACA,iBACA,eACA,iBACA,sBACA,mBACA,eACA,cACA,qBACA,oBACA,gBACA,gBACA,wBACA,iBACA,iBACA,YACA,SACA,WACA,aACA,WACA,WACA,wBACA,wBACA,0BACA,YACA,mBACA,eACA,WACA,mBACA,uBACA,aACA,UACA,UACA,4BACA,aACA,gBACA,kBACA,SACA,cACA,QACA,kBACA,gBACA,mBACA,oBACA,aACA,eACA,gBACA,iBACA,sBACA,oBACA,0BACA,YACA,gBACA,SACA,YACA,cACA,cACA,aACA,cACA,SACA,mBACA,YACA,cACA,QACA,UACA,UACA,UACA,gBACA,SACA,iBACA,WACA,UACA,YACA,aACA,qBACA,oBACA,kBACA,eACA,iBACA,sBACA,eACA,SACA,iBACA,6BACA,aACA,UACA,YACA,YACA,aACA,UACA,mBACA,mBACA,gBACA,SACA,eACA,mBACA,YACA,cACA,gBACA,uBACA,OACA,SACA,YACA,cACA,eACA,eACA,cACA,aACA,cACA,YACA,eACA,SACA,YACA,cACA,wBACA,uBACA,yBACA,yBACA,wBACA,kBACA,uBACA,sBACA,oBACA,uBACA,iBACA,kBACA,mBACA,iBACA,wBACA,mBACA,yBACA,+BACA,cACA,wBACA,oBACA,kBACA,mBACA,mBACA,mBACA,kBACA,iBACA,kBACA,gBACA,kCACA,qBACA,sBACA,YACA,aACA,aACA,YACA,WACA,SACA,sBACA,eACA,aACA,aACA,UACA,UACA,SACA,YACA,sBACA,kBACA,gBACA,iBACA,iBACA,sBACA,qBACA,gBACA,eACA,gBACA,cACA,aACA,aACA,mBACA,eACA,qBACA,iBACA,gBACA,UACA,WACA,cACA,gBACA,6BACA,WACA,WACA,aACA,YACA,eACA,iBACA,WACA,WACA,WACA,YACA,WACA,oBACA,gBACA,SACA,yBACA,aACA,eACA,cACA,gBACA,YACA,UACA,gBACA,SACA,YACA,kBACA,WACA,YACA,YACA,cACA,YACA,eACA,WACA,gBACA,aACA,cACA,eACA,kBACA,WACA,gBACA,kBACA,kBACA,kBACA,kBACA,iBACA,YACA,YACA,uBACA,6BACA,yBACA,iDACA,2BACA,0BACA,mBACA,mBACA,qBACA,kBACA,4BACA,4CACA,4BACA,2BACA,mCACA,wBACA,UACA,SACA,UACA,OACA,aACA,eACA,gBACA,SACA,QACA,gBACA,WACA,MACA,UACA,UACA,QACA,SACA,SACA,UACA,MACA,SACA,cACA,aACA,cACA,SACA,iBACA,UACA,QACA,YACA,cACA,YACA,aACA,UACA,gBACA,iBACA,gBACA,gBACA,eACA,gBACA,eACA,eACA,eACA,WACA,aACA,aACA,YACA,YACA,mBACA,aACA,gBACA,eACA,YACA,YACA,kBACA,gBACA,KACA,KACA,KACA,KACA,MACA,UACA,iBACA,eACA,gBACA,cACA,gBACA,cACA,eACA,aACA,OACA,mBACA,oBACA,oBACA,iBACA,kBACA,kBACA,YACA,QACA,cACA,QACA,cACA,QACA,cACA,aACA,gBACA,YACA,UACA,eACA,SACA,gBACA,aACA,aACA,mBACA,iBACA,eACA,QACA,aACA,kBACA,WACA,eACA,WACA,YACA,OACA,aACA,cACA,cACA,sBACA,WACA,UACA,sBACA,kBACA,mBACA,eACA,QACA,kBACA,cACA,SACA,UACA,cACA,aACA,YACA,cACA,cACA,qBACA,oBACA,qBACA,oBACA,QACA,OACA,QACA,cACA,aACA,cACA,YACA,aACA,cACA,WACA,yBACA,yBACA,aACA,cACA,WACA,OACA,eACA,gBACA,eACA,SACA,UACA,cACA,QACA,iBACA,6BACA,iBACA,gBACA,YACA,qBACA,cACA,SACA,YACA,YACA,YACA,gBACA,MACA,sBACA,kBACA,iBACA,OACA,QACA,QACA,QACA,YACA,YACA,UACA,WACA,SACA,WACA,WACA,gBACA,YACA,cACA,SACA,MACA,WACA,kBACA,YACA,yBACA,yBACA,SACA,UACA,gBACA,sBACA,4BACA,UACA,WACA,YACA,iBACA,oBACA,yBACA,eACA,eACA,gBACA,kBACA,oBACA,aACA,gBACA,iBACA,aACA,QACA,aACA,0BACA,UACA,oBACA,UACA,aACA,UACA,aACA,WACA,SACA,aACA,uBACA,eACA,WACA,eACA,YACA,cACA,gBACA,WACA,YACA,YACA,OACA,mBACA,YACA,MACA,eACA,mBACA,YACA,sBACA,uBACA,oBACA,wBACA,mBACA,oBACA,gBACA,mBACA,QACA,SACA,IACA,KACA,KACA,OACA,aACA,UACA,UACA,SACA,QACA,aACA,WACA,WACA,cACA,gBACA,cACA,iBACA,OACA,QACA,MACA,OACA,oBACA,qBACA,aACA,gBACA,aACA,WACA,aACA,sBACA,aACA,SACA,SACA,WACA,YACA,eACA,YACA,OACA,MACA,gBACA,cACA,gBACA,SACA,cACA,YACA,cACA,OACA,OACA,gBACA,WACA,UACA,SACA,gBACA,gBACA,WACA,UACA,WACA,yBACA,kBACA,0BACA,SACA,MACA,UACA,cACA,gBACA,UACA,iBACA,gBACA,wBACA,wBACA,WACA,SACA,iBACA,oBACA,SACA,kBACA,kBACA,oBACA,sBACA,iBACA,cACA,YACA,sBACA,eACA,eACA,aACA,iBACA,kBACA,oBACA,aACA,kBACA,iBACA,cACA,eACA,aACA,sCACA,qBACA,eACA,cACA,iBACA,yBACA,iCACA,eACA,sBACA,iBACA,gBACA,SACA,UACA,sBACA,eACA,cACA,YACA,cACA,cACA,eACA,eACA,mBACA,iBACA,wBACA,sBACA,cACA,oBACA,8BACA,oBACA,qBACA,eACA,mBACA,WACA,qBACA,mBACA,QACA,iBACA,SACA,WACA,WACA,UACA,WACA,eACA,cACA,gBACA,eACA,eACA,cACA,cACA,UACA,SACA,aACA,SACA,cACA,MACA,UACA,WACA,YACA,kBACA,WACA,QACA,eACA,cACA,gBACA,OACA,cACA,SACA,kBACA,sBACA,mBACA,uBACA,aACA,WACA,eACA,QACA,WACA,UACA,OACA,YACA,eACA,eACA,QACA,UACA,eACA,KACA,KACA,SACA,iBACA,aACA,UACA,OACA,QACA,UACA,cACA,kBACA,sBACA,YACA,SACA,UACA,QACA,YACA,SACA,SACA,mBACA,gBACA,aACA,2BACA,2BACA,YACA,UACA,UACA,UACA,SACA,kBACA,eACA,iBACA,WACA,gBACA,gBACA,cACA,eACA,iBACA,yBACA,aACA,gBACA,aACA,aACA,WACA,YACA,eACA,cACA,UACA,UACA,wBACA,sBACA,qBACA,2BACA,qBACA,0BACA,uBACA,sBACA,aACA,YACA,MACA,gBACA,SACA,OACA,SACA,YACA,uBACA,eACA,kBACA,wBACA,WACA,OACA,WACA,UACA,SACA,oBACA,aACA,qBACA,cACA,mBACA,kBACA,WACA,gBACA,kBACA,wBACA,wBACA,YACA,qBACA,eACA,iBACA,WACA,eACA,OACA,OACA,eACA,aACA,SACA,gBACA,YACA,oBACA,gBACA,YACA,iBACA,MACA,YACA,WACA,eACA,iBACA,mBACA,qBACA,mBACA,8BACA,aACA,WACA,wBACA,iBACA,oBACA,UACA,UACA,eACA,SACA,cACA,eACA,cACA,eACA,eACA,aACA,aACA,gBACA,cACA,WACA,eACA,WACA,WACA,UACA,cACA,UACA,aACA,cACA,cACA,eACA,sBACA,YACA,iBACA,eACA,kBACA,aACA,gBACA,WACA,eACA,iBACA,2BACA,mBACA,kBACA,iBACA,mCACA,WACA,eACA,kBACA,oBACA,cACA,gBACA,cACA,iBACA,cACA,sBACA,YACA,eACA,uBACA,mBACA,eACA,8BACA,YACA,WACA,aACA,oBACA,uBACA,YACA,WACA,WACA,WACA,gBACA,iBACA,kBACA,iBACA,iBACA,mBACA,kBACA,uBACA,UACA,aACA,eACA,eACA,aACA,iBACA,cACA,qBACA,gBACA,cACA,gBACA,YACA,YACA,WACA,SACA,iBACA,sBACA,cACA,cACA,aACA,UACA,cACA,eACA,MACA,eACA,aACA,cACA,gBACA,gBACA,aACA,QACA,kBACA,iBACA,QACA,QACA,WACA,YACA,OACA,WACA,YACA,kBACA,qBACA,mBACA,UACA,OACA,iBACA,MACA,kBACA,OACA,OACA,gBACA,QACA,QACA,YACA,QACA,YACA,QACA,QACA,QACA,SACA,OACA,wBACA,cACA,eACA,iBACA,OACA,OACA,SACA,eACA,gBACA,cACA,UACA,OACA,UACA,WACA,YACA,mBACA,mBACA,kBACA,QACA,eACA,aACA,SACA,QACA,YACA,eACA,OACA,MACA,aACA,YACA,SACA,SACA,UACA,SACA,QACA,kBACA,aACA,aACA,UACA,QACA,iBACA,WACA,cACA,iBACA,YACA,aACA,QACA,SACA,gBACA,aACA,YACA,gBACA,gBACA,cACA,sBACA,cACA,sBACA,YACA,oBACA,OACA,WACA,eACA,SACA,SACA,cACA,OACA,aACA,eACA,YACA,2BACA,cACA,kBACA,cACA,cACA,gBACA,qCACA,gCACA,aACA,SACA,SACA,cACA,YACA,SACA,mBACA,oBACA,iBACA,kBACA,oBACA,iBACA,eACA,kBACA,mBACA,gBACA,iBACA,mBACA,gBACA,aACA,cACA,aACA,cACA,QACA,aACA,aACA,aACA,iBACA,cACA,MACA,WACA,UACA,SACA,YACA,SACA,YACA,gBACA,SACA,SACA,WACA,UACA,MACA,WACA,eACA,mBACA,UACA,gBACA,YACA,WACA,YACA,UACA,SACA,aACA,WACA,iBACA,aACA,aACA,UACA,QACA,QACA,WACA,QACA,eACA,cACA,cACA,MACA,UACA,SACA,OACA,eACA,cACA,MACA,OACA,SACA,gBACA,gBACA,UACA,UACA,MACA,YACA,OACA,aACA,gBACA,gBACA,gBACA,OACA,aACA,cACA,kBACA,wBACA,uBACA,wBACA,cACA,gBACA,iBACA,cACA,iBACA,YACA,gBACA,aACA,gBACA,eACA,cACA,iBACA,sBACA,sBACA,qBACA,4BACA,qBACA,yBACA,sBACA,0BACA,aACA,cACA,kBACA,cACA,mBACA,aACA,eACA,gBACA,aACA,aACA,gBACA,wBACA,OACA,WACA,YACA,QACA,QACA,OACA,UACA,YACA,UACA,YACA,kBACA,SACA,QACA,UACA,SACA,YACA,eACA,YACA,gBACA,UACA,iBACA,iBACA,cACA,cACA,SACA,qBACA,iBACA,oBACA,iBACA,qBACA,oBACA,cACA,WACA,cACA,QACA,WACA,eACA,WACA,cACA,eACA,cACA,cACA,SACA,yBACA,UACA,UACA,MACA,YACA,QACA,kBACA,mBACA,cACA,UACA,QACA,QACA,cACA,eACA,YACA,mBACA,kBACA,kBACA,iBACA,kBACA,iBACA,sBACA,sBACA,aACA,mBACA,sBACA,sBACA,6BACA,kBACA,qBACA,qBACA,2BACA,YACA,gBACA,eACA,eACA,OACA,WACA,YACA,YACA,QACA,WACA,OACA,aACA,eACA,gBACA,QACA,SACA,YACA,WACA,SACA,eACA,cACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,YACA,aACA,mBACA,mBACA,mBACA,SACA,WACA,eACA,WACA,QACA,iBACA,mBACA,SACA,UACA,YACA,UACA,oBACA,cACA,aACA,2BACA,4BACA,cACA,eACA,UACA,cACA,kBACA,qBACA,UACA,YACA,SACA,iBACA,YACA,iBACA,iBACA,UACA,WACA,SACA,QACA,aACA,YACA,MACA,MACA,MACA,OACA,SACA,iBACA,SACA,aACA,YACA,YACA,eACA,WACA,kBACA,SACA,QACA,QACA,kBACA,oBACA,WACA,QACA,cACA,gBACA,gBACA,wBACA,eACA,UACA,YACA,YACA,SACA,gBACA,eACA,kBACA,oBACA,YACA,YACA,SACA,YACA,SACA,UACA,iBACA,kBACA,iBACA,kBACA,iBACA,kBACA,iBACA,kBACA,2BACA,sBACA,WACA,iBACA,gBACA,mBACA,UACA,cACA,cACA,aACA,OACA,UACA,gBACA,aACA,mBACA,WACA,kBACA,kBACA,kBACA,aACA,kBACA,UACA,aACA,QACA,SACA,OACA,SACA,IACA,OACA,OACA,WACA,QACA,gBACA,YACA,eACA,kBACA,uBACA,2BACA,0BACA,0BACA,gCACA,sBACA,2BACA,gCACA,mBACA,qBACA,8BACA,wBACA,2BACA,mBACA,6BACA,uBACA,wBACA,wBACA,yBACA,2BACA,4BACA,4BACA,yBACA,uBACA,+BACA,oBACA,0BACA,0BACA,yBACA,0BACA,yBACA,iBACA,qBACA,gBACA,wBACA,kBACA,gBACA,kBACA,6BACA,yBACA,yBACA,oCACA,6BACA,8BACA,mCACA,mCACA,yBACA,iCACA,wCACA,oCACA,6BACA,wBACA,wBACA,uBACA,uBACA,wBACA,uCACA,0BACA,0BACA,2BACA,mBACA,yBACA,mBACA,yBACA,yBACA,sBACA,oBACA,uBACA,sBACA,4BACA,qBACA,0BACA,eACA,kBACA,oBACA,yBACA,6BACA,mBACA,iBACA,oBACA,uBACA,mBACA,uBACA,8BACA,kBACA,yBACA,qBACA,aACA,uBACA,wBACA,wBACA,oBACA,sBACA,4BACA,oBACA,yBACA,0BACA,2BACA,oBACA,uBACA,uBACA,0BACA,sBACA,8BACA,0BACA,0BACA,0BACA,2BACA,kCACA,qBACA,oCACA,mBACA,iCACA,cACA,sBACA,0BACA,0BACA,+BACA,+BACA,oBACA,2BACA,yBACA,uBACA,kBACA,wBACA,mBACA,wBACA,2BACA,2BACA,iCACA,YACA,0BACA,mBACA,8BACA,wBACA,sCACA,iBACA,WACA,SACA,aACA,aACA,cACA,cACA,QACA,cACA,aACA,YACA,SACA,QACA,cACA,aACA,eACA,SACA,kBACA,aACA,eACA,YACA,YACA,cACA,WACA,OACA,UACA,QACA,UACA,cACA,IACA,KACA,KACA,mBACA,cACA,gBACA,aACA,UACA,UACA,WACA,IACA,KACA,KACA,mBACA,SACA,IACA,UACA,SACA,OACA,aACA,kBCv3KJ,SAASC,GAAoB5E,EAAK5Y,GAC9B,SAAS3Z,EAAI7a,GACT0D,EAAU8wB,EAAUx0B,GAGxBotC,EAAInnB,KAAK,IAAIS,GAAW,SA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","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    AST_Binary,\n    AST_Conditional,\n    AST_Dot,\n    AST_Sequence,\n    AST_Statement,\n    AST_Sub,\n    AST_UnaryPostfix,\n} from \"./ast.js\";\n\nfunction characters(str) {\n    return str.split(\"\");\n}\n\nfunction member(name, array) {\n    return array.includes(name);\n}\n\nfunction find_if(func, array) {\n    for (var i = 0, n = array.length; i < n; ++i) {\n        if (func(array[i]))\n            return array[i];\n    }\n}\n\nfunction repeat_string(str, i) {\n    if (i <= 0) return \"\";\n    if (i == 1) return str;\n    var d = repeat_string(str, i >> 1);\n    d += d;\n    if (i & 1) d += str;\n    return d;\n}\n\nfunction configure_error_stack(fn) {\n    Object.defineProperty(fn.prototype, \"stack\", {\n        get: function() {\n            var err = new Error(this.message);\n            err.name = this.name;\n            try {\n                throw err;\n            } catch(e) {\n                return e.stack;\n            }\n        }\n    });\n}\n\nfunction DefaultsError(msg, defs) {\n    this.message = msg;\n    this.defs = defs;\n}\nDefaultsError.prototype = Object.create(Error.prototype);\nDefaultsError.prototype.constructor = DefaultsError;\nDefaultsError.prototype.name = \"DefaultsError\";\nconfigure_error_stack(DefaultsError);\n\nDefaultsError.croak = function(msg, defs) {\n    throw new DefaultsError(msg, defs);\n};\n\nfunction defaults(args, defs, croak) {\n    if (args === true)\n        args = {};\n    var ret = args || {};\n    if (croak) for (var i in ret) if (HOP(ret, i) && !HOP(defs, i))\n        DefaultsError.croak(\"`\" + i + \"` is not a supported option\", defs);\n    for (var i in defs) if (HOP(defs, i)) {\n        ret[i] = (args && HOP(args, i)) ? args[i] : defs[i];\n    }\n    return ret;\n}\n\nfunction merge(obj, ext) {\n    var count = 0;\n    for (var i in ext) if (HOP(ext, i)) {\n        obj[i] = ext[i];\n        count++;\n    }\n    return count;\n}\n\nfunction noop() {}\nfunction return_false() { return false; }\nfunction return_true() { return true; }\nfunction return_this() { return this; }\nfunction return_null() { return null; }\n\nvar MAP = (function() {\n    function MAP(a, f, backwards) {\n        var ret = [], top = [], i;\n        function doit() {\n            var val = f(a[i], i);\n            var is_last = val instanceof Last;\n            if (is_last) val = val.v;\n            if (val instanceof AtTop) {\n                val = val.v;\n                if (val instanceof Splice) {\n                    top.push.apply(top, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    top.push(val);\n                }\n            } else if (val !== skip) {\n                if (val instanceof Splice) {\n                    ret.push.apply(ret, backwards ? val.v.slice().reverse() : val.v);\n                } else {\n                    ret.push(val);\n                }\n            }\n            return is_last;\n        }\n        if (Array.isArray(a)) {\n            if (backwards) {\n                for (i = a.length; --i >= 0;) if (doit()) break;\n                ret.reverse();\n                top.reverse();\n            } else {\n                for (i = 0; i < a.length; ++i) if (doit()) break;\n            }\n        } else {\n            for (i in a) if (HOP(a, i)) if (doit()) break;\n        }\n        return top.concat(ret);\n    }\n    MAP.at_top = function(val) { return new AtTop(val); };\n    MAP.splice = function(val) { return new Splice(val); };\n    MAP.last = function(val) { return new Last(val); };\n    var skip = MAP.skip = {};\n    function AtTop(val) { this.v = val; }\n    function Splice(val) { this.v = val; }\n    function Last(val) { this.v = val; }\n    return MAP;\n})();\n\nfunction push_uniq(array, el) {\n    if (!array.includes(el))\n        array.push(el);\n}\n\nfunction string_template(text, props) {\n    return text.replace(/{(.+?)}/g, function(str, p) {\n        return props && props[p];\n    });\n}\n\nfunction remove(array, el) {\n    for (var i = array.length; --i >= 0;) {\n        if (array[i] === el) array.splice(i, 1);\n    }\n}\n\nfunction mergeSort(array, cmp) {\n    if (array.length < 2) return array.slice();\n    function merge(a, b) {\n        var r = [], ai = 0, bi = 0, i = 0;\n        while (ai < a.length && bi < b.length) {\n            cmp(a[ai], b[bi]) <= 0\n                ? r[i++] = a[ai++]\n                : r[i++] = b[bi++];\n        }\n        if (ai < a.length) r.push.apply(r, a.slice(ai));\n        if (bi < b.length) r.push.apply(r, b.slice(bi));\n        return r;\n    }\n    function _ms(a) {\n        if (a.length <= 1)\n            return a;\n        var m = Math.floor(a.length / 2), left = a.slice(0, m), right = a.slice(m);\n        left = _ms(left);\n        right = _ms(right);\n        return merge(left, right);\n    }\n    return _ms(array);\n}\n\nfunction makePredicate(words) {\n    if (!Array.isArray(words)) words = words.split(\" \");\n\n    return new Set(words);\n}\n\nfunction all(array, predicate) {\n    for (var i = array.length; --i >= 0;)\n        if (!predicate(array[i]))\n            return false;\n    return true;\n}\n\nfunction map_add(map, key, value) {\n    if (map.has(key)) {\n        map.get(key).push(value);\n    } else {\n        map.set(key, [ value ]);\n    }\n}\n\nfunction map_from_object(obj) {\n    var map = new Map();\n    for (var key in obj) {\n        if (HOP(obj, key) && key.charAt(0) === \"$\") {\n            map.set(key.substr(1), obj[key]);\n        }\n    }\n    return map;\n}\n\nfunction map_to_object(map) {\n    var obj = Object.create(null);\n    map.forEach(function (value, key) {\n        obj[\"$\" + key] = value;\n    });\n    return obj;\n}\n\nfunction HOP(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\n// return true if the node at the top of the stack (that means the\n// innermost node in the current output) is lexically the first in\n// a statement.\nfunction first_in_statement(stack) {\n    var node = stack.parent(-1);\n    for (var i = 0, p; p = stack.parent(i); i++) {\n        if (p instanceof AST_Statement && p.body === node)\n            return true;\n        if ((p instanceof AST_Sequence      && p.expressions[0] === node) ||\n            (p.TYPE == \"Call\"               && p.expression === node ) ||\n            (p instanceof AST_Dot           && p.expression === node ) ||\n            (p instanceof AST_Sub           && p.expression === node ) ||\n            (p instanceof AST_Conditional   && p.condition === node  ) ||\n            (p instanceof AST_Binary        && p.left === node       ) ||\n            (p instanceof AST_UnaryPostfix  && p.expression === node )\n        ) {\n            node = p;\n        } else {\n            return false;\n        }\n    }\n}\n\nfunction keep_name(keep_setting, name) {\n    return keep_setting === true\n        || (keep_setting instanceof RegExp && keep_setting.test(name));\n}\n\nexport {\n    all,\n    characters,\n    configure_error_stack,\n    defaults,\n    find_if,\n    first_in_statement,\n    HOP,\n    keep_name,\n    makePredicate,\n    map_add,\n    map_from_object,\n    map_to_object,\n    MAP,\n    member,\n    merge,\n    mergeSort,\n    noop,\n    push_uniq,\n    remove,\n    repeat_string,\n    return_false,\n    return_null,\n    return_this,\n    return_true,\n    string_template,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n    Parser based on parse-js (http://marijn.haverbeke.nl/parse-js/).\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    all,\n    characters,\n    configure_error_stack,\n    defaults,\n    find_if,\n    HOP,\n    makePredicate,\n} from \"./utils.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\n\nvar KEYWORDS = \"break case catch class const continue debugger default delete do else export extends finally for function if in instanceof let new return switch throw try typeof var void while with\";\nvar KEYWORDS_ATOM = \"false null true\";\nvar RESERVED_WORDS = \"enum implements import interface package private protected public static super this \" + KEYWORDS_ATOM + \" \" + KEYWORDS;\nvar KEYWORDS_BEFORE_EXPRESSION = \"return new delete throw else case yield await\";\n\nKEYWORDS = makePredicate(KEYWORDS);\nRESERVED_WORDS = makePredicate(RESERVED_WORDS);\nKEYWORDS_BEFORE_EXPRESSION = makePredicate(KEYWORDS_BEFORE_EXPRESSION);\nKEYWORDS_ATOM = makePredicate(KEYWORDS_ATOM);\n\nvar OPERATOR_CHARS = makePredicate(characters(\"+-*&%=<>!?|~^\"));\n\nvar RE_NUM_LITERAL = /[0-9a-f]/i;\nvar RE_HEX_NUMBER = /^0x[0-9a-f]+$/i;\nvar RE_OCT_NUMBER = /^0[0-7]+$/;\nvar RE_ES6_OCT_NUMBER = /^0o[0-7]+$/i;\nvar RE_BIN_NUMBER = /^0b[01]+$/i;\nvar RE_DEC_NUMBER = /^\\d*\\.?\\d*(?:e[+-]?\\d*(?:\\d\\.?|\\.?\\d)\\d*)?$/i;\n\nvar OPERATORS = makePredicate([\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"new\",\n    \"void\",\n    \"delete\",\n    \"++\",\n    \"--\",\n    \"+\",\n    \"-\",\n    \"!\",\n    \"~\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"*\",\n    \"**\",\n    \"/\",\n    \"%\",\n    \">>\",\n    \"<<\",\n    \">>>\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"===\",\n    \"!=\",\n    \"!==\",\n    \"?\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"/=\",\n    \"*=\",\n    \"**=\",\n    \"%=\",\n    \">>=\",\n    \"<<=\",\n    \">>>=\",\n    \"|=\",\n    \"^=\",\n    \"&=\",\n    \"&&\",\n    \"||\"\n]);\n\nvar WHITESPACE_CHARS = makePredicate(characters(\" \\u00a0\\n\\r\\t\\f\\u000b\\u200b\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\uFEFF\"));\n\nvar NEWLINE_CHARS = makePredicate(characters(\"\\n\\r\\u2028\\u2029\"));\n\nvar PUNC_AFTER_EXPRESSION = makePredicate(characters(\";]),:\"));\n\nvar PUNC_BEFORE_EXPRESSION = makePredicate(characters(\"[{(,;:\"));\n\nvar PUNC_CHARS = makePredicate(characters(\"[]{}(),;:\"));\n\n/* -----[ Tokenizer ]----- */\n\n// surrogate safe regexps adapted from https://github.com/mathiasbynens/unicode-8.0.0/tree/89b412d8a71ecca9ed593d9e9fa073ab64acfebe/Binary_Property\nvar UNICODE = {\n    ID_Start: /[A-Za-z\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\n    ID_Continue: /[0-9A-Z_a-z\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/,\n};\n\nfunction get_full_char(str, pos) {\n    var char = str.charAt(pos);\n    if (is_surrogate_pair_head(char)) {\n        var next = str.charAt(pos + 1);\n        if (is_surrogate_pair_tail(next)) {\n            return char + next;\n        }\n    }\n    if (is_surrogate_pair_tail(char)) {\n        var prev = str.charAt(pos - 1);\n        if (is_surrogate_pair_head(prev)) {\n            return prev + char;\n        }\n    }\n    return char;\n}\n\nfunction get_full_char_code(str, pos) {\n    // https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n    if (is_surrogate_pair_head(str.charAt(pos))) {\n        return 0x10000 + (str.charCodeAt(pos) - 0xd800 << 10) + str.charCodeAt(pos + 1) - 0xdc00;\n    }\n    return str.charCodeAt(pos);\n}\n\nfunction get_full_char_length(str) {\n    var surrogates = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        if (is_surrogate_pair_head(str.charCodeAt(i))) {\n            if (is_surrogate_pair_tail(str.charCodeAt(i + 1))) {\n                surrogates++;\n                i++;\n            }\n        }\n    }\n\n    return str.length - surrogates;\n}\n\nfunction from_char_code(code) {\n    // Based on https://github.com/mathiasbynens/String.fromCodePoint/blob/master/fromcodepoint.js\n    if (code > 0xFFFF) {\n        code -= 0x10000;\n        return (String.fromCharCode((code >> 10) + 0xD800) +\n            String.fromCharCode((code % 0x400) + 0xDC00));\n    }\n    return String.fromCharCode(code);\n}\n\nfunction is_surrogate_pair_head(code) {\n    if (typeof code === \"string\")\n        code = code.charCodeAt(0);\n\n    return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction is_surrogate_pair_tail(code) {\n    if (typeof code === \"string\")\n        code = code.charCodeAt(0);\n    return code >= 0xdc00 && code <= 0xdfff;\n}\n\nfunction is_digit(code) {\n    return code >= 48 && code <= 57;\n}\n\nfunction is_identifier_start(ch) {\n    var code = ch.charCodeAt(0);\n    return UNICODE.ID_Start.test(ch) || code == 36 || code == 95;\n}\n\nfunction is_identifier_char(ch) {\n    var code = ch.charCodeAt(0);\n    return UNICODE.ID_Continue.test(ch)\n        || code == 36\n        || code == 95\n        || code == 8204 // \\u200c: zero-width non-joiner <ZWNJ>\n        || code == 8205 // \\u200d: zero-width joiner <ZWJ> (in my ECMA-262 PDF, this is also 200c)\n    ;\n}\n\nfunction is_identifier_string(str) {\n    return /^[a-z_$][a-z0-9_$]*$/i.test(str);\n}\n\nfunction parse_js_number(num) {\n    if (RE_HEX_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 16);\n    } else if (RE_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(1), 8);\n    } else if (RE_ES6_OCT_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 8);\n    } else if (RE_BIN_NUMBER.test(num)) {\n        return parseInt(num.substr(2), 2);\n    } else if (RE_DEC_NUMBER.test(num)) {\n        return parseFloat(num);\n    } else {\n        var val = parseFloat(num);\n        if (val == num) return val;\n    }\n}\n\nfunction JS_Parse_Error(message, filename, line, col, pos) {\n    this.message = message;\n    this.filename = filename;\n    this.line = line;\n    this.col = col;\n    this.pos = pos;\n}\nJS_Parse_Error.prototype = Object.create(Error.prototype);\nJS_Parse_Error.prototype.constructor = JS_Parse_Error;\nJS_Parse_Error.prototype.name = \"SyntaxError\";\nconfigure_error_stack(JS_Parse_Error);\n\nfunction js_error(message, filename, line, col, pos) {\n    throw new JS_Parse_Error(message, filename, line, col, pos);\n}\n\nfunction is_token(token, type, val) {\n    return token.type == type && (val == null || token.value == val);\n}\n\nvar EX_EOF = {};\n\nfunction tokenizer($TEXT, filename, html5_comments, shebang) {\n\n    var S = {\n        text            : $TEXT,\n        filename        : filename,\n        pos             : 0,\n        tokpos          : 0,\n        line            : 1,\n        tokline         : 0,\n        col             : 0,\n        tokcol          : 0,\n        newline_before  : false,\n        regex_allowed   : false,\n        brace_counter   : 0,\n        template_braces : [],\n        comments_before : [],\n        directives      : {},\n        directive_stack : []\n    };\n\n    function peek() { return get_full_char(S.text, S.pos); }\n\n    function next(signal_eof, in_string) {\n        var ch = get_full_char(S.text, S.pos++);\n        if (signal_eof && !ch)\n            throw EX_EOF;\n        if (NEWLINE_CHARS.has(ch)) {\n            S.newline_before = S.newline_before || !in_string;\n            ++S.line;\n            S.col = 0;\n            if (!in_string && ch == \"\\r\" && peek() == \"\\n\") {\n                // treat a \\r\\n sequence as a single \\n\n                ++S.pos;\n                ch = \"\\n\";\n            }\n        } else {\n            if (ch.length > 1) {\n                ++S.pos;\n                ++S.col;\n            }\n            ++S.col;\n        }\n        return ch;\n    }\n\n    function forward(i) {\n        while (i-- > 0) next();\n    }\n\n    function looking_at(str) {\n        return S.text.substr(S.pos, str.length) == str;\n    }\n\n    function find_eol() {\n        var text = S.text;\n        for (var i = S.pos, n = S.text.length; i < n; ++i) {\n            var ch = text[i];\n            if (NEWLINE_CHARS.has(ch))\n                return i;\n        }\n        return -1;\n    }\n\n    function find(what, signal_eof) {\n        var pos = S.text.indexOf(what, S.pos);\n        if (signal_eof && pos == -1) throw EX_EOF;\n        return pos;\n    }\n\n    function start_token() {\n        S.tokline = S.line;\n        S.tokcol = S.col;\n        S.tokpos = S.pos;\n    }\n\n    var prev_was_dot = false;\n    var previous_token = null;\n    function token(type, value, is_comment) {\n        S.regex_allowed = ((type == \"operator\" && !UNARY_POSTFIX.has(value)) ||\n                           (type == \"keyword\" && KEYWORDS_BEFORE_EXPRESSION.has(value)) ||\n                           (type == \"punc\" && PUNC_BEFORE_EXPRESSION.has(value))) ||\n                           (type == \"arrow\");\n        if (type == \"punc\" && value == \".\") {\n            prev_was_dot = true;\n        } else if (!is_comment) {\n            prev_was_dot = false;\n        }\n        var ret = {\n            type    : type,\n            value   : value,\n            line    : S.tokline,\n            col     : S.tokcol,\n            pos     : S.tokpos,\n            endline : S.line,\n            endcol  : S.col,\n            endpos  : S.pos,\n            nlb     : S.newline_before,\n            file    : filename\n        };\n        if (/^(?:num|string|regexp)$/i.test(type)) {\n            ret.raw = $TEXT.substring(ret.pos, ret.endpos);\n        }\n        if (!is_comment) {\n            ret.comments_before = S.comments_before;\n            ret.comments_after = S.comments_before = [];\n        }\n        S.newline_before = false;\n        ret = new AST_Token(ret);\n        if (!is_comment) previous_token = ret;\n        return ret;\n    }\n\n    function skip_whitespace() {\n        while (WHITESPACE_CHARS.has(peek()))\n            next();\n    }\n\n    function read_while(pred) {\n        var ret = \"\", ch, i = 0;\n        while ((ch = peek()) && pred(ch, i++))\n            ret += next();\n        return ret;\n    }\n\n    function parse_error(err) {\n        js_error(err, filename, S.tokline, S.tokcol, S.tokpos);\n    }\n\n    function read_num(prefix) {\n        var has_e = false, after_e = false, has_x = false, has_dot = prefix == \".\";\n        var num = read_while(function(ch, i) {\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 98: case 66: // bB\n                return (has_x = true); // Can occur in hex sequence, don't return false yet\n              case 111: case 79: // oO\n              case 120: case 88: // xX\n                return has_x ? false : (has_x = true);\n              case 101: case 69: // eE\n                return has_x ? true : has_e ? false : (has_e = after_e = true);\n              case 45: // -\n                return after_e || (i == 0 && !prefix);\n              case 43: // +\n                return after_e;\n              case (after_e = false, 46): // .\n                return (!has_dot && !has_x && !has_e) ? (has_dot = true) : false;\n            }\n            return RE_NUM_LITERAL.test(ch);\n        });\n        if (prefix) num = prefix + num;\n        if (RE_OCT_NUMBER.test(num) && next_token.has_directive(\"use strict\")) {\n            parse_error(\"Legacy octal literals are not allowed in strict mode\");\n        }\n        var valid = parse_js_number(num);\n        if (!isNaN(valid)) {\n            return token(\"num\", valid);\n        } else {\n            parse_error(\"Invalid syntax: \" + num);\n        }\n    }\n\n    function read_escaped_char(in_string, strict_hex, template_string) {\n        var ch = next(true, in_string);\n        switch (ch.charCodeAt(0)) {\n          case 110 : return \"\\n\";\n          case 114 : return \"\\r\";\n          case 116 : return \"\\t\";\n          case 98  : return \"\\b\";\n          case 118 : return \"\\u000b\"; // \\v\n          case 102 : return \"\\f\";\n          case 120 : return String.fromCharCode(hex_bytes(2, strict_hex)); // \\x\n          case 117 : // \\u\n            if (peek() == \"{\") {\n                next(true);\n                if (peek() === \"}\")\n                    parse_error(\"Expecting hex-character between {}\");\n                while (peek() == \"0\") next(true); // No significance\n                var result, length = find(\"}\", true) - S.pos;\n                // Avoid 32 bit integer overflow (1 << 32 === 1)\n                // We know first character isn't 0 and thus out of range anyway\n                if (length > 6 || (result = hex_bytes(length, strict_hex)) > 0x10FFFF) {\n                    parse_error(\"Unicode reference out of bounds\");\n                }\n                next(true);\n                return from_char_code(result);\n            }\n            return String.fromCharCode(hex_bytes(4, strict_hex));\n          case 10  : return \"\"; // newline\n          case 13  :            // \\r\n            if (peek() == \"\\n\") { // DOS newline\n                next(true, in_string);\n                return \"\";\n            }\n        }\n        if (ch >= \"0\" && ch <= \"7\") {\n            if (template_string && strict_hex) {\n                parse_error(\"Octal escape sequences are not allowed in template strings\");\n            }\n            return read_octal_escape_sequence(ch, strict_hex);\n        }\n        return ch;\n    }\n\n    function read_octal_escape_sequence(ch, strict_octal) {\n        // Read\n        var p = peek();\n        if (p >= \"0\" && p <= \"7\") {\n            ch += next(true);\n            if (ch[0] <= \"3\" && (p = peek()) >= \"0\" && p <= \"7\")\n                ch += next(true);\n        }\n\n        // Parse\n        if (ch === \"0\") return \"\\0\";\n        if (ch.length > 0 && next_token.has_directive(\"use strict\") && strict_octal)\n            parse_error(\"Legacy octal escape sequences are not allowed in strict mode\");\n        return String.fromCharCode(parseInt(ch, 8));\n    }\n\n    function hex_bytes(n, strict_hex) {\n        var num = 0;\n        for (; n > 0; --n) {\n            if (!strict_hex && isNaN(parseInt(peek(), 16))) {\n                return parseInt(num, 16) || \"\";\n            }\n            var digit = next(true);\n            if (isNaN(parseInt(digit, 16)))\n                parse_error(\"Invalid hex-character pattern in string\");\n            num += digit;\n        }\n        return parseInt(num, 16);\n    }\n\n    var read_string = with_eof_error(\"Unterminated string constant\", function(quote_char) {\n        var quote = next(), ret = \"\";\n        for (;;) {\n            var ch = next(true, true);\n            if (ch == \"\\\\\") ch = read_escaped_char(true, true);\n            else if (NEWLINE_CHARS.has(ch)) parse_error(\"Unterminated string constant\");\n            else if (ch == quote) break;\n            ret += ch;\n        }\n        var tok = token(\"string\", ret);\n        tok.quote = quote_char;\n        return tok;\n    });\n\n    var read_template_characters = with_eof_error(\"Unterminated template\", function(begin) {\n        if (begin) {\n            S.template_braces.push(S.brace_counter);\n        }\n        var content = \"\", raw = \"\", ch, tok;\n        next(true, true);\n        while ((ch = next(true, true)) != \"`\") {\n            if (ch == \"\\r\") {\n                if (peek() == \"\\n\") ++S.pos;\n                ch = \"\\n\";\n            } else if (ch == \"$\" && peek() == \"{\") {\n                next(true, true);\n                S.brace_counter++;\n                tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n                tok.begin = begin;\n                tok.raw = raw;\n                tok.end = false;\n                return tok;\n            }\n\n            raw += ch;\n            if (ch == \"\\\\\") {\n                var tmp = S.pos;\n                var prev_is_tag = previous_token && (previous_token.type === \"name\" || previous_token.type === \"punc\" && (previous_token.value === \")\" || previous_token.value === \"]\"));\n                ch = read_escaped_char(true, !prev_is_tag, true);\n                raw += S.text.substr(tmp, S.pos - tmp);\n            }\n\n            content += ch;\n        }\n        S.template_braces.pop();\n        tok = token(begin ? \"template_head\" : \"template_substitution\", content);\n        tok.begin = begin;\n        tok.raw = raw;\n        tok.end = true;\n        return tok;\n    });\n\n    function skip_line_comment(type) {\n        var regex_allowed = S.regex_allowed;\n        var i = find_eol(), ret;\n        if (i == -1) {\n            ret = S.text.substr(S.pos);\n            S.pos = S.text.length;\n        } else {\n            ret = S.text.substring(S.pos, i);\n            S.pos = i;\n        }\n        S.col = S.tokcol + (S.pos - S.tokpos);\n        S.comments_before.push(token(type, ret, true));\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    }\n\n    var skip_multiline_comment = with_eof_error(\"Unterminated multiline comment\", function() {\n        var regex_allowed = S.regex_allowed;\n        var i = find(\"*/\", true);\n        var text = S.text.substring(S.pos, i).replace(/\\r\\n|\\r|\\u2028|\\u2029/g, \"\\n\");\n        // update stream position\n        forward(get_full_char_length(text) /* text length doesn't count \\r\\n as 2 char while S.pos - i does */ + 2);\n        S.comments_before.push(token(\"comment2\", text, true));\n        S.newline_before = S.newline_before || text.includes(\"\\n\");\n        S.regex_allowed = regex_allowed;\n        return next_token;\n    });\n\n    var read_name = with_eof_error(\"Unterminated identifier name\", function() {\n        var name, ch, escaped = false;\n        var read_escaped_identifier_char = function() {\n            escaped = true;\n            next();\n            if (peek() !== \"u\") {\n                parse_error(\"Expecting UnicodeEscapeSequence -- uXXXX or u{XXXX}\");\n            }\n            return read_escaped_char(false, true);\n        };\n\n        // Read first character (ID_Start)\n        if ((name = peek()) === \"\\\\\") {\n            name = read_escaped_identifier_char();\n            if (!is_identifier_start(name)) {\n                parse_error(\"First identifier char is an invalid identifier char\");\n            }\n        } else if (is_identifier_start(name)) {\n            next();\n        } else {\n            return \"\";\n        }\n\n        // Read ID_Continue\n        while ((ch = peek()) != null) {\n            if ((ch = peek()) === \"\\\\\") {\n                ch = read_escaped_identifier_char();\n                if (!is_identifier_char(ch)) {\n                    parse_error(\"Invalid escaped identifier char\");\n                }\n            } else {\n                if (!is_identifier_char(ch)) {\n                    break;\n                }\n                next();\n            }\n            name += ch;\n        }\n        if (RESERVED_WORDS.has(name) && escaped) {\n            parse_error(\"Escaped characters are not allowed in keywords\");\n        }\n        return name;\n    });\n\n    var read_regexp = with_eof_error(\"Unterminated regular expression\", function(source) {\n        var prev_backslash = false, ch, in_class = false;\n        while ((ch = next(true))) if (NEWLINE_CHARS.has(ch)) {\n            parse_error(\"Unexpected line terminator\");\n        } else if (prev_backslash) {\n            source += \"\\\\\" + ch;\n            prev_backslash = false;\n        } else if (ch == \"[\") {\n            in_class = true;\n            source += ch;\n        } else if (ch == \"]\" && in_class) {\n            in_class = false;\n            source += ch;\n        } else if (ch == \"/\" && !in_class) {\n            break;\n        } else if (ch == \"\\\\\") {\n            prev_backslash = true;\n        } else {\n            source += ch;\n        }\n        var mods = read_name();\n        try {\n            var regexp = new RegExp(source, mods);\n            regexp.raw_source = \"/\" + source + \"/\" + mods;\n            return token(\"regexp\", regexp);\n        } catch(e) {\n            parse_error(e.message);\n        }\n    });\n\n    function read_operator(prefix) {\n        function grow(op) {\n            if (!peek()) return op;\n            var bigger = op + peek();\n            if (OPERATORS.has(bigger)) {\n                next();\n                return grow(bigger);\n            } else {\n                return op;\n            }\n        }\n        return token(\"operator\", grow(prefix || next()));\n    }\n\n    function handle_slash() {\n        next();\n        switch (peek()) {\n          case \"/\":\n            next();\n            return skip_line_comment(\"comment1\");\n          case \"*\":\n            next();\n            return skip_multiline_comment();\n        }\n        return S.regex_allowed ? read_regexp(\"\") : read_operator(\"/\");\n    }\n\n    function handle_eq_sign() {\n        next();\n        if (peek() === \">\") {\n            next();\n            return token(\"arrow\", \"=>\");\n        } else {\n            return read_operator(\"=\");\n        }\n    }\n\n    function handle_dot() {\n        next();\n        if (is_digit(peek().charCodeAt(0))) {\n            return read_num(\".\");\n        }\n        if (peek() === \".\") {\n            next();  // Consume second dot\n            next();  // Consume third dot\n            return token(\"expand\", \"...\");\n        }\n\n        return token(\"punc\", \".\");\n    }\n\n    function read_word() {\n        var word = read_name();\n        if (prev_was_dot) return token(\"name\", word);\n        return KEYWORDS_ATOM.has(word) ? token(\"atom\", word)\n            : !KEYWORDS.has(word) ? token(\"name\", word)\n            : OPERATORS.has(word) ? token(\"operator\", word)\n            : token(\"keyword\", word);\n    }\n\n    function with_eof_error(eof_error, cont) {\n        return function(x) {\n            try {\n                return cont(x);\n            } catch(ex) {\n                if (ex === EX_EOF) parse_error(eof_error);\n                else throw ex;\n            }\n        };\n    }\n\n    function next_token(force_regexp) {\n        if (force_regexp != null)\n            return read_regexp(force_regexp);\n        if (shebang && S.pos == 0 && looking_at(\"#!\")) {\n            start_token();\n            forward(2);\n            skip_line_comment(\"comment5\");\n        }\n        for (;;) {\n            skip_whitespace();\n            start_token();\n            if (html5_comments) {\n                if (looking_at(\"<!--\")) {\n                    forward(4);\n                    skip_line_comment(\"comment3\");\n                    continue;\n                }\n                if (looking_at(\"-->\") && S.newline_before) {\n                    forward(3);\n                    skip_line_comment(\"comment4\");\n                    continue;\n                }\n            }\n            var ch = peek();\n            if (!ch) return token(\"eof\");\n            var code = ch.charCodeAt(0);\n            switch (code) {\n              case 34: case 39: return read_string(ch);\n              case 46: return handle_dot();\n              case 47: {\n                  var tok = handle_slash();\n                  if (tok === next_token) continue;\n                  return tok;\n              }\n              case 61: return handle_eq_sign();\n              case 96: return read_template_characters(true);\n              case 123:\n                S.brace_counter++;\n                break;\n              case 125:\n                S.brace_counter--;\n                if (S.template_braces.length > 0\n                    && S.template_braces[S.template_braces.length - 1] === S.brace_counter)\n                    return read_template_characters(false);\n                break;\n            }\n            if (is_digit(code)) return read_num();\n            if (PUNC_CHARS.has(ch)) return token(\"punc\", next());\n            if (OPERATOR_CHARS.has(ch)) return read_operator();\n            if (code == 92 || is_identifier_start(ch)) return read_word();\n            break;\n        }\n        parse_error(\"Unexpected character '\" + ch + \"'\");\n    }\n\n    next_token.next = next;\n    next_token.peek = peek;\n\n    next_token.context = function(nc) {\n        if (nc) S = nc;\n        return S;\n    };\n\n    next_token.add_directive = function(directive) {\n        S.directive_stack[S.directive_stack.length - 1].push(directive);\n\n        if (S.directives[directive] === undefined) {\n            S.directives[directive] = 1;\n        } else {\n            S.directives[directive]++;\n        }\n    };\n\n    next_token.push_directives_stack = function() {\n        S.directive_stack.push([]);\n    };\n\n    next_token.pop_directives_stack = function() {\n        var directives = S.directive_stack[S.directive_stack.length - 1];\n\n        for (var i = 0; i < directives.length; i++) {\n            S.directives[directives[i]]--;\n        }\n\n        S.directive_stack.pop();\n    };\n\n    next_token.has_directive = function(directive) {\n        return S.directives[directive] > 0;\n    };\n\n    return next_token;\n\n}\n\n/* -----[ Parser (constants) ]----- */\n\nvar UNARY_PREFIX = makePredicate([\n    \"typeof\",\n    \"void\",\n    \"delete\",\n    \"--\",\n    \"++\",\n    \"!\",\n    \"~\",\n    \"-\",\n    \"+\"\n]);\n\nvar UNARY_POSTFIX = makePredicate([ \"--\", \"++\" ]);\n\nvar ASSIGNMENT = makePredicate([ \"=\", \"+=\", \"-=\", \"/=\", \"*=\", \"**=\", \"%=\", \">>=\", \"<<=\", \">>>=\", \"|=\", \"^=\", \"&=\" ]);\n\nvar PRECEDENCE = (function(a, ret) {\n    for (var i = 0; i < a.length; ++i) {\n        var b = a[i];\n        for (var j = 0; j < b.length; ++j) {\n            ret[b[j]] = i + 1;\n        }\n    }\n    return ret;\n})(\n    [\n        [\"||\"],\n        [\"&&\"],\n        [\"|\"],\n        [\"^\"],\n        [\"&\"],\n        [\"==\", \"===\", \"!=\", \"!==\"],\n        [\"<\", \">\", \"<=\", \">=\", \"in\", \"instanceof\"],\n        [\">>\", \"<<\", \">>>\"],\n        [\"+\", \"-\"],\n        [\"*\", \"/\", \"%\"],\n        [\"**\"]\n    ],\n    {}\n);\n\nvar ATOMIC_START_TOKEN = makePredicate([ \"atom\", \"num\", \"string\", \"regexp\", \"name\" ]);\n\n/* -----[ Parser ]----- */\n\nfunction parse($TEXT, options) {\n\n    options = defaults(options, {\n        bare_returns   : false,\n        ecma           : 8,\n        expression     : false,\n        filename       : null,\n        html5_comments : true,\n        module         : false,\n        shebang        : true,\n        strict         : false,\n        toplevel       : null,\n    }, true);\n\n    var S = {\n        input         : (typeof $TEXT == \"string\"\n                         ? tokenizer($TEXT, options.filename,\n                                     options.html5_comments, options.shebang)\n                         : $TEXT),\n        token         : null,\n        prev          : null,\n        peeked        : null,\n        in_function   : 0,\n        in_async      : -1,\n        in_generator  : -1,\n        in_directives : true,\n        in_loop       : 0,\n        labels        : []\n    };\n\n    S.token = next();\n\n    function is(type, value) {\n        return is_token(S.token, type, value);\n    }\n\n    function peek() { return S.peeked || (S.peeked = S.input()); }\n\n    function next() {\n        S.prev = S.token;\n\n        if (!S.peeked) peek();\n        S.token = S.peeked;\n        S.peeked = null;\n        S.in_directives = S.in_directives && (\n            S.token.type == \"string\" || is(\"punc\", \";\")\n        );\n        return S.token;\n    }\n\n    function prev() {\n        return S.prev;\n    }\n\n    function croak(msg, line, col, pos) {\n        var ctx = S.input.context();\n        js_error(msg,\n                 ctx.filename,\n                 line != null ? line : ctx.tokline,\n                 col != null ? col : ctx.tokcol,\n                 pos != null ? pos : ctx.tokpos);\n    }\n\n    function token_error(token, msg) {\n        croak(msg, token.line, token.col);\n    }\n\n    function unexpected(token) {\n        if (token == null)\n            token = S.token;\n        token_error(token, \"Unexpected token: \" + token.type + \" (\" + token.value + \")\");\n    }\n\n    function expect_token(type, val) {\n        if (is(type, val)) {\n            return next();\n        }\n        token_error(S.token, \"Unexpected token \" + S.token.type + \" «\" + S.token.value + \"»\" + \", expected \" + type + \" «\" + val + \"»\");\n    }\n\n    function expect(punc) { return expect_token(\"punc\", punc); }\n\n    function has_newline_before(token) {\n        return token.nlb || !all(token.comments_before, function(comment) {\n            return !comment.nlb;\n        });\n    }\n\n    function can_insert_semicolon() {\n        return !options.strict\n            && (is(\"eof\") || is(\"punc\", \"}\") || has_newline_before(S.token));\n    }\n\n    function is_in_generator() {\n        return S.in_generator === S.in_function;\n    }\n\n    function is_in_async() {\n        return S.in_async === S.in_function;\n    }\n\n    function semicolon(optional) {\n        if (is(\"punc\", \";\")) next();\n        else if (!optional && !can_insert_semicolon()) unexpected();\n    }\n\n    function parenthesised() {\n        expect(\"(\");\n        var exp = expression(true);\n        expect(\")\");\n        return exp;\n    }\n\n    function embed_tokens(parser) {\n        return function() {\n            var start = S.token;\n            var expr = parser.apply(null, arguments);\n            var end = prev();\n            expr.start = start;\n            expr.end = end;\n            return expr;\n        };\n    }\n\n    function handle_regexp() {\n        if (is(\"operator\", \"/\") || is(\"operator\", \"/=\")) {\n            S.peeked = null;\n            S.token = S.input(S.token.value.substr(1)); // force regexp\n        }\n    }\n\n    var statement = embed_tokens(function(is_export_default, is_for_body, is_if_body) {\n        handle_regexp();\n        switch (S.token.type) {\n          case \"string\":\n            if (S.in_directives) {\n                var token = peek();\n                if (!S.token.raw.includes(\"\\\\\")\n                    && (is_token(token, \"punc\", \";\")\n                        || is_token(token, \"punc\", \"}\")\n                        || has_newline_before(token)\n                        || is_token(token, \"eof\"))) {\n                    S.input.add_directive(S.token.value);\n                } else {\n                    S.in_directives = false;\n                }\n            }\n            var dir = S.in_directives, stat = simple_statement();\n            return dir && stat.body instanceof AST_String ? new AST_Directive(stat.body) : stat;\n          case \"template_head\":\n          case \"num\":\n          case \"regexp\":\n          case \"operator\":\n          case \"atom\":\n            return simple_statement();\n\n          case \"name\":\n            if (S.token.value == \"async\" && is_token(peek(), \"keyword\", \"function\")) {\n                next();\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, true, is_export_default);\n            }\n            if (S.token.value == \"import\" && !is_token(peek(), \"punc\", \"(\")) {\n                next();\n                var node = import_();\n                semicolon();\n                return node;\n            }\n            return is_token(peek(), \"punc\", \":\")\n                ? labeled_statement()\n                : simple_statement();\n\n          case \"punc\":\n            switch (S.token.value) {\n              case \"{\":\n                return new AST_BlockStatement({\n                    start : S.token,\n                    body  : block_(),\n                    end   : prev()\n                });\n              case \"[\":\n              case \"(\":\n                return simple_statement();\n              case \";\":\n                S.in_directives = false;\n                next();\n                return new AST_EmptyStatement();\n              default:\n                unexpected();\n            }\n\n          case \"keyword\":\n            switch (S.token.value) {\n              case \"break\":\n                next();\n                return break_cont(AST_Break);\n\n              case \"continue\":\n                next();\n                return break_cont(AST_Continue);\n\n              case \"debugger\":\n                next();\n                semicolon();\n                return new AST_Debugger();\n\n              case \"do\":\n                next();\n                var body = in_loop(statement);\n                expect_token(\"keyword\", \"while\");\n                var condition = parenthesised();\n                semicolon(true);\n                return new AST_Do({\n                    body      : body,\n                    condition : condition\n                });\n\n              case \"while\":\n                next();\n                return new AST_While({\n                    condition : parenthesised(),\n                    body      : in_loop(function() { return statement(false, true); })\n                });\n\n              case \"for\":\n                next();\n                return for_();\n\n              case \"class\":\n                next();\n                if (is_for_body) {\n                    croak(\"classes are not allowed as the body of a loop\");\n                }\n                if (is_if_body) {\n                    croak(\"classes are not allowed as the body of an if\");\n                }\n                return class_(AST_DefClass);\n\n              case \"function\":\n                next();\n                if (is_for_body) {\n                    croak(\"functions are not allowed as the body of a loop\");\n                }\n                return function_(AST_Defun, false, false, is_export_default);\n\n              case \"if\":\n                next();\n                return if_();\n\n              case \"return\":\n                if (S.in_function == 0 && !options.bare_returns)\n                    croak(\"'return' outside of function\");\n                next();\n                var value = null;\n                if (is(\"punc\", \";\")) {\n                    next();\n                } else if (!can_insert_semicolon()) {\n                    value = expression(true);\n                    semicolon();\n                }\n                return new AST_Return({\n                    value: value\n                });\n\n              case \"switch\":\n                next();\n                return new AST_Switch({\n                    expression : parenthesised(),\n                    body       : in_loop(switch_body_)\n                });\n\n              case \"throw\":\n                next();\n                if (has_newline_before(S.token))\n                    croak(\"Illegal newline after 'throw'\");\n                var value = expression(true);\n                semicolon();\n                return new AST_Throw({\n                    value: value\n                });\n\n              case \"try\":\n                next();\n                return try_();\n\n              case \"var\":\n                next();\n                var node = var_();\n                semicolon();\n                return node;\n\n              case \"let\":\n                next();\n                var node = let_();\n                semicolon();\n                return node;\n\n              case \"const\":\n                next();\n                var node = const_();\n                semicolon();\n                return node;\n\n              case \"with\":\n                if (S.input.has_directive(\"use strict\")) {\n                    croak(\"Strict mode may not include a with statement\");\n                }\n                next();\n                return new AST_With({\n                    expression : parenthesised(),\n                    body       : statement()\n                });\n\n              case \"export\":\n                if (!is_token(peek(), \"punc\", \"(\")) {\n                    next();\n                    var node = export_();\n                    if (is(\"punc\", \";\")) semicolon();\n                    return node;\n                }\n            }\n        }\n        unexpected();\n    });\n\n    function labeled_statement() {\n        var label = as_symbol(AST_Label);\n        if (label.name === \"await\" && is_in_async()) {\n            token_error(S.prev, \"await cannot be used as label inside async function\");\n        }\n        if (find_if(function(l) { return l.name == label.name; }, S.labels)) {\n            // ECMA-262, 12.12: An ECMAScript program is considered\n            // syntactically incorrect if it contains a\n            // LabelledStatement that is enclosed by a\n            // LabelledStatement with the same Identifier as label.\n            croak(\"Label \" + label.name + \" defined twice\");\n        }\n        expect(\":\");\n        S.labels.push(label);\n        var stat = statement();\n        S.labels.pop();\n        if (!(stat instanceof AST_IterationStatement)) {\n            // check for `continue` that refers to this label.\n            // those should be reported as syntax errors.\n            // https://github.com/mishoo/UglifyJS2/issues/287\n            label.references.forEach(function(ref) {\n                if (ref instanceof AST_Continue) {\n                    ref = ref.label.start;\n                    croak(\"Continue label `\" + label.name + \"` refers to non-IterationStatement.\",\n                          ref.line, ref.col, ref.pos);\n                }\n            });\n        }\n        return new AST_LabeledStatement({ body: stat, label: label });\n    }\n\n    function simple_statement(tmp) {\n        return new AST_SimpleStatement({ body: (tmp = expression(true), semicolon(), tmp) });\n    }\n\n    function break_cont(type) {\n        var label = null, ldef;\n        if (!can_insert_semicolon()) {\n            label = as_symbol(AST_LabelRef, true);\n        }\n        if (label != null) {\n            ldef = find_if(function(l) { return l.name == label.name; }, S.labels);\n            if (!ldef)\n                croak(\"Undefined label \" + label.name);\n            label.thedef = ldef;\n        } else if (S.in_loop == 0)\n            croak(type.TYPE + \" not inside a loop or switch\");\n        semicolon();\n        var stat = new type({ label: label });\n        if (ldef) ldef.references.push(stat);\n        return stat;\n    }\n\n    function for_() {\n        var for_await_error = \"`for await` invalid in this context\";\n        var await_tok = S.token;\n        if (await_tok.type == \"name\" && await_tok.value == \"await\") {\n            if (!is_in_async()) {\n                token_error(await_tok, for_await_error);\n            }\n            next();\n        } else {\n            await_tok = false;\n        }\n        expect(\"(\");\n        var init = null;\n        if (!is(\"punc\", \";\")) {\n            init =\n                is(\"keyword\", \"var\") ? (next(), var_(true)) :\n                is(\"keyword\", \"let\") ? (next(), let_(true)) :\n                is(\"keyword\", \"const\") ? (next(), const_(true)) :\n                                       expression(true, true);\n            var is_in = is(\"operator\", \"in\");\n            var is_of = is(\"name\", \"of\");\n            if (await_tok && !is_of) {\n                token_error(await_tok, for_await_error);\n            }\n            if (is_in || is_of) {\n                if (init instanceof AST_Definitions) {\n                    if (init.definitions.length > 1)\n                        token_error(init.start, \"Only one variable declaration allowed in for..in loop\");\n                } else if (!(is_assignable(init) || (init = to_destructuring(init)) instanceof AST_Destructuring)) {\n                    token_error(init.start, \"Invalid left-hand side in for..in loop\");\n                }\n                next();\n                if (is_in) {\n                    return for_in(init);\n                } else {\n                    return for_of(init, !!await_tok);\n                }\n            }\n        } else if (await_tok) {\n            token_error(await_tok, for_await_error);\n        }\n        return regular_for(init);\n    }\n\n    function regular_for(init) {\n        expect(\";\");\n        var test = is(\"punc\", \";\") ? null : expression(true);\n        expect(\";\");\n        var step = is(\"punc\", \")\") ? null : expression(true);\n        expect(\")\");\n        return new AST_For({\n            init      : init,\n            condition : test,\n            step      : step,\n            body      : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_of(init, is_await) {\n        var lhs = init instanceof AST_Definitions ? init.definitions[0].name : null;\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForOf({\n            await  : is_await,\n            init   : init,\n            name   : lhs,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    function for_in(init) {\n        var obj = expression(true);\n        expect(\")\");\n        return new AST_ForIn({\n            init   : init,\n            object : obj,\n            body   : in_loop(function() { return statement(false, true); })\n        });\n    }\n\n    var arrow_function = function(start, argnames, is_async) {\n        if (has_newline_before(S.token)) {\n            croak(\"Unexpected newline before arrow (=>)\");\n        }\n\n        expect_token(\"arrow\", \"=>\");\n\n        var body = _function_body(is(\"punc\", \"{\"), false, is_async);\n\n        var end =\n            body instanceof Array && body.length ? body[body.length - 1].end :\n            body instanceof Array ? start :\n                body.end;\n\n        return new AST_Arrow({\n            start    : start,\n            end      : end,\n            async    : is_async,\n            argnames : argnames,\n            body     : body\n        });\n    };\n\n    var function_ = function(ctor, is_generator_property, is_async, is_export_default) {\n        var start = S.token;\n\n        var in_statement = ctor === AST_Defun;\n        var is_generator = is(\"operator\", \"*\");\n        if (is_generator) {\n            next();\n        }\n\n        var name = is(\"name\") ? as_symbol(in_statement ? AST_SymbolDefun : AST_SymbolLambda) : null;\n        if (in_statement && !name) {\n            if (is_export_default) {\n                ctor = AST_Function;\n            } else {\n                unexpected();\n            }\n        }\n\n        if (name && ctor !== AST_Accessor && !(name instanceof AST_SymbolDeclaration))\n            unexpected(prev());\n\n        var args = [];\n        var body = _function_body(true, is_generator || is_generator_property, is_async, name, args);\n        return new ctor({\n            start : args.start,\n            end   : body.end,\n            is_generator: is_generator,\n            async : is_async,\n            name  : name,\n            argnames: args,\n            body  : body\n        });\n    };\n\n    function track_used_binding_identifiers(is_parameter, strict) {\n        var parameters = new Set();\n        var duplicate = false;\n        var default_assignment = false;\n        var spread = false;\n        var strict_mode = !!strict;\n        var tracker = {\n            add_parameter: function(token) {\n                if (parameters.has(token.value)) {\n                    if (duplicate === false) {\n                        duplicate = token;\n                    }\n                    tracker.check_strict();\n                } else {\n                    parameters.add(token.value);\n                    if (is_parameter) {\n                        switch (token.value) {\n                          case \"arguments\":\n                          case \"eval\":\n                          case \"yield\":\n                            if (strict_mode) {\n                                token_error(token, \"Unexpected \" + token.value + \" identifier as parameter inside strict mode\");\n                            }\n                            break;\n                          default:\n                            if (RESERVED_WORDS.has(token.value)) {\n                                unexpected();\n                            }\n                        }\n                    }\n                }\n            },\n            mark_default_assignment: function(token) {\n                if (default_assignment === false) {\n                    default_assignment = token;\n                }\n            },\n            mark_spread: function(token) {\n                if (spread === false) {\n                    spread = token;\n                }\n            },\n            mark_strict_mode: function() {\n                strict_mode = true;\n            },\n            is_strict: function() {\n                return default_assignment !== false || spread !== false || strict_mode;\n            },\n            check_strict: function() {\n                if (tracker.is_strict() && duplicate !== false) {\n                    token_error(duplicate, \"Parameter \" + duplicate.value + \" was used already\");\n                }\n            }\n        };\n\n        return tracker;\n    }\n\n    function parameters(params) {\n        var start = S.token;\n        var used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n\n        expect(\"(\");\n\n        while (!is(\"punc\", \")\")) {\n            var param = parameter(used_parameters);\n            params.push(param);\n\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\") && options.ecma < 8) unexpected();\n            }\n\n            if (param instanceof AST_Expansion) {\n                break;\n            }\n        }\n\n        next();\n    }\n\n    function parameter(used_parameters, symbol_type) {\n        var param;\n        var expand = false;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(true, S.input.has_directive(\"use strict\"));\n        }\n        if (is(\"expand\", \"...\")) {\n            expand = S.token;\n            used_parameters.mark_spread(S.token);\n            next();\n        }\n        param = binding_element(used_parameters, symbol_type);\n\n        if (is(\"operator\", \"=\") && expand === false) {\n            used_parameters.mark_default_assignment(S.token);\n            next();\n            param = new AST_DefaultAssign({\n                start: param.start,\n                left: param,\n                operator: \"=\",\n                right: expression(false),\n                end: S.token\n            });\n        }\n\n        if (expand !== false) {\n            if (!is(\"punc\", \")\")) {\n                unexpected();\n            }\n            param = new AST_Expansion({\n                start: expand,\n                expression: param,\n                end: expand\n            });\n        }\n        used_parameters.check_strict();\n\n        return param;\n    }\n\n    function binding_element(used_parameters, symbol_type) {\n        var elements = [];\n        var first = true;\n        var is_expand = false;\n        var expand_token;\n        var first_token = S.token;\n        if (used_parameters === undefined) {\n            used_parameters = track_used_binding_identifiers(false, S.input.has_directive(\"use strict\"));\n        }\n        symbol_type = symbol_type === undefined ? AST_SymbolFunarg : symbol_type;\n        if (is(\"punc\", \"[\")) {\n            next();\n            while (!is(\"punc\", \"]\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"punc\")) {\n                    switch (S.token.value) {\n                      case \",\":\n                        elements.push(new AST_Hole({\n                            start: S.token,\n                            end: S.token\n                        }));\n                        continue;\n                      case \"]\": // Trailing comma after last element\n                        break;\n                      case \"[\":\n                      case \"{\":\n                        elements.push(binding_element(used_parameters, symbol_type));\n                        break;\n                      default:\n                        unexpected();\n                    }\n                } else if (is(\"name\")) {\n                    used_parameters.add_parameter(S.token);\n                    elements.push(as_symbol(symbol_type));\n                } else {\n                    croak(\"Invalid function parameter\");\n                }\n                if (is(\"operator\", \"=\") && is_expand === false) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1] = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].start,\n                        left: elements[elements.length - 1],\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"]\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                    elements[elements.length - 1] = new AST_Expansion({\n                        start: expand_token,\n                        expression: elements[elements.length - 1],\n                        end: expand_token\n                    });\n                }\n            }\n            expect(\"]\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: true,\n                end: prev()\n            });\n        } else if (is(\"punc\", \"{\")) {\n            next();\n            while (!is(\"punc\", \"}\")) {\n                if (first) {\n                    first = false;\n                } else {\n                    expect(\",\");\n                }\n                if (is(\"expand\", \"...\")) {\n                    is_expand = true;\n                    expand_token = S.token;\n                    used_parameters.mark_spread(S.token);\n                    next();\n                }\n                if (is(\"name\") && (is_token(peek(), \"punc\") || is_token(peek(), \"operator\")) && [\",\", \"}\", \"=\"].includes(peek().value)) {\n                    used_parameters.add_parameter(S.token);\n                    var start = prev();\n                    var value = as_symbol(symbol_type);\n                    if (is_expand) {\n                        elements.push(new AST_Expansion({\n                            start: expand_token,\n                            expression: value,\n                            end: value.end,\n                        }));\n                    } else {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: start,\n                            key: value.name,\n                            value: value,\n                            end: value.end,\n                        }));\n                    }\n                } else if (is(\"punc\", \"}\")) {\n                    continue; // Allow trailing hole\n                } else {\n                    var property_token = S.token;\n                    var property = as_property_name();\n                    if (property === null) {\n                        unexpected(prev());\n                    } else if (prev().type === \"name\" && !is(\"punc\", \":\")) {\n                        elements.push(new AST_ObjectKeyVal({\n                            start: prev(),\n                            key: property,\n                            value: new symbol_type({\n                                start: prev(),\n                                name: property,\n                                end: prev()\n                            }),\n                            end: prev()\n                        }));\n                    } else {\n                        expect(\":\");\n                        elements.push(new AST_ObjectKeyVal({\n                            start: property_token,\n                            quote: property_token.quote,\n                            key: property,\n                            value: binding_element(used_parameters, symbol_type),\n                            end: prev()\n                        }));\n                    }\n                }\n                if (is_expand) {\n                    if (!is(\"punc\", \"}\")) {\n                        croak(\"Rest element must be last element\");\n                    }\n                } else if (is(\"operator\", \"=\")) {\n                    used_parameters.mark_default_assignment(S.token);\n                    next();\n                    elements[elements.length - 1].value = new AST_DefaultAssign({\n                        start: elements[elements.length - 1].value.start,\n                        left: elements[elements.length - 1].value,\n                        operator: \"=\",\n                        right: expression(false),\n                        end: S.token\n                    });\n                }\n            }\n            expect(\"}\");\n            used_parameters.check_strict();\n            return new AST_Destructuring({\n                start: first_token,\n                names: elements,\n                is_array: false,\n                end: prev()\n            });\n        } else if (is(\"name\")) {\n            used_parameters.add_parameter(S.token);\n            return as_symbol(symbol_type);\n        } else {\n            croak(\"Invalid function parameter\");\n        }\n    }\n\n    function params_or_seq_(allow_arrows, maybe_sequence) {\n        var spread_token;\n        var invalid_sequence;\n        var trailing_comma;\n        var a = [];\n        expect(\"(\");\n        while (!is(\"punc\", \")\")) {\n            if (spread_token) unexpected(spread_token);\n            if (is(\"expand\", \"...\")) {\n                spread_token = S.token;\n                if (maybe_sequence) invalid_sequence = S.token;\n                next();\n                a.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(),\n                    end: S.token,\n                }));\n            } else {\n                a.push(expression());\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\")) {\n                    if (options.ecma < 8) unexpected();\n                    trailing_comma = prev();\n                    if (maybe_sequence) invalid_sequence = trailing_comma;\n                }\n            }\n        }\n        expect(\")\");\n        if (allow_arrows && is(\"arrow\", \"=>\")) {\n            if (spread_token && trailing_comma) unexpected(trailing_comma);\n        } else if (invalid_sequence) {\n            unexpected(invalid_sequence);\n        }\n        return a;\n    }\n\n    function _function_body(block, generator, is_async, name, args) {\n        var loop = S.in_loop;\n        var labels = S.labels;\n        var current_generator = S.in_generator;\n        var current_async = S.in_async;\n        ++S.in_function;\n        if (generator)\n            S.in_generator = S.in_function;\n        if (is_async)\n            S.in_async = S.in_function;\n        if (args) parameters(args);\n        if (block)\n            S.in_directives = true;\n        S.in_loop = 0;\n        S.labels = [];\n        if (block) {\n            S.input.push_directives_stack();\n            var a = block_();\n            if (name) _verify_symbol(name);\n            if (args) args.forEach(_verify_symbol);\n            S.input.pop_directives_stack();\n        } else {\n            var a = expression(false);\n        }\n        --S.in_function;\n        S.in_loop = loop;\n        S.labels = labels;\n        S.in_generator = current_generator;\n        S.in_async = current_async;\n        return a;\n    }\n\n    function _await_expression() {\n        // Previous token must be \"await\" and not be interpreted as an identifier\n        if (!is_in_async()) {\n            croak(\"Unexpected await expression outside async function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        // the await expression is parsed as a unary expression in Babel\n        return new AST_Await({\n            start: prev(),\n            end: S.token,\n            expression : maybe_unary(true),\n        });\n    }\n\n    function _yield_expression() {\n        // Previous token must be keyword yield and not be interpret as an identifier\n        if (!is_in_generator()) {\n            croak(\"Unexpected yield expression outside generator function\",\n                S.prev.line, S.prev.col, S.prev.pos);\n        }\n        var start = S.token;\n        var star = false;\n        var has_expression = true;\n\n        // Attempt to get expression or star (and then the mandatory expression)\n        // behind yield on the same line.\n        //\n        // If nothing follows on the same line of the yieldExpression,\n        // it should default to the value `undefined` for yield to return.\n        // In that case, the `undefined` stored as `null` in ast.\n        //\n        // Note 1: It isn't allowed for yield* to close without an expression\n        // Note 2: If there is a nlb between yield and star, it is interpret as\n        //         yield <explicit undefined> <inserted automatic semicolon> *\n        if (can_insert_semicolon() ||\n            (is(\"punc\") && PUNC_AFTER_EXPRESSION.has(S.token.value))) {\n            has_expression = false;\n\n        } else if (is(\"operator\", \"*\")) {\n            star = true;\n            next();\n        }\n\n        return new AST_Yield({\n            start      : start,\n            is_star    : star,\n            expression : has_expression ? expression() : null,\n            end        : prev()\n        });\n    }\n\n    function if_() {\n        var cond = parenthesised(), body = statement(false, false, true), belse = null;\n        if (is(\"keyword\", \"else\")) {\n            next();\n            belse = statement(false, false, true);\n        }\n        return new AST_If({\n            condition   : cond,\n            body        : body,\n            alternative : belse\n        });\n    }\n\n    function block_() {\n        expect(\"{\");\n        var a = [];\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            a.push(statement());\n        }\n        next();\n        return a;\n    }\n\n    function switch_body_() {\n        expect(\"{\");\n        var a = [], cur = null, branch = null, tmp;\n        while (!is(\"punc\", \"}\")) {\n            if (is(\"eof\")) unexpected();\n            if (is(\"keyword\", \"case\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Case({\n                    start      : (tmp = S.token, next(), tmp),\n                    expression : expression(true),\n                    body       : cur\n                });\n                a.push(branch);\n                expect(\":\");\n            } else if (is(\"keyword\", \"default\")) {\n                if (branch) branch.end = prev();\n                cur = [];\n                branch = new AST_Default({\n                    start : (tmp = S.token, next(), expect(\":\"), tmp),\n                    body  : cur\n                });\n                a.push(branch);\n            } else {\n                if (!cur) unexpected();\n                cur.push(statement());\n            }\n        }\n        if (branch) branch.end = prev();\n        next();\n        return a;\n    }\n\n    function try_() {\n        var body = block_(), bcatch = null, bfinally = null;\n        if (is(\"keyword\", \"catch\")) {\n            var start = S.token;\n            next();\n            if (is(\"punc\", \"{\")) {\n                var name = null;\n            } else {\n                expect(\"(\");\n                var name = parameter(undefined, AST_SymbolCatch);\n                expect(\")\");\n            }\n            bcatch = new AST_Catch({\n                start   : start,\n                argname : name,\n                body    : block_(),\n                end     : prev()\n            });\n        }\n        if (is(\"keyword\", \"finally\")) {\n            var start = S.token;\n            next();\n            bfinally = new AST_Finally({\n                start : start,\n                body  : block_(),\n                end   : prev()\n            });\n        }\n        if (!bcatch && !bfinally)\n            croak(\"Missing catch/finally blocks\");\n        return new AST_Try({\n            body     : body,\n            bcatch   : bcatch,\n            bfinally : bfinally\n        });\n    }\n\n    function vardefs(no_in, kind) {\n        var a = [];\n        var def;\n        for (;;) {\n            var sym_type =\n                kind === \"var\" ? AST_SymbolVar :\n                kind === \"const\" ? AST_SymbolConst :\n                kind === \"let\" ? AST_SymbolLet : null;\n            if (is(\"punc\", \"{\") || is(\"punc\", \"[\")) {\n                def = new AST_VarDef({\n                    start: S.token,\n                    name: binding_element(undefined ,sym_type),\n                    value: is(\"operator\", \"=\") ? (expect_token(\"operator\", \"=\"), expression(false, no_in)) : null,\n                    end: prev()\n                });\n            } else {\n                def = new AST_VarDef({\n                    start : S.token,\n                    name  : as_symbol(sym_type),\n                    value : is(\"operator\", \"=\")\n                        ? (next(), expression(false, no_in))\n                        : !no_in && kind === \"const\"\n                            ? croak(\"Missing initializer in const declaration\") : null,\n                    end   : prev()\n                });\n                if (def.name.name == \"import\") croak(\"Unexpected token: import\");\n            }\n            a.push(def);\n            if (!is(\"punc\", \",\"))\n                break;\n            next();\n        }\n        return a;\n    }\n\n    var var_ = function(no_in) {\n        return new AST_Var({\n            start       : prev(),\n            definitions : vardefs(no_in, \"var\"),\n            end         : prev()\n        });\n    };\n\n    var let_ = function(no_in) {\n        return new AST_Let({\n            start       : prev(),\n            definitions : vardefs(no_in, \"let\"),\n            end         : prev()\n        });\n    };\n\n    var const_ = function(no_in) {\n        return new AST_Const({\n            start       : prev(),\n            definitions : vardefs(no_in, \"const\"),\n            end         : prev()\n        });\n    };\n\n    var new_ = function(allow_calls) {\n        var start = S.token;\n        expect_token(\"operator\", \"new\");\n        if (is(\"punc\", \".\")) {\n            next();\n            expect_token(\"name\", \"target\");\n            return subscripts(new AST_NewTarget({\n                start : start,\n                end   : prev()\n            }), allow_calls);\n        }\n        var newexp = expr_atom(false), args;\n        if (is(\"punc\", \"(\")) {\n            next();\n            args = expr_list(\")\", options.ecma >= 8);\n        } else {\n            args = [];\n        }\n        var call = new AST_New({\n            start      : start,\n            expression : newexp,\n            args       : args,\n            end        : prev()\n        });\n        mark_pure(call);\n        return subscripts(call, allow_calls);\n    };\n\n    function as_atom_node() {\n        var tok = S.token, ret;\n        switch (tok.type) {\n          case \"name\":\n            ret = _make_symbol(AST_SymbolRef);\n            break;\n          case \"num\":\n            ret = new AST_Number({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"string\":\n            ret = new AST_String({\n                start : tok,\n                end   : tok,\n                value : tok.value,\n                quote : tok.quote\n            });\n            break;\n          case \"regexp\":\n            ret = new AST_RegExp({ start: tok, end: tok, value: tok.value });\n            break;\n          case \"atom\":\n            switch (tok.value) {\n              case \"false\":\n                ret = new AST_False({ start: tok, end: tok });\n                break;\n              case \"true\":\n                ret = new AST_True({ start: tok, end: tok });\n                break;\n              case \"null\":\n                ret = new AST_Null({ start: tok, end: tok });\n                break;\n            }\n            break;\n        }\n        next();\n        return ret;\n    }\n\n    function to_fun_args(ex, _, __, default_seen_above) {\n        var insert_default = function(ex, default_value) {\n            if (default_value) {\n                return new AST_DefaultAssign({\n                    start: ex.start,\n                    left: ex,\n                    operator: \"=\",\n                    right: default_value,\n                    end: default_value.end\n                });\n            }\n            return ex;\n        };\n        if (ex instanceof AST_Object) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: false,\n                names: ex.properties.map(to_fun_args)\n            }), default_seen_above);\n        } else if (ex instanceof AST_ObjectKeyVal) {\n            ex.value = to_fun_args(ex.value, 0, [ex.key]);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Hole) {\n            return ex;\n        } else if (ex instanceof AST_Destructuring) {\n            ex.names = ex.names.map(to_fun_args);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_SymbolRef) {\n            return insert_default(new AST_SymbolFunarg({\n                name: ex.name,\n                start: ex.start,\n                end: ex.end\n            }), default_seen_above);\n        } else if (ex instanceof AST_Expansion) {\n            ex.expression = to_fun_args(ex.expression);\n            return insert_default(ex, default_seen_above);\n        } else if (ex instanceof AST_Array) {\n            return insert_default(new AST_Destructuring({\n                start: ex.start,\n                end: ex.end,\n                is_array: true,\n                names: ex.elements.map(to_fun_args)\n            }), default_seen_above);\n        } else if (ex instanceof AST_Assign) {\n            return insert_default(to_fun_args(ex.left, undefined, undefined, ex.right), default_seen_above);\n        } else if (ex instanceof AST_DefaultAssign) {\n            ex.left = to_fun_args(ex.left, 0, [ex.left]);\n            return ex;\n        } else {\n            croak(\"Invalid function parameter\", ex.start.line, ex.start.col);\n        }\n    }\n\n    var expr_atom = function(allow_calls, allow_arrows) {\n        if (is(\"operator\", \"new\")) {\n            return new_(allow_calls);\n        }\n        var start = S.token;\n        var peeked;\n        var async = is(\"name\", \"async\")\n            && (peeked = peek()).value != \"[\"\n            && peeked.type != \"arrow\"\n            && as_atom_node();\n        if (is(\"punc\")) {\n            switch (S.token.value) {\n              case \"(\":\n                if (async && !allow_calls) break;\n                var exprs = params_or_seq_(allow_arrows, !async);\n                if (allow_arrows && is(\"arrow\", \"=>\")) {\n                    return arrow_function(start, exprs.map(to_fun_args), !!async);\n                }\n                var ex = async ? new AST_Call({\n                    expression: async,\n                    args: exprs\n                }) : exprs.length == 1 ? exprs[0] : new AST_Sequence({\n                    expressions: exprs\n                });\n                if (ex.start) {\n                    var len = start.comments_before.length;\n                    [].unshift.apply(ex.start.comments_before, start.comments_before);\n                    start.comments_before = ex.start.comments_before;\n                    start.comments_before_length = len;\n                    if (len == 0 && start.comments_before.length > 0) {\n                        var comment = start.comments_before[0];\n                        if (!comment.nlb) {\n                            comment.nlb = start.nlb;\n                            start.nlb = false;\n                        }\n                    }\n                    start.comments_after = ex.start.comments_after;\n                }\n                ex.start = start;\n                var end = prev();\n                if (ex.end) {\n                    end.comments_before = ex.end.comments_before;\n                    [].push.apply(ex.end.comments_after, end.comments_after);\n                    end.comments_after = ex.end.comments_after;\n                }\n                ex.end = end;\n                if (ex instanceof AST_Call) mark_pure(ex);\n                return subscripts(ex, allow_calls);\n              case \"[\":\n                return subscripts(array_(), allow_calls);\n              case \"{\":\n                return subscripts(object_or_destructuring_(), allow_calls);\n            }\n            if (!async) unexpected();\n        }\n        if (allow_arrows && is(\"name\") && is_token(peek(), \"arrow\")) {\n            var param = new AST_SymbolFunarg({\n                name: S.token.value,\n                start: start,\n                end: start,\n            });\n            next();\n            return arrow_function(start, [param], !!async);\n        }\n        if (is(\"keyword\", \"function\")) {\n            next();\n            var func = function_(AST_Function, false, !!async);\n            func.start = start;\n            func.end = prev();\n            return subscripts(func, allow_calls);\n        }\n        if (async) return subscripts(async, allow_calls);\n        if (is(\"keyword\", \"class\")) {\n            next();\n            var cls = class_(AST_ClassExpression);\n            cls.start = start;\n            cls.end = prev();\n            return subscripts(cls, allow_calls);\n        }\n        if (is(\"template_head\")) {\n            return subscripts(template_string(false), allow_calls);\n        }\n        if (ATOMIC_START_TOKEN.has(S.token.type)) {\n            return subscripts(as_atom_node(), allow_calls);\n        }\n        unexpected();\n    };\n\n    function template_string(tagged) {\n        var segments = [], start = S.token;\n\n        segments.push(new AST_TemplateSegment({\n            start: S.token,\n            raw: S.token.raw,\n            value: S.token.value,\n            end: S.token\n        }));\n        while (S.token.end === false) {\n            next();\n            handle_regexp();\n            segments.push(expression(true));\n\n            if (!is_token(\"template_substitution\")) {\n                unexpected();\n            }\n\n            segments.push(new AST_TemplateSegment({\n                start: S.token,\n                raw: S.token.raw,\n                value: S.token.value,\n                end: S.token\n            }));\n        }\n        next();\n\n        return new AST_TemplateString({\n            start: start,\n            segments: segments,\n            end: S.token\n        });\n    }\n\n    function expr_list(closing, allow_trailing_comma, allow_empty) {\n        var first = true, a = [];\n        while (!is(\"punc\", closing)) {\n            if (first) first = false; else expect(\",\");\n            if (allow_trailing_comma && is(\"punc\", closing)) break;\n            if (is(\"punc\", \",\") && allow_empty) {\n                a.push(new AST_Hole({ start: S.token, end: S.token }));\n            } else if (is(\"expand\", \"...\")) {\n                next();\n                a.push(new AST_Expansion({start: prev(), expression: expression(),end: S.token}));\n            } else {\n                a.push(expression(false));\n            }\n        }\n        next();\n        return a;\n    }\n\n    var array_ = embed_tokens(function() {\n        expect(\"[\");\n        return new AST_Array({\n            elements: expr_list(\"]\", !options.strict, true)\n        });\n    });\n\n    var create_accessor = embed_tokens(function(is_generator, is_async) {\n        return function_(AST_Accessor, is_generator, is_async);\n    });\n\n    var object_or_destructuring_ = embed_tokens(function object_or_destructuring_() {\n        var start = S.token, first = true, a = [];\n        expect(\"{\");\n        while (!is(\"punc\", \"}\")) {\n            if (first) first = false; else expect(\",\");\n            if (!options.strict && is(\"punc\", \"}\"))\n                // allow trailing comma\n                break;\n\n            start = S.token;\n            if (start.type == \"expand\") {\n                next();\n                a.push(new AST_Expansion({\n                    start: start,\n                    expression: expression(false),\n                    end: prev(),\n                }));\n                continue;\n            }\n\n            var name = as_property_name();\n            var value;\n\n            // Check property and fetch value\n            if (!is(\"punc\", \":\")) {\n                var concise = concise_method_or_getset(name, start);\n                if (concise) {\n                    a.push(concise);\n                    continue;\n                }\n\n                value = new AST_SymbolRef({\n                    start: prev(),\n                    name: name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected(prev());\n            } else {\n                next(); // `:` - see first condition\n                value = expression(false);\n            }\n\n            // Check for default value and alter value accordingly if necessary\n            if (is(\"operator\", \"=\")) {\n                next();\n                value = new AST_Assign({\n                    start: start,\n                    left: value,\n                    operator: \"=\",\n                    right: expression(false),\n                    end: prev()\n                });\n            }\n\n            // Create property\n            a.push(new AST_ObjectKeyVal({\n                start: start,\n                quote: start.quote,\n                key: name instanceof AST_Node ? name : \"\" + name,\n                value: value,\n                end: prev()\n            }));\n        }\n        next();\n        return new AST_Object({ properties: a });\n    });\n\n    function class_(KindOfClass) {\n        var start, method, class_name, extends_, a = [];\n\n        S.input.push_directives_stack(); // Push directive stack, but not scope stack\n        S.input.add_directive(\"use strict\");\n\n        if (S.token.type == \"name\" && S.token.value != \"extends\") {\n            class_name = as_symbol(KindOfClass === AST_DefClass ? AST_SymbolDefClass : AST_SymbolClass);\n        }\n\n        if (KindOfClass === AST_DefClass && !class_name) {\n            unexpected();\n        }\n\n        if (S.token.value == \"extends\") {\n            next();\n            extends_ = expression(true);\n        }\n\n        expect(\"{\");\n\n        if (is(\"punc\", \";\")) { next(); }  // Leading semicolons are okay in class bodies.\n        while (!is(\"punc\", \"}\")) {\n            start = S.token;\n            method = concise_method_or_getset(as_property_name(), start, true);\n            if (!method) { unexpected(); }\n            a.push(method);\n            if (is(\"punc\", \";\")) { next(); }\n        }\n\n        S.input.pop_directives_stack();\n\n        next();\n\n        return new KindOfClass({\n            start: start,\n            name: class_name,\n            extends: extends_,\n            properties: a,\n            end: prev(),\n        });\n    }\n\n    function concise_method_or_getset(name, start, is_class) {\n        var get_ast = function(name, token) {\n            if (typeof name === \"string\" || typeof name === \"number\") {\n                return new AST_SymbolMethod({\n                    start: token,\n                    name: \"\" + name,\n                    end: prev()\n                });\n            } else if (name === null) {\n                unexpected();\n            }\n            return name;\n        };\n        var is_async = false;\n        var is_static = false;\n        var is_generator = false;\n        var property_token = start;\n        if (is_class && name === \"static\" && !is(\"punc\", \"(\")) {\n            is_static = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === \"async\" && !is(\"punc\", \"(\") && !is(\"punc\", \",\") && !is(\"punc\", \"}\")) {\n            is_async = true;\n            property_token = S.token;\n            name = as_property_name();\n        }\n        if (name === null) {\n            is_generator = true;\n            property_token = S.token;\n            name = as_property_name();\n            if (name === null) {\n                unexpected();\n            }\n        }\n        if (is(\"punc\", \"(\")) {\n            name = get_ast(name, start);\n            var node = new AST_ConciseMethod({\n                start       : start,\n                static      : is_static,\n                is_generator: is_generator,\n                async       : is_async,\n                key         : name,\n                quote       : name instanceof AST_SymbolMethod ?\n                              property_token.quote : undefined,\n                value       : create_accessor(is_generator, is_async),\n                end         : prev()\n            });\n            return node;\n        }\n        property_token = S.token;\n        if (name == \"get\") {\n            if (!is(\"punc\") || is(\"punc\", \"[\")) {\n                name = get_ast(as_property_name(), start);\n                return new AST_ObjectGetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            property_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        } else if (name == \"set\") {\n            if (!is(\"punc\") || is(\"punc\", \"[\")) {\n                name = get_ast(as_property_name(), start);\n                return new AST_ObjectSetter({\n                    start : start,\n                    static: is_static,\n                    key   : name,\n                    quote : name instanceof AST_SymbolMethod ?\n                            property_token.quote : undefined,\n                    value : create_accessor(),\n                    end   : prev()\n                });\n            }\n        }\n    }\n\n    function import_() {\n        var start = prev();\n        var imported_name;\n        var imported_names;\n        if (is(\"name\")) {\n            imported_name = as_symbol(AST_SymbolImport);\n        }\n\n        if (is(\"punc\", \",\")) {\n            next();\n        }\n\n        imported_names = map_names(true);\n\n        if (imported_names || imported_name) {\n            expect_token(\"name\", \"from\");\n        }\n        var mod_str = S.token;\n        if (mod_str.type !== \"string\") {\n            unexpected();\n        }\n        next();\n        return new AST_Import({\n            start: start,\n            imported_name: imported_name,\n            imported_names: imported_names,\n            module_name: new AST_String({\n                start: mod_str,\n                value: mod_str.value,\n                quote: mod_str.quote,\n                end: mod_str,\n            }),\n            end: S.token,\n        });\n    }\n\n    function map_name(is_import) {\n        function make_symbol(type) {\n            return new type({\n                name: as_property_name(),\n                start: prev(),\n                end: prev()\n            });\n        }\n\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var name;\n\n        if (is_import) {\n            foreign_name = make_symbol(foreign_type);\n        } else {\n            name = make_symbol(type);\n        }\n        if (is(\"name\", \"as\")) {\n            next();  // The \"as\" word\n            if (is_import) {\n                name = make_symbol(type);\n            } else {\n                foreign_name = make_symbol(foreign_type);\n            }\n        } else if (is_import) {\n            name = new type(foreign_name);\n        } else {\n            foreign_name = new foreign_type(name);\n        }\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: prev(),\n        });\n    }\n\n    function map_nameAsterisk(is_import, name) {\n        var foreign_type = is_import ? AST_SymbolImportForeign : AST_SymbolExportForeign;\n        var type = is_import ? AST_SymbolImport : AST_SymbolExport;\n        var start = S.token;\n        var foreign_name;\n        var end = prev();\n\n        name = name || new type({\n            name: \"*\",\n            start: start,\n            end: end,\n        });\n\n        foreign_name = new foreign_type({\n            name: \"*\",\n            start: start,\n            end: end,\n        });\n\n        return new AST_NameMapping({\n            start: start,\n            foreign_name: foreign_name,\n            name: name,\n            end: end,\n        });\n    }\n\n    function map_names(is_import) {\n        var names;\n        if (is(\"punc\", \"{\")) {\n            next();\n            names = [];\n            while (!is(\"punc\", \"}\")) {\n                names.push(map_name(is_import));\n                if (is(\"punc\", \",\")) {\n                    next();\n                }\n            }\n            next();\n        } else if (is(\"operator\", \"*\")) {\n            var name;\n            next();\n            if (is_import && is(\"name\", \"as\")) {\n                next();  // The \"as\" word\n                name = as_symbol(is_import ? AST_SymbolImport : AST_SymbolExportForeign);\n            }\n            names = [map_nameAsterisk(is_import, name)];\n        }\n        return names;\n    }\n\n    function export_() {\n        var start = S.token;\n        var is_default;\n        var exported_names;\n\n        if (is(\"keyword\", \"default\")) {\n            is_default = true;\n            next();\n        } else if (exported_names = map_names(false)) {\n            if (is(\"name\", \"from\")) {\n                next();\n\n                var mod_str = S.token;\n                if (mod_str.type !== \"string\") {\n                    unexpected();\n                }\n                next();\n\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    module_name: new AST_String({\n                        start: mod_str,\n                        value: mod_str.value,\n                        quote: mod_str.quote,\n                        end: mod_str,\n                    }),\n                    end: prev(),\n                });\n            } else {\n                return new AST_Export({\n                    start: start,\n                    is_default: is_default,\n                    exported_names: exported_names,\n                    end: prev(),\n                });\n            }\n        }\n\n        var node;\n        var exported_value;\n        var exported_definition;\n        if (is(\"punc\", \"{\")\n            || is_default\n                && (is(\"keyword\", \"class\") || is(\"keyword\", \"function\"))\n                && is_token(peek(), \"punc\")) {\n            exported_value = expression(false);\n            semicolon();\n        } else if ((node = statement(is_default)) instanceof AST_Definitions && is_default) {\n            unexpected(node.start);\n        } else if (node instanceof AST_Definitions || node instanceof AST_Lambda || node instanceof AST_DefClass) {\n            exported_definition = node;\n        } else if (node instanceof AST_SimpleStatement) {\n            exported_value = node.body;\n        } else {\n            unexpected(node.start);\n        }\n\n        return new AST_Export({\n            start: start,\n            is_default: is_default,\n            exported_value: exported_value,\n            exported_definition: exported_definition,\n            end: prev(),\n        });\n    }\n\n    function as_property_name() {\n        var tmp = S.token;\n        switch (tmp.type) {\n          case \"punc\":\n            if (tmp.value === \"[\") {\n                next();\n                var ex = expression(false);\n                expect(\"]\");\n                return ex;\n            } else unexpected(tmp);\n          case \"operator\":\n            if (tmp.value === \"*\") {\n                next();\n                return null;\n            }\n            if (![\"delete\", \"in\", \"instanceof\", \"new\", \"typeof\", \"void\"].includes(tmp.value)) {\n                unexpected(tmp);\n            }\n          case \"name\":\n            if (tmp.value == \"yield\") {\n                if (is_in_generator()) {\n                    token_error(tmp, \"Yield cannot be used as identifier inside generators\");\n                } else if (!is_token(peek(), \"punc\", \":\")\n                    && !is_token(peek(), \"punc\", \"(\")\n                    && S.input.has_directive(\"use strict\")) {\n                    token_error(tmp, \"Unexpected yield identifier inside strict mode\");\n                }\n            }\n          case \"string\":\n          case \"num\":\n          case \"keyword\":\n          case \"atom\":\n            next();\n            return tmp.value;\n          default:\n            unexpected(tmp);\n        }\n    }\n\n    function as_name() {\n        var tmp = S.token;\n        if (tmp.type != \"name\") unexpected();\n        next();\n        return tmp.value;\n    }\n\n    function _make_symbol(type) {\n        var name = S.token.value;\n        return new (name == \"this\" ? AST_This :\n                    name == \"super\" ? AST_Super :\n                    type)({\n            name  : String(name),\n            start : S.token,\n            end   : S.token\n        });\n    }\n\n    function _verify_symbol(sym) {\n        var name = sym.name;\n        if (is_in_generator() && name == \"yield\") {\n            token_error(sym.start, \"Yield cannot be used as identifier inside generators\");\n        }\n        if (S.input.has_directive(\"use strict\")) {\n            if (name == \"yield\") {\n                token_error(sym.start, \"Unexpected yield identifier inside strict mode\");\n            }\n            if (sym instanceof AST_SymbolDeclaration && (name == \"arguments\" || name == \"eval\")) {\n                token_error(sym.start, \"Unexpected \" + name + \" in strict mode\");\n            }\n        }\n    }\n\n    function as_symbol(type, noerror) {\n        if (!is(\"name\")) {\n            if (!noerror) croak(\"Name expected\");\n            return null;\n        }\n        var sym = _make_symbol(type);\n        _verify_symbol(sym);\n        next();\n        return sym;\n    }\n\n    function mark_pure(call) {\n        var start = call.start;\n        var comments = start.comments_before;\n        var i = HOP(start, \"comments_before_length\") ? start.comments_before_length : comments.length;\n        while (--i >= 0) {\n            var comment = comments[i];\n            if (/[@#]__PURE__/.test(comment.value)) {\n                call.pure = comment;\n                break;\n            }\n        }\n    }\n\n    var subscripts = function(expr, allow_calls) {\n        var start = expr.start;\n        if (is(\"punc\", \".\")) {\n            next();\n            return subscripts(new AST_Dot({\n                start      : start,\n                expression : expr,\n                property   : as_name(),\n                end        : prev()\n            }), allow_calls);\n        }\n        if (is(\"punc\", \"[\")) {\n            next();\n            var prop = expression(true);\n            expect(\"]\");\n            return subscripts(new AST_Sub({\n                start      : start,\n                expression : expr,\n                property   : prop,\n                end        : prev()\n            }), allow_calls);\n        }\n        if (allow_calls && is(\"punc\", \"(\")) {\n            next();\n            var call = new AST_Call({\n                start      : start,\n                expression : expr,\n                args       : call_args(),\n                end        : prev()\n            });\n            mark_pure(call);\n            return subscripts(call, true);\n        }\n        if (is(\"template_head\")) {\n            return subscripts(new AST_PrefixedTemplateString({\n                start: start,\n                prefix: expr,\n                template_string: template_string(true),\n                end: prev()\n            }), allow_calls);\n        }\n        return expr;\n    };\n\n    var call_args = embed_tokens(function _call_args() {\n        var args = [];\n        while (!is(\"punc\", \")\")) {\n            if (is(\"expand\", \"...\")) {\n                next();\n                args.push(new AST_Expansion({\n                    start: prev(),\n                    expression: expression(false),\n                    end: prev()\n                }));\n            } else {\n                args.push(expression(false));\n            }\n            if (!is(\"punc\", \")\")) {\n                expect(\",\");\n                if (is(\"punc\", \")\") && options.ecma < 8) unexpected();\n            }\n        }\n        next();\n        return args;\n    });\n\n    var maybe_unary = function(allow_calls, allow_arrows) {\n        var start = S.token;\n        if (start.type == \"name\" && start.value == \"await\") {\n            if (is_in_async()) {\n                next();\n                return _await_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected await identifier inside strict mode\");\n            }\n        }\n        if (is(\"operator\") && UNARY_PREFIX.has(start.value)) {\n            next();\n            handle_regexp();\n            var ex = make_unary(AST_UnaryPrefix, start, maybe_unary(allow_calls));\n            ex.start = start;\n            ex.end = prev();\n            return ex;\n        }\n        var val = expr_atom(allow_calls, allow_arrows);\n        while (is(\"operator\") && UNARY_POSTFIX.has(S.token.value) && !has_newline_before(S.token)) {\n            if (val instanceof AST_Arrow) unexpected();\n            val = make_unary(AST_UnaryPostfix, S.token, val);\n            val.start = start;\n            val.end = S.token;\n            next();\n        }\n        return val;\n    };\n\n    function make_unary(ctor, token, expr) {\n        var op = token.value;\n        switch (op) {\n          case \"++\":\n          case \"--\":\n            if (!is_assignable(expr))\n                croak(\"Invalid use of \" + op + \" operator\", token.line, token.col, token.pos);\n            break;\n          case \"delete\":\n            if (expr instanceof AST_SymbolRef && S.input.has_directive(\"use strict\"))\n                croak(\"Calling delete on expression not allowed in strict mode\", expr.start.line, expr.start.col, expr.start.pos);\n            break;\n        }\n        return new ctor({ operator: op, expression: expr });\n    }\n\n    var expr_op = function(left, min_prec, no_in) {\n        var op = is(\"operator\") ? S.token.value : null;\n        if (op == \"in\" && no_in) op = null;\n        if (op == \"**\" && left instanceof AST_UnaryPrefix\n            /* unary token in front not allowed - parenthesis required */\n            && !is_token(left.start, \"punc\", \"(\")\n            && left.operator !== \"--\" && left.operator !== \"++\")\n                unexpected(left.start);\n        var prec = op != null ? PRECEDENCE[op] : null;\n        if (prec != null && (prec > min_prec || (op === \"**\" && min_prec === prec))) {\n            next();\n            var right = expr_op(maybe_unary(true), prec, no_in);\n            return expr_op(new AST_Binary({\n                start    : left.start,\n                left     : left,\n                operator : op,\n                right    : right,\n                end      : right.end\n            }), min_prec, no_in);\n        }\n        return left;\n    };\n\n    function expr_ops(no_in) {\n        return expr_op(maybe_unary(true, true), 0, no_in);\n    }\n\n    var maybe_conditional = function(no_in) {\n        var start = S.token;\n        var expr = expr_ops(no_in);\n        if (is(\"operator\", \"?\")) {\n            next();\n            var yes = expression(false);\n            expect(\":\");\n            return new AST_Conditional({\n                start       : start,\n                condition   : expr,\n                consequent  : yes,\n                alternative : expression(false, no_in),\n                end         : prev()\n            });\n        }\n        return expr;\n    };\n\n    function is_assignable(expr) {\n        return expr instanceof AST_PropAccess || expr instanceof AST_SymbolRef;\n    }\n\n    function to_destructuring(node) {\n        if (node instanceof AST_Object) {\n            node = new AST_Destructuring({\n                start: node.start,\n                names: node.properties.map(to_destructuring),\n                is_array: false,\n                end: node.end\n            });\n        } else if (node instanceof AST_Array) {\n            var names = [];\n\n            for (var i = 0; i < node.elements.length; i++) {\n                // Only allow expansion as last element\n                if (node.elements[i] instanceof AST_Expansion) {\n                    if (i + 1 !== node.elements.length) {\n                        token_error(node.elements[i].start, \"Spread must the be last element in destructuring array\");\n                    }\n                    node.elements[i].expression = to_destructuring(node.elements[i].expression);\n                }\n\n                names.push(to_destructuring(node.elements[i]));\n            }\n\n            node = new AST_Destructuring({\n                start: node.start,\n                names: names,\n                is_array: true,\n                end: node.end\n            });\n        } else if (node instanceof AST_ObjectProperty) {\n            node.value = to_destructuring(node.value);\n        } else if (node instanceof AST_Assign) {\n            node = new AST_DefaultAssign({\n                start: node.start,\n                left: node.left,\n                operator: \"=\",\n                right: node.right,\n                end: node.end\n            });\n        }\n        return node;\n    }\n\n    // In ES6, AssignmentExpression can also be an ArrowFunction\n    var maybe_assign = function(no_in) {\n        handle_regexp();\n        var start = S.token;\n\n        if (start.type == \"name\" && start.value == \"yield\") {\n            if (is_in_generator()) {\n                next();\n                return _yield_expression();\n            } else if (S.input.has_directive(\"use strict\")) {\n                token_error(S.token, \"Unexpected yield identifier inside strict mode\");\n            }\n        }\n\n        var left = maybe_conditional(no_in);\n        var val = S.token.value;\n\n        if (is(\"operator\") && ASSIGNMENT.has(val)) {\n            if (is_assignable(left) || (left = to_destructuring(left)) instanceof AST_Destructuring) {\n                next();\n                return new AST_Assign({\n                    start    : start,\n                    left     : left,\n                    operator : val,\n                    right    : maybe_assign(no_in),\n                    end      : prev()\n                });\n            }\n            croak(\"Invalid assignment\");\n        }\n        return left;\n    };\n\n    var expression = function(commas, no_in) {\n        var start = S.token;\n        var exprs = [];\n        while (true) {\n            exprs.push(maybe_assign(no_in));\n            if (!commas || !is(\"punc\", \",\")) break;\n            next();\n            commas = true;\n        }\n        return exprs.length == 1 ? exprs[0] : new AST_Sequence({\n            start       : start,\n            expressions : exprs,\n            end         : peek()\n        });\n    };\n\n    function in_loop(cont) {\n        ++S.in_loop;\n        var ret = cont();\n        --S.in_loop;\n        return ret;\n    }\n\n    if (options.expression) {\n        return expression(true);\n    }\n\n    return (function() {\n        var start = S.token;\n        var body = [];\n        S.input.push_directives_stack();\n        if (options.module) S.input.add_directive(\"use strict\");\n        while (!is(\"eof\"))\n            body.push(statement());\n        S.input.pop_directives_stack();\n        var end = prev();\n        var toplevel = options.toplevel;\n        if (toplevel) {\n            toplevel.body = toplevel.body.concat(body);\n            toplevel.end = end;\n        } else {\n            toplevel = new AST_Toplevel({ start: start, body: body, end: end });\n        }\n        return toplevel;\n    })();\n\n}\n\nexport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_identifier_string,\n    is_surrogate_pair_head,\n    is_surrogate_pair_tail,\n    js_error,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n    RESERVED_WORDS,\n    tokenizer,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    HOP,\n    MAP,\n    noop,\n    string_template,\n} from \"./utils.js\";\nimport { parse } from \"./parse.js\";\n\nfunction DEFNODE(type, props, methods, base) {\n    if (arguments.length < 4) base = AST_Node;\n    if (!props) props = [];\n    else props = props.split(/\\s+/);\n    var self_props = props;\n    if (base && base.PROPS)\n        props = props.concat(base.PROPS);\n    var code = \"return function AST_\" + type + \"(props){ if (props) { \";\n    for (var i = props.length; --i >= 0;) {\n        code += \"this.\" + props[i] + \" = props.\" + props[i] + \";\";\n    }\n    var proto = base && new base;\n    if (proto && proto.initialize || (methods && methods.initialize))\n        code += \"this.initialize();\";\n    code += \"}}\";\n    var ctor = new Function(code)();\n    if (proto) {\n        ctor.prototype = proto;\n        ctor.BASE = base;\n    }\n    if (base) base.SUBCLASSES.push(ctor);\n    ctor.prototype.CTOR = ctor;\n    ctor.PROPS = props || null;\n    ctor.SELF_PROPS = self_props;\n    ctor.SUBCLASSES = [];\n    if (type) {\n        ctor.prototype.TYPE = ctor.TYPE = type;\n    }\n    if (methods) for (i in methods) if (HOP(methods, i)) {\n        if (/^\\$/.test(i)) {\n            ctor[i.substr(1)] = methods[i];\n        } else {\n            ctor.prototype[i] = methods[i];\n        }\n    }\n    ctor.DEFMETHOD = function(name, method) {\n        this.prototype[name] = method;\n    };\n    return ctor;\n}\n\nvar AST_Token = DEFNODE(\"Token\", \"type value line col pos endline endcol endpos nlb comments_before comments_after file raw\", {\n}, null);\n\nvar AST_Node = DEFNODE(\"Node\", \"start end\", {\n    _clone: function(deep) {\n        if (deep) {\n            var self = this.clone();\n            return self.transform(new TreeTransformer(function(node) {\n                if (node !== self) {\n                    return node.clone(true);\n                }\n            }));\n        }\n        return new this.CTOR(this);\n    },\n    clone: function(deep) {\n        return this._clone(deep);\n    },\n    $documentation: \"Base class of all AST nodes\",\n    $propdoc: {\n        start: \"[AST_Token] The first token of this node\",\n        end: \"[AST_Token] The last token of this node\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this);\n    },\n    walk: function(visitor) {\n        return this._walk(visitor); // not sure the indirection will be any help\n    }\n}, null);\n\nAST_Node.warn_function = null;\nAST_Node.warn = function(txt, props) {\n    if (AST_Node.warn_function)\n        AST_Node.warn_function(string_template(txt, props));\n};\n\n/* -----[ statements ]----- */\n\nvar AST_Statement = DEFNODE(\"Statement\", null, {\n    $documentation: \"Base class of all statements\",\n});\n\nvar AST_Debugger = DEFNODE(\"Debugger\", null, {\n    $documentation: \"Represents a debugger statement\",\n}, AST_Statement);\n\nvar AST_Directive = DEFNODE(\"Directive\", \"value quote\", {\n    $documentation: \"Represents a directive, like \\\"use strict\\\";\",\n    $propdoc: {\n        value: \"[string] The value of this directive as a plain string (it's not an AST_String!)\",\n        quote: \"[string] the original quote character\"\n    },\n}, AST_Statement);\n\nvar AST_SimpleStatement = DEFNODE(\"SimpleStatement\", \"body\", {\n    $documentation: \"A statement consisting of an expression, i.e. a = 1 + 2\",\n    $propdoc: {\n        body: \"[AST_Node] an expression node (should not be instanceof AST_Statement)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n        });\n    }\n}, AST_Statement);\n\nfunction walk_body(node, visitor) {\n    var body = node.body;\n    if (body instanceof AST_Node) {\n        body._walk(visitor);\n    } else for (var i = 0, len = body.length; i < len; i++) {\n        body[i]._walk(visitor);\n    }\n}\n\nfunction clone_block_scope(deep) {\n    var clone = this._clone(deep);\n    if (this.block_scope) {\n        // TODO this is sometimes undefined during compression.\n        // But it should always have a value!\n        clone.block_scope = this.block_scope.clone();\n    }\n    return clone;\n}\n\nvar AST_Block = DEFNODE(\"Block\", \"body block_scope\", {\n    $documentation: \"A body of statements (usually braced)\",\n    $propdoc: {\n        body: \"[AST_Statement*] an array of statements\",\n        block_scope: \"[AST_Scope] the block scope\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n        });\n    },\n    clone: clone_block_scope\n}, AST_Statement);\n\nvar AST_BlockStatement = DEFNODE(\"BlockStatement\", null, {\n    $documentation: \"A block statement\",\n}, AST_Block);\n\nvar AST_EmptyStatement = DEFNODE(\"EmptyStatement\", null, {\n    $documentation: \"The empty statement (empty block or simply a semicolon)\"\n}, AST_Statement);\n\nvar AST_StatementWithBody = DEFNODE(\"StatementWithBody\", \"body\", {\n    $documentation: \"Base class for all statements that contain one nested body: `For`, `ForIn`, `Do`, `While`, `With`\",\n    $propdoc: {\n        body: \"[AST_Statement] the body; this should always be present, even if it's an AST_EmptyStatement\"\n    }\n}, AST_Statement);\n\nvar AST_LabeledStatement = DEFNODE(\"LabeledStatement\", \"label\", {\n    $documentation: \"Statement with a label\",\n    $propdoc: {\n        label: \"[AST_Label] a label definition\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.label._walk(visitor);\n            this.body._walk(visitor);\n        });\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (deep) {\n            var label = node.label;\n            var def = this.label;\n            node.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_LoopControl\n                    && node.label && node.label.thedef === def) {\n                    node.label.thedef = label;\n                    label.references.push(node);\n                }\n            }));\n        }\n        return node;\n    }\n}, AST_StatementWithBody);\n\nvar AST_IterationStatement = DEFNODE(\"IterationStatement\", \"block_scope\", {\n    $documentation: \"Internal class.  All loops inherit from it.\",\n    $propdoc: {\n        block_scope: \"[AST_Scope] the block scope for this iteration statement.\"\n    },\n    clone: clone_block_scope\n}, AST_StatementWithBody);\n\nvar AST_DWLoop = DEFNODE(\"DWLoop\", \"condition\", {\n    $documentation: \"Base class for do/while statements\",\n    $propdoc: {\n        condition: \"[AST_Node] the loop condition.  Should not be instanceof AST_Statement\"\n    }\n}, AST_IterationStatement);\n\nvar AST_Do = DEFNODE(\"Do\", null, {\n    $documentation: \"A `do` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.body._walk(visitor);\n            this.condition._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_While = DEFNODE(\"While\", null, {\n    $documentation: \"A `while` statement\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_DWLoop);\n\nvar AST_For = DEFNODE(\"For\", \"init condition step\", {\n    $documentation: \"A `for` statement\",\n    $propdoc: {\n        init: \"[AST_Node?] the `for` initialization code, or null if empty\",\n        condition: \"[AST_Node?] the `for` termination clause, or null if empty\",\n        step: \"[AST_Node?] the `for` update clause, or null if empty\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.init) this.init._walk(visitor);\n            if (this.condition) this.condition._walk(visitor);\n            if (this.step) this.step._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForIn = DEFNODE(\"ForIn\", \"init object\", {\n    $documentation: \"A `for ... in` statement\",\n    $propdoc: {\n        init: \"[AST_Node] the `for/in` initialization code\",\n        object: \"[AST_Node] the object that we're looping through\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.init._walk(visitor);\n            this.object._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_IterationStatement);\n\nvar AST_ForOf = DEFNODE(\"ForOf\", \"await\", {\n    $documentation: \"A `for ... of` statement\",\n}, AST_ForIn);\n\nvar AST_With = DEFNODE(\"With\", \"expression\", {\n    $documentation: \"A `with` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `with` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.body._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ scope and functions ]----- */\n\nvar AST_Scope = DEFNODE(\"Scope\", \"variables functions uses_with uses_eval parent_scope enclosed cname\", {\n    $documentation: \"Base class for all statements introducing a lexical scope\",\n    $propdoc: {\n        variables: \"[Map/S] a map of name -> SymbolDef for all variables/functions defined in this scope\",\n        functions: \"[Map/S] like `variables`, but only lists function declarations\",\n        uses_with: \"[boolean/S] tells whether this scope uses the `with` statement\",\n        uses_eval: \"[boolean/S] tells whether this scope contains a direct call to the global `eval`\",\n        parent_scope: \"[AST_Scope?/S] link to the parent scope\",\n        enclosed: \"[SymbolDef*/S] a list of all symbol definitions that are accessed from this scope or any subscopes\",\n        cname: \"[integer/S] current index for mangling variables (used internally by the mangler)\",\n    },\n    get_defun_scope: function() {\n        var self = this;\n        while (self.is_block_scope()) {\n            self = self.parent_scope;\n        }\n        return self;\n    },\n    clone: function(deep) {\n        var node = this._clone(deep);\n        if (this.variables) node.variables = new Map(this.variables);\n        if (this.functions) node.functions = new Map(this.functions);\n        if (this.enclosed) node.enclosed = this.enclosed.slice();\n        return node;\n    },\n    pinned: function() {\n        return this.uses_eval || this.uses_with;\n    }\n}, AST_Block);\n\nvar AST_Toplevel = DEFNODE(\"Toplevel\", \"globals\", {\n    $documentation: \"The toplevel scope\",\n    $propdoc: {\n        globals: \"[Map/S] a map of name -> SymbolDef for all undeclared names\",\n    },\n    wrap_commonjs: function(name) {\n        var body = this.body;\n        var wrapped_tl = \"(function(exports){'$ORIG';})(typeof \" + name + \"=='undefined'?(\" + name + \"={}):\" + name + \");\";\n        wrapped_tl = parse(wrapped_tl);\n        wrapped_tl = wrapped_tl.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n        return wrapped_tl;\n    },\n    wrap_enclose: function(args_values) {\n        if (typeof args_values != \"string\") args_values = \"\";\n        var index = args_values.indexOf(\":\");\n        if (index < 0) index = args_values.length;\n        var body = this.body;\n        return parse([\n            \"(function(\",\n            args_values.slice(0, index),\n            '){\"$ORIG\"})(',\n            args_values.slice(index + 1),\n            \")\"\n        ].join(\"\")).transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Directive && node.value == \"$ORIG\") {\n                return MAP.splice(body);\n            }\n        }));\n    }\n}, AST_Scope);\n\nvar AST_Expansion = DEFNODE(\"Expansion\", \"expression\", {\n    $documentation: \"An expandible argument, such as ...rest, a splat, such as [1,2,...all], or an expansion in a variable declaration, such as var [first, ...rest] = list\",\n    $propdoc: {\n        expression: \"[AST_Node] the thing to be expanded\"\n    },\n    _walk: function(visitor) {\n        var self = this;\n        return visitor._visit(this, function() {\n            self.expression.walk(visitor);\n        });\n    }\n});\n\nvar AST_Lambda = DEFNODE(\"Lambda\", \"name argnames uses_arguments is_generator async\", {\n    $documentation: \"Base class for functions\",\n    $propdoc: {\n        name: \"[AST_SymbolDeclaration?] the name of this function\",\n        argnames: \"[AST_SymbolFunarg|AST_Destructuring|AST_Expansion|AST_DefaultAssign*] array of function arguments, destructurings, or expanding arguments\",\n        uses_arguments: \"[boolean/S] tells whether this function accesses the arguments array\",\n        is_generator: \"[boolean] is this a generator method\",\n        async: \"[boolean] is this method async\",\n    },\n    args_as_names: function () {\n        var out = [];\n        for (var i = 0; i < this.argnames.length; i++) {\n            if (this.argnames[i] instanceof AST_Destructuring) {\n                out = out.concat(this.argnames[i].all_symbols());\n            } else {\n                out.push(this.argnames[i]);\n            }\n        }\n        return out;\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) this.name._walk(visitor);\n            var argnames = this.argnames;\n            for (var i = 0, len = argnames.length; i < len; i++) {\n                argnames[i]._walk(visitor);\n            }\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Scope);\n\nvar AST_Accessor = DEFNODE(\"Accessor\", null, {\n    $documentation: \"A setter/getter function.  The `name` property is always null.\"\n}, AST_Lambda);\n\nvar AST_Function = DEFNODE(\"Function\", \"inlined\", {\n    $documentation: \"A function expression\"\n}, AST_Lambda);\n\nvar AST_Arrow = DEFNODE(\"Arrow\", \"inlined\", {\n    $documentation: \"An ES6 Arrow function ((a) => b)\"\n}, AST_Lambda);\n\nvar AST_Defun = DEFNODE(\"Defun\", \"inlined\", {\n    $documentation: \"A function definition\"\n}, AST_Lambda);\n\n/* -----[ DESTRUCTURING ]----- */\nvar AST_Destructuring = DEFNODE(\"Destructuring\", \"names is_array\", {\n    $documentation: \"A destructuring of several names. Used in destructuring assignment and with destructuring function argument names\",\n    $propdoc: {\n        \"names\": \"[AST_Node*] Array of properties or elements\",\n        \"is_array\": \"[Boolean] Whether the destructuring represents an object or array\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.names.forEach(function(name) {\n                name._walk(visitor);\n            });\n        });\n    },\n    all_symbols: function() {\n        var out = [];\n        this.walk(new TreeWalker(function (node) {\n            if (node instanceof AST_Symbol) {\n                out.push(node);\n            }\n            if (node instanceof AST_Expansion) {\n                out.push(node.expression);\n            }\n        }));\n        return out;\n    }\n});\n\nvar AST_PrefixedTemplateString = DEFNODE(\"PrefixedTemplateString\", \"template_string prefix\", {\n    $documentation: \"A templatestring with a prefix, such as String.raw`foobarbaz`\",\n    $propdoc: {\n        template_string: \"[AST_TemplateString] The template string\",\n        prefix: \"[AST_SymbolRef|AST_PropAccess] The prefix, which can be a symbol such as `foo` or a dotted expression such as `String.raw`.\"\n    },\n    _walk: function(visitor) {\n        this.prefix._walk(visitor);\n        this.template_string._walk(visitor);\n    }\n});\n\nvar AST_TemplateString = DEFNODE(\"TemplateString\", \"segments\", {\n    $documentation: \"A template string literal\",\n    $propdoc: {\n        segments: \"[AST_Node*] One or more segments, starting with AST_TemplateSegment. AST_Node may follow AST_TemplateSegment, but each AST_Node must be followed by AST_TemplateSegment.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.segments.forEach(function(seg) {\n                seg._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_TemplateSegment = DEFNODE(\"TemplateSegment\", \"value raw\", {\n    $documentation: \"A segment of a template string literal\",\n    $propdoc: {\n        value: \"Content of the segment\",\n        raw: \"Raw content of the segment\"\n    }\n});\n\n/* -----[ JUMPS ]----- */\n\nvar AST_Jump = DEFNODE(\"Jump\", null, {\n    $documentation: \"Base class for “jumps” (for now that's `return`, `throw`, `break` and `continue`)\"\n}, AST_Statement);\n\nvar AST_Exit = DEFNODE(\"Exit\", \"value\", {\n    $documentation: \"Base class for “exits” (`return` and `throw`)\",\n    $propdoc: {\n        value: \"[AST_Node?] the value returned or thrown by this statement; could be null for AST_Return\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.value && function() {\n            this.value._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Return = DEFNODE(\"Return\", null, {\n    $documentation: \"A `return` statement\"\n}, AST_Exit);\n\nvar AST_Throw = DEFNODE(\"Throw\", null, {\n    $documentation: \"A `throw` statement\"\n}, AST_Exit);\n\nvar AST_LoopControl = DEFNODE(\"LoopControl\", \"label\", {\n    $documentation: \"Base class for loop control statements (`break` and `continue`)\",\n    $propdoc: {\n        label: \"[AST_LabelRef?] the label, or null if none\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.label && function() {\n            this.label._walk(visitor);\n        });\n    }\n}, AST_Jump);\n\nvar AST_Break = DEFNODE(\"Break\", null, {\n    $documentation: \"A `break` statement\"\n}, AST_LoopControl);\n\nvar AST_Continue = DEFNODE(\"Continue\", null, {\n    $documentation: \"A `continue` statement\"\n}, AST_LoopControl);\n\n/* -----[ IF ]----- */\n\nvar AST_If = DEFNODE(\"If\", \"condition alternative\", {\n    $documentation: \"A `if` statement\",\n    $propdoc: {\n        condition: \"[AST_Node] the `if` condition\",\n        alternative: \"[AST_Statement?] the `else` part, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.body._walk(visitor);\n            if (this.alternative) this.alternative._walk(visitor);\n        });\n    }\n}, AST_StatementWithBody);\n\n/* -----[ SWITCH ]----- */\n\nvar AST_Switch = DEFNODE(\"Switch\", \"expression\", {\n    $documentation: \"A `switch` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the `switch` “discriminant”\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_SwitchBranch = DEFNODE(\"SwitchBranch\", null, {\n    $documentation: \"Base class for `switch` branches\",\n}, AST_Block);\n\nvar AST_Default = DEFNODE(\"Default\", null, {\n    $documentation: \"A `default` switch branch\",\n}, AST_SwitchBranch);\n\nvar AST_Case = DEFNODE(\"Case\", \"expression\", {\n    $documentation: \"A `case` switch branch\",\n    $propdoc: {\n        expression: \"[AST_Node] the `case` expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_SwitchBranch);\n\n/* -----[ EXCEPTIONS ]----- */\n\nvar AST_Try = DEFNODE(\"Try\", \"bcatch bfinally\", {\n    $documentation: \"A `try` statement\",\n    $propdoc: {\n        bcatch: \"[AST_Catch?] the catch block, or null if not present\",\n        bfinally: \"[AST_Finally?] the finally block, or null if not present\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            walk_body(this, visitor);\n            if (this.bcatch) this.bcatch._walk(visitor);\n            if (this.bfinally) this.bfinally._walk(visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Catch = DEFNODE(\"Catch\", \"argname\", {\n    $documentation: \"A `catch` node; only makes sense as part of a `try` statement\",\n    $propdoc: {\n        argname: \"[AST_SymbolCatch|AST_Destructuring|AST_Expansion|AST_DefaultAssign] symbol for the exception\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.argname) this.argname._walk(visitor);\n            walk_body(this, visitor);\n        });\n    }\n}, AST_Block);\n\nvar AST_Finally = DEFNODE(\"Finally\", null, {\n    $documentation: \"A `finally` node; only makes sense as part of a `try` statement\"\n}, AST_Block);\n\n/* -----[ VAR/CONST ]----- */\n\nvar AST_Definitions = DEFNODE(\"Definitions\", \"definitions\", {\n    $documentation: \"Base class for `var` or `const` nodes (variable declarations/initializations)\",\n    $propdoc: {\n        definitions: \"[AST_VarDef*] array of variable definitions\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var definitions = this.definitions;\n            for (var i = 0, len = definitions.length; i < len; i++) {\n                definitions[i]._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_Var = DEFNODE(\"Var\", null, {\n    $documentation: \"A `var` statement\"\n}, AST_Definitions);\n\nvar AST_Let = DEFNODE(\"Let\", null, {\n    $documentation: \"A `let` statement\"\n}, AST_Definitions);\n\nvar AST_Const = DEFNODE(\"Const\", null, {\n    $documentation: \"A `const` statement\"\n}, AST_Definitions);\n\nvar AST_NameMapping = DEFNODE(\"NameMapping\", \"foreign_name name\", {\n    $documentation: \"The part of the export/import statement that declare names from a module.\",\n    $propdoc: {\n        foreign_name: \"[AST_SymbolExportForeign|AST_SymbolImportForeign] The name being exported/imported (as specified in the module)\",\n        name: \"[AST_SymbolExport|AST_SymbolImport] The name as it is visible to this module.\"\n    },\n    _walk: function (visitor) {\n        return visitor._visit(this, function() {\n            this.foreign_name._walk(visitor);\n            this.name._walk(visitor);\n        });\n    }\n});\n\nvar AST_Import = DEFNODE(\"Import\", \"imported_name imported_names module_name\", {\n    $documentation: \"An `import` statement\",\n    $propdoc: {\n        imported_name: \"[AST_SymbolImport] The name of the variable holding the module's default export.\",\n        imported_names: \"[AST_NameMapping*] The names of non-default imported variables\",\n        module_name: \"[AST_String] String literal describing where this module came from\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.imported_name) {\n                this.imported_name._walk(visitor);\n            }\n            if (this.imported_names) {\n                this.imported_names.forEach(function(name_import) {\n                    name_import._walk(visitor);\n                });\n            }\n            this.module_name._walk(visitor);\n        });\n    }\n});\n\nvar AST_Export = DEFNODE(\"Export\", \"exported_definition exported_value is_default exported_names module_name\", {\n    $documentation: \"An `export` statement\",\n    $propdoc: {\n        exported_definition: \"[AST_Defun|AST_Definitions|AST_DefClass?] An exported definition\",\n        exported_value: \"[AST_Node?] An exported value\",\n        exported_names: \"[AST_NameMapping*?] List of exported names\",\n        module_name: \"[AST_String?] Name of the file to load exports from\",\n        is_default: \"[Boolean] Whether this is the default exported value of this module\"\n    },\n    _walk: function (visitor) {\n        visitor._visit(this, function () {\n            if (this.exported_definition) {\n                this.exported_definition._walk(visitor);\n            }\n            if (this.exported_value) {\n                this.exported_value._walk(visitor);\n            }\n            if (this.exported_names) {\n                this.exported_names.forEach(function(name_export) {\n                    name_export._walk(visitor);\n                });\n            }\n            if (this.module_name) {\n                this.module_name._walk(visitor);\n            }\n        });\n    }\n}, AST_Statement);\n\nvar AST_VarDef = DEFNODE(\"VarDef\", \"name value\", {\n    $documentation: \"A variable declaration; only appears in a AST_Definitions node\",\n    $propdoc: {\n        name: \"[AST_Destructuring|AST_SymbolConst|AST_SymbolLet|AST_SymbolVar] name of the variable\",\n        value: \"[AST_Node?] initializer, or null of there's no initializer\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.name._walk(visitor);\n            if (this.value) this.value._walk(visitor);\n        });\n    }\n});\n\n/* -----[ OTHER ]----- */\n\nvar AST_Call = DEFNODE(\"Call\", \"expression args\", {\n    $documentation: \"A function call expression\",\n    $propdoc: {\n        expression: \"[AST_Node] expression to invoke as function\",\n        args: \"[AST_Node*] array of arguments\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var args = this.args;\n            for (var i = 0, len = args.length; i < len; i++) {\n                args[i]._walk(visitor);\n            }\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_New = DEFNODE(\"New\", null, {\n    $documentation: \"An object instantiation.  Derives from a function call since it has exactly the same properties\"\n}, AST_Call);\n\nvar AST_Sequence = DEFNODE(\"Sequence\", \"expressions\", {\n    $documentation: \"A sequence expression (comma-separated expressions)\",\n    $propdoc: {\n        expressions: \"[AST_Node*] array of expressions (at least two)\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expressions.forEach(function(node) {\n                node._walk(visitor);\n            });\n        });\n    }\n});\n\nvar AST_PropAccess = DEFNODE(\"PropAccess\", \"expression property\", {\n    $documentation: \"Base class for property access expressions, i.e. `a.foo` or `a[\\\"foo\\\"]`\",\n    $propdoc: {\n        expression: \"[AST_Node] the “container” expression\",\n        property: \"[AST_Node|string] the property to access.  For AST_Dot this is always a plain string, while for AST_Sub it's an arbitrary AST_Node\"\n    }\n});\n\nvar AST_Dot = DEFNODE(\"Dot\", \"quote\", {\n    $documentation: \"A dotted property access expression\",\n    $propdoc: {\n        quote: \"[string] the original quote character when transformed from AST_Sub\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Sub = DEFNODE(\"Sub\", null, {\n    $documentation: \"Index-style property access, i.e. `a[\\\"foo\\\"]`\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n            this.property._walk(visitor);\n        });\n    }\n}, AST_PropAccess);\n\nvar AST_Unary = DEFNODE(\"Unary\", \"operator expression\", {\n    $documentation: \"Base class for unary expressions\",\n    $propdoc: {\n        operator: \"[string] the operator\",\n        expression: \"[AST_Node] expression that this unary operator applies to\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_UnaryPrefix = DEFNODE(\"UnaryPrefix\", null, {\n    $documentation: \"Unary prefix expression, i.e. `typeof i` or `++i`\"\n}, AST_Unary);\n\nvar AST_UnaryPostfix = DEFNODE(\"UnaryPostfix\", null, {\n    $documentation: \"Unary postfix expression, i.e. `i++`\"\n}, AST_Unary);\n\nvar AST_Binary = DEFNODE(\"Binary\", \"operator left right\", {\n    $documentation: \"Binary expression, i.e. `a + b`\",\n    $propdoc: {\n        left: \"[AST_Node] left-hand side expression\",\n        operator: \"[string] the operator\",\n        right: \"[AST_Node] right-hand side expression\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.left._walk(visitor);\n            this.right._walk(visitor);\n        });\n    }\n});\n\nvar AST_Conditional = DEFNODE(\"Conditional\", \"condition consequent alternative\", {\n    $documentation: \"Conditional expression using the ternary operator, i.e. `a ? b : c`\",\n    $propdoc: {\n        condition: \"[AST_Node]\",\n        consequent: \"[AST_Node]\",\n        alternative: \"[AST_Node]\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.condition._walk(visitor);\n            this.consequent._walk(visitor);\n            this.alternative._walk(visitor);\n        });\n    }\n});\n\nvar AST_Assign = DEFNODE(\"Assign\", null, {\n    $documentation: \"An assignment expression — `a = b + 5`\",\n}, AST_Binary);\n\nvar AST_DefaultAssign = DEFNODE(\"DefaultAssign\", null, {\n    $documentation: \"A default assignment expression like in `(a = 3) => a`\"\n}, AST_Binary);\n\n/* -----[ LITERALS ]----- */\n\nvar AST_Array = DEFNODE(\"Array\", \"elements\", {\n    $documentation: \"An array literal\",\n    $propdoc: {\n        elements: \"[AST_Node*] array of elements\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var elements = this.elements;\n            for (var i = 0, len = elements.length; i < len; i++) {\n                elements[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_Object = DEFNODE(\"Object\", \"properties\", {\n    $documentation: \"An object literal\",\n    $propdoc: {\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            var properties = this.properties;\n            for (var i = 0, len = properties.length; i < len; i++) {\n                properties[i]._walk(visitor);\n            }\n        });\n    }\n});\n\nvar AST_ObjectProperty = DEFNODE(\"ObjectProperty\", \"key value\", {\n    $documentation: \"Base class for literal object properties\",\n    $propdoc: {\n        key: \"[string|AST_Node] property name. For ObjectKeyVal this is a string. For getters, setters and computed property this is an AST_Node.\",\n        value: \"[AST_Node] property value.  For getters and setters this is an AST_Accessor.\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.key instanceof AST_Node)\n                this.key._walk(visitor);\n            this.value._walk(visitor);\n        });\n    }\n});\n\nvar AST_ObjectKeyVal = DEFNODE(\"ObjectKeyVal\", \"quote\", {\n    $documentation: \"A key: value object property\",\n    $propdoc: {\n        quote: \"[string] the original quote character\"\n    }\n}, AST_ObjectProperty);\n\nvar AST_ObjectSetter = DEFNODE(\"ObjectSetter\", \"quote static\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static setter (classes only)\"\n    },\n    $documentation: \"An object setter property\",\n}, AST_ObjectProperty);\n\nvar AST_ObjectGetter = DEFNODE(\"ObjectGetter\", \"quote static\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] whether this is a static getter (classes only)\"\n    },\n    $documentation: \"An object getter property\",\n}, AST_ObjectProperty);\n\nvar AST_ConciseMethod = DEFNODE(\"ConciseMethod\", \"quote static is_generator async\", {\n    $propdoc: {\n        quote: \"[string|undefined] the original quote character, if any\",\n        static: \"[boolean] is this method static (classes only)\",\n        is_generator: \"[boolean] is this a generator method\",\n        async: \"[boolean] is this method async\",\n    },\n    $documentation: \"An ES6 concise method inside an object or class\"\n}, AST_ObjectProperty);\n\nvar AST_Class = DEFNODE(\"Class\", \"name extends properties inlined\", {\n    $propdoc: {\n        name: \"[AST_SymbolClass|AST_SymbolDefClass?] optional class name.\",\n        extends: \"[AST_Node]? optional parent class\",\n        properties: \"[AST_ObjectProperty*] array of properties\"\n    },\n    $documentation: \"An ES6 class\",\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            if (this.name) {\n                this.name._walk(visitor);\n            }\n            if (this.extends) {\n                this.extends._walk(visitor);\n            }\n            this.properties.forEach(function(prop) {\n                prop._walk(visitor);\n            });\n        });\n    },\n}, AST_Scope);\n\nvar AST_DefClass = DEFNODE(\"DefClass\", null, {\n    $documentation: \"A class definition\",\n}, AST_Class);\n\nvar AST_ClassExpression = DEFNODE(\"ClassExpression\", null, {\n    $documentation: \"A class expression.\"\n}, AST_Class);\n\nvar AST_Symbol = DEFNODE(\"Symbol\", \"scope name thedef\", {\n    $propdoc: {\n        name: \"[string] name of this symbol\",\n        scope: \"[AST_Scope/S] the current scope (not necessarily the definition scope)\",\n        thedef: \"[SymbolDef/S] the definition of this symbol\"\n    },\n    $documentation: \"Base class for all symbols\"\n});\n\nvar AST_NewTarget = DEFNODE(\"NewTarget\", null, {\n    $documentation: \"A reference to new.target\"\n});\n\nvar AST_SymbolDeclaration = DEFNODE(\"SymbolDeclaration\", \"init\", {\n    $documentation: \"A declaration symbol (symbol in var/const, function name or argument, symbol in catch)\",\n}, AST_Symbol);\n\nvar AST_SymbolVar = DEFNODE(\"SymbolVar\", null, {\n    $documentation: \"Symbol defining a variable\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolBlockDeclaration = DEFNODE(\"SymbolBlockDeclaration\", null, {\n    $documentation: \"Base class for block-scoped declaration symbols\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolConst = DEFNODE(\"SymbolConst\", null, {\n    $documentation: \"A constant declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolLet = DEFNODE(\"SymbolLet\", null, {\n    $documentation: \"A block-scoped `let` declaration\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolFunarg = DEFNODE(\"SymbolFunarg\", null, {\n    $documentation: \"Symbol naming a function argument\",\n}, AST_SymbolVar);\n\nvar AST_SymbolDefun = DEFNODE(\"SymbolDefun\", null, {\n    $documentation: \"Symbol defining a function\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolMethod = DEFNODE(\"SymbolMethod\", null, {\n    $documentation: \"Symbol in an object defining a method\",\n}, AST_Symbol);\n\nvar AST_SymbolLambda = DEFNODE(\"SymbolLambda\", null, {\n    $documentation: \"Symbol naming a function expression\",\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolDefClass = DEFNODE(\"SymbolDefClass\", null, {\n    $documentation: \"Symbol naming a class's name in a class declaration. Lexically scoped to its containing scope, and accessible within the class.\"\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolClass = DEFNODE(\"SymbolClass\", null, {\n    $documentation: \"Symbol naming a class's name. Lexically scoped to the class.\"\n}, AST_SymbolDeclaration);\n\nvar AST_SymbolCatch = DEFNODE(\"SymbolCatch\", null, {\n    $documentation: \"Symbol naming the exception in catch\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImport = DEFNODE(\"SymbolImport\", null, {\n    $documentation: \"Symbol referring to an imported name\",\n}, AST_SymbolBlockDeclaration);\n\nvar AST_SymbolImportForeign = DEFNODE(\"SymbolImportForeign\", null, {\n    $documentation: \"A symbol imported from a module, but it is defined in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_Label = DEFNODE(\"Label\", \"references\", {\n    $documentation: \"Symbol naming a label (declaration)\",\n    $propdoc: {\n        references: \"[AST_LoopControl*] a list of nodes referring to this label\"\n    },\n    initialize: function() {\n        this.references = [];\n        this.thedef = this;\n    }\n}, AST_Symbol);\n\nvar AST_SymbolRef = DEFNODE(\"SymbolRef\", null, {\n    $documentation: \"Reference to some symbol (not definition/declaration)\",\n}, AST_Symbol);\n\nvar AST_SymbolExport = DEFNODE(\"SymbolExport\", null, {\n    $documentation: \"Symbol referring to a name to export\",\n}, AST_SymbolRef);\n\nvar AST_SymbolExportForeign = DEFNODE(\"SymbolExportForeign\", null, {\n    $documentation: \"A symbol exported from this module, but it is used in the other module, and its real name is irrelevant for this module's purposes\",\n}, AST_Symbol);\n\nvar AST_LabelRef = DEFNODE(\"LabelRef\", null, {\n    $documentation: \"Reference to a label symbol\",\n}, AST_Symbol);\n\nvar AST_This = DEFNODE(\"This\", null, {\n    $documentation: \"The `this` symbol\",\n}, AST_Symbol);\n\nvar AST_Super = DEFNODE(\"Super\", null, {\n    $documentation: \"The `super` symbol\",\n}, AST_This);\n\nvar AST_Constant = DEFNODE(\"Constant\", null, {\n    $documentation: \"Base class for all constants\",\n    getValue: function() {\n        return this.value;\n    }\n});\n\nvar AST_String = DEFNODE(\"String\", \"value quote\", {\n    $documentation: \"A string literal\",\n    $propdoc: {\n        value: \"[string] the contents of this string\",\n        quote: \"[string] the original quote character\"\n    }\n}, AST_Constant);\n\nvar AST_Number = DEFNODE(\"Number\", \"value literal\", {\n    $documentation: \"A number literal\",\n    $propdoc: {\n        value: \"[number] the numeric value\",\n        literal: \"[string] numeric value as string (optional)\"\n    }\n}, AST_Constant);\n\nvar AST_RegExp = DEFNODE(\"RegExp\", \"value\", {\n    $documentation: \"A regexp literal\",\n    $propdoc: {\n        value: \"[RegExp] the actual regexp\",\n    }\n}, AST_Constant);\n\nvar AST_Atom = DEFNODE(\"Atom\", null, {\n    $documentation: \"Base class for atoms\",\n}, AST_Constant);\n\nvar AST_Null = DEFNODE(\"Null\", null, {\n    $documentation: \"The `null` atom\",\n    value: null\n}, AST_Atom);\n\nvar AST_NaN = DEFNODE(\"NaN\", null, {\n    $documentation: \"The impossible value\",\n    value: 0/0\n}, AST_Atom);\n\nvar AST_Undefined = DEFNODE(\"Undefined\", null, {\n    $documentation: \"The `undefined` value\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Hole = DEFNODE(\"Hole\", null, {\n    $documentation: \"A hole in an array\",\n    value: (function() {}())\n}, AST_Atom);\n\nvar AST_Infinity = DEFNODE(\"Infinity\", null, {\n    $documentation: \"The `Infinity` value\",\n    value: 1/0\n}, AST_Atom);\n\nvar AST_Boolean = DEFNODE(\"Boolean\", null, {\n    $documentation: \"Base class for booleans\",\n}, AST_Atom);\n\nvar AST_False = DEFNODE(\"False\", null, {\n    $documentation: \"The `false` atom\",\n    value: false\n}, AST_Boolean);\n\nvar AST_True = DEFNODE(\"True\", null, {\n    $documentation: \"The `true` atom\",\n    value: true\n}, AST_Boolean);\n\nvar AST_Await = DEFNODE(\"Await\", \"expression\", {\n    $documentation: \"An `await` statement\",\n    $propdoc: {\n        expression: \"[AST_Node] the mandatory expression being awaited\",\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\nvar AST_Yield = DEFNODE(\"Yield\", \"expression is_star\", {\n    $documentation: \"A `yield` statement\",\n    $propdoc: {\n        expression: \"[AST_Node?] the value returned or thrown by this statement; could be null (representing undefined) but only when is_star is set to false\",\n        is_star: \"[Boolean] Whether this is a yield or yield* statement\"\n    },\n    _walk: function(visitor) {\n        return visitor._visit(this, this.expression && function() {\n            this.expression._walk(visitor);\n        });\n    }\n});\n\n/* -----[ TreeWalker ]----- */\n\nfunction TreeWalker(callback) {\n    this.visit = callback;\n    this.stack = [];\n    this.directives = Object.create(null);\n}\nTreeWalker.prototype = {\n    _visit: function(node, descend) {\n        this.push(node);\n        var ret = this.visit(node, descend ? function() {\n            descend.call(node);\n        } : noop);\n        if (!ret && descend) {\n            descend.call(node);\n        }\n        this.pop();\n        return ret;\n    },\n    parent: function(n) {\n        return this.stack[this.stack.length - 2 - (n || 0)];\n    },\n    push: function(node) {\n        if (node instanceof AST_Lambda) {\n            this.directives = Object.create(this.directives);\n        } else if (node instanceof AST_Directive && !this.directives[node.value]) {\n            this.directives[node.value] = node;\n        } else if (node instanceof AST_Class) {\n            this.directives = Object.create(this.directives);\n            if (!this.directives[\"use strict\"]) {\n                this.directives[\"use strict\"] = node;\n            }\n        }\n        this.stack.push(node);\n    },\n    pop: function() {\n        var node = this.stack.pop();\n        if (node instanceof AST_Lambda || node instanceof AST_Class) {\n            this.directives = Object.getPrototypeOf(this.directives);\n        }\n    },\n    self: function() {\n        return this.stack[this.stack.length - 1];\n    },\n    find_parent: function(type) {\n        var stack = this.stack;\n        for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof type) return x;\n        }\n    },\n    has_directive: function(type) {\n        var dir = this.directives[type];\n        if (dir) return dir;\n        var node = this.stack[this.stack.length - 1];\n        if (node instanceof AST_Scope && node.body) {\n            for (var i = 0; i < node.body.length; ++i) {\n                var st = node.body[i];\n                if (!(st instanceof AST_Directive)) break;\n                if (st.value == type) return st;\n            }\n        }\n    },\n    loopcontrol_target: function(node) {\n        var stack = this.stack;\n        if (node.label) for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_LabeledStatement && x.label.name == node.label.name)\n                return x.body;\n        } else for (var i = stack.length; --i >= 0;) {\n            var x = stack[i];\n            if (x instanceof AST_IterationStatement\n                || node instanceof AST_Break && x instanceof AST_Switch)\n                return x;\n        }\n    }\n};\n\n// Tree transformer helpers.\nfunction TreeTransformer(before, after) {\n    TreeWalker.call(this);\n    this.before = before;\n    this.after = after;\n}\nTreeTransformer.prototype = new TreeWalker;\n\nexport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Jump,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_NaN,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeTransformer,\n    TreeWalker,\n    walk_body,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    AST_Array,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_Conditional,\n    AST_Definitions,\n    AST_Destructuring,\n    AST_Do,\n    AST_Dot,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_If,\n    AST_Import,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Object,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Sub,\n    AST_Switch,\n    AST_TemplateString,\n    AST_Try,\n    AST_Unary,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\nimport {\n    MAP,\n    noop,\n} from \"./utils.js\";\n\n(function() {\n\n    function _(node, descend) {\n        node.DEFMETHOD(\"transform\", function(tw, in_list) {\n            var x, y;\n            tw.push(this);\n            if (tw.before) x = tw.before(this, descend, in_list);\n            if (x === undefined) {\n                x = this;\n                descend(x, tw);\n                if (tw.after) {\n                    y = tw.after(x, in_list);\n                    if (y !== undefined) x = y;\n                }\n            }\n            tw.pop();\n            return x;\n        });\n    }\n\n    function do_list(list, tw) {\n        return MAP(list, function(node) {\n            return node.transform(tw, true);\n        });\n    }\n\n    _(AST_Node, noop);\n\n    _(AST_LabeledStatement, function(self, tw) {\n        self.label = self.label.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_SimpleStatement, function(self, tw) {\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_Block, function(self, tw) {\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Do, function(self, tw) {\n        self.body = self.body.transform(tw);\n        self.condition = self.condition.transform(tw);\n    });\n\n    _(AST_While, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_For, function(self, tw) {\n        if (self.init) self.init = self.init.transform(tw);\n        if (self.condition) self.condition = self.condition.transform(tw);\n        if (self.step) self.step = self.step.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_ForIn, function(self, tw) {\n        self.init = self.init.transform(tw);\n        self.object = self.object.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_With, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = self.body.transform(tw);\n    });\n\n    _(AST_Exit, function(self, tw) {\n        if (self.value) self.value = self.value.transform(tw);\n    });\n\n    _(AST_LoopControl, function(self, tw) {\n        if (self.label) self.label = self.label.transform(tw);\n    });\n\n    _(AST_If, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.body = self.body.transform(tw);\n        if (self.alternative) self.alternative = self.alternative.transform(tw);\n    });\n\n    _(AST_Switch, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Case, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Try, function(self, tw) {\n        self.body = do_list(self.body, tw);\n        if (self.bcatch) self.bcatch = self.bcatch.transform(tw);\n        if (self.bfinally) self.bfinally = self.bfinally.transform(tw);\n    });\n\n    _(AST_Catch, function(self, tw) {\n        if (self.argname) self.argname = self.argname.transform(tw);\n        self.body = do_list(self.body, tw);\n    });\n\n    _(AST_Definitions, function(self, tw) {\n        self.definitions = do_list(self.definitions, tw);\n    });\n\n    _(AST_VarDef, function(self, tw) {\n        self.name = self.name.transform(tw);\n        if (self.value) self.value = self.value.transform(tw);\n    });\n\n    _(AST_Destructuring, function(self, tw) {\n        self.names = do_list(self.names, tw);\n    });\n\n    _(AST_Lambda, function(self, tw) {\n        if (self.name) self.name = self.name.transform(tw);\n        self.argnames = do_list(self.argnames, tw);\n        if (self.body instanceof AST_Node) {\n            self.body = self.body.transform(tw);\n        } else {\n            self.body = do_list(self.body, tw);\n        }\n    });\n\n    _(AST_Call, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.args = do_list(self.args, tw);\n    });\n\n    _(AST_Sequence, function(self, tw) {\n        self.expressions = do_list(self.expressions, tw);\n    });\n\n    _(AST_Dot, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Sub, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n        self.property = self.property.transform(tw);\n    });\n\n    _(AST_Yield, function(self, tw) {\n        if (self.expression) self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Await, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Unary, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_Binary, function(self, tw) {\n        self.left = self.left.transform(tw);\n        self.right = self.right.transform(tw);\n    });\n\n    _(AST_Conditional, function(self, tw) {\n        self.condition = self.condition.transform(tw);\n        self.consequent = self.consequent.transform(tw);\n        self.alternative = self.alternative.transform(tw);\n    });\n\n    _(AST_Array, function(self, tw) {\n        self.elements = do_list(self.elements, tw);\n    });\n\n    _(AST_Object, function(self, tw) {\n        self.properties = do_list(self.properties, tw);\n    });\n\n    _(AST_ObjectProperty, function(self, tw) {\n        if (self.key instanceof AST_Node) {\n            self.key = self.key.transform(tw);\n        }\n        self.value = self.value.transform(tw);\n    });\n\n    _(AST_Class, function(self, tw) {\n        if (self.name) self.name = self.name.transform(tw);\n        if (self.extends) self.extends = self.extends.transform(tw);\n        self.properties = do_list(self.properties, tw);\n    });\n\n    _(AST_Expansion, function(self, tw) {\n        self.expression = self.expression.transform(tw);\n    });\n\n    _(AST_NameMapping, function(self, tw) {\n        self.foreign_name = self.foreign_name.transform(tw);\n        self.name = self.name.transform(tw);\n    });\n\n    _(AST_Import, function(self, tw) {\n        if (self.imported_name) self.imported_name = self.imported_name.transform(tw);\n        if (self.imported_names) do_list(self.imported_names, tw);\n        self.module_name = self.module_name.transform(tw);\n    });\n\n    _(AST_Export, function(self, tw) {\n        if (self.exported_definition) self.exported_definition = self.exported_definition.transform(tw);\n        if (self.exported_value) self.exported_value = self.exported_value.transform(tw);\n        if (self.exported_names) do_list(self.exported_names, tw);\n        if (self.module_name) self.module_name = self.module_name.transform(tw);\n    });\n\n    _(AST_TemplateString, function(self, tw) {\n        self.segments = do_list(self.segments, tw);\n    });\n\n    _(AST_PrefixedTemplateString, function(self, tw) {\n        self.prefix = self.prefix.transform(tw);\n        self.template_string = self.template_string.transform(tw);\n    });\n\n})();\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    all,\n    defaults,\n    first_in_statement,\n    makePredicate,\n    noop,\n    repeat_string,\n    return_false,\n    return_true,\n} from \"./utils.js\";\n\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Toplevel,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeWalker,\n} from \"./ast.js\";\nimport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_identifier_string,\n    is_surrogate_pair_head,\n    is_surrogate_pair_tail,\n    PRECEDENCE,\n    RESERVED_WORDS,\n} from \"./parse.js\";\n\nvar EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\n\nfunction is_some_comments(comment) {\n    // multiline comment\n    return comment.type == \"comment2\" && /@preserve|@license|@cc_on/i.test(comment.value);\n}\n\nfunction OutputStream(options) {\n\n    var readonly = !options;\n    options = defaults(options, {\n        ascii_only       : false,\n        beautify         : false,\n        braces           : false,\n        comments         : false,\n        ecma             : 5,\n        ie8              : false,\n        indent_level     : 4,\n        indent_start     : 0,\n        inline_script    : true,\n        keep_quoted_props: false,\n        max_line_len     : false,\n        preamble         : null,\n        quote_keys       : false,\n        quote_style      : 0,\n        safari10         : false,\n        semicolons       : true,\n        shebang          : true,\n        shorthand        : undefined,\n        source_map       : null,\n        webkit           : false,\n        width            : 80,\n        wrap_iife        : false,\n    }, true);\n\n    if (options.shorthand === undefined)\n        options.shorthand = options.ecma > 5;\n\n    // Convert comment option to RegExp if neccessary and set up comments filter\n    var comment_filter = return_false; // Default case, throw all comments away\n    if (options.comments) {\n        var comments = options.comments;\n        if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n            var regex_pos = options.comments.lastIndexOf(\"/\");\n            comments = new RegExp(\n                options.comments.substr(1, regex_pos - 1),\n                options.comments.substr(regex_pos + 1)\n            );\n        }\n        if (comments instanceof RegExp) {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments.test(comment.value);\n            };\n        } else if (typeof comments === \"function\") {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments(this, comment);\n            };\n        } else if (comments === \"some\") {\n            comment_filter = is_some_comments;\n        } else { // NOTE includes \"all\" option\n            comment_filter = return_true;\n        }\n    }\n\n    var indentation = 0;\n    var current_col = 0;\n    var current_line = 1;\n    var current_pos = 0;\n    var OUTPUT = \"\";\n\n    var to_utf8 = options.ascii_only ? function(str, identifier) {\n        if (options.ecma >= 6) {\n            str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function(ch) {\n                var code = get_full_char_code(ch, 0).toString(16);\n                return \"\\\\u{\" + code + \"}\";\n            });\n        }\n        return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n            var code = ch.charCodeAt(0).toString(16);\n            if (code.length <= 2 && !identifier) {\n                while (code.length < 2) code = \"0\" + code;\n                return \"\\\\x\" + code;\n            } else {\n                while (code.length < 4) code = \"0\" + code;\n                return \"\\\\u\" + code;\n            }\n        });\n    } : function(str) {\n        var s = \"\";\n        for (var i = 0, len = str.length; i < len; i++) {\n            if (is_surrogate_pair_head(str[i]) && !is_surrogate_pair_tail(str[i + 1])\n                || is_surrogate_pair_tail(str[i]) && !is_surrogate_pair_head(str[i - 1])) {\n                s += \"\\\\u\" + str.charCodeAt(i).toString(16);\n            } else {\n                s += str[i];\n            }\n        }\n        return s;\n    };\n\n    function make_string(str, quote) {\n        var dq = 0, sq = 0;\n        str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,\n          function(s, i) {\n            switch (s) {\n              case '\"': ++dq; return '\"';\n              case \"'\": ++sq; return \"'\";\n              case \"\\\\\": return \"\\\\\\\\\";\n              case \"\\n\": return \"\\\\n\";\n              case \"\\r\": return \"\\\\r\";\n              case \"\\t\": return \"\\\\t\";\n              case \"\\b\": return \"\\\\b\";\n              case \"\\f\": return \"\\\\f\";\n              case \"\\x0B\": return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n              case \"\\u2028\": return \"\\\\u2028\";\n              case \"\\u2029\": return \"\\\\u2029\";\n              case \"\\ufeff\": return \"\\\\ufeff\";\n              case \"\\0\":\n                  return /[0-9]/.test(get_full_char(str, i+1)) ? \"\\\\x00\" : \"\\\\0\";\n            }\n            return s;\n        });\n        function quote_single() {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n        function quote_double() {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n        function quote_template() {\n            return \"`\" + str.replace(/`/g, \"\\\\`\") + \"`\";\n        }\n        str = to_utf8(str);\n        if (quote === \"`\") return quote_template();\n        switch (options.quote_style) {\n          case 1:\n            return quote_single();\n          case 2:\n            return quote_double();\n          case 3:\n            return quote == \"'\" ? quote_single() : quote_double();\n          default:\n            return dq > sq ? quote_single() : quote_double();\n        }\n    }\n\n    function encode_string(str, quote) {\n        var ret = make_string(str, quote);\n        if (options.inline_script) {\n            ret = ret.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n            ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n            ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n        }\n        return ret;\n    }\n\n    function make_name(name) {\n        name = name.toString();\n        name = to_utf8(name, true);\n        return name;\n    }\n\n    function make_indent(back) {\n        return repeat_string(\" \", options.indent_start + indentation - back * options.indent_level);\n    }\n\n    /* -----[ beautification/minification ]----- */\n\n    var has_parens = false;\n    var might_need_space = false;\n    var might_need_semicolon = false;\n    var might_add_newline = 0;\n    var need_newline_indented = false;\n    var need_space = false;\n    var newline_insert = -1;\n    var last = \"\";\n    var mapping_token, mapping_name, mappings = options.source_map && [];\n\n    var do_add_mapping = mappings ? function() {\n        mappings.forEach(function(mapping) {\n            try {\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    !mapping.name && mapping.token.type == \"name\" ? mapping.token.value : mapping.name\n                );\n            } catch(ex) {\n                mapping.token.file != null && AST_Node.warn(\"Couldn't figure out mapping for {file}:{line},{col} → {cline},{ccol} [{name}]\", {\n                    file: mapping.token.file,\n                    line: mapping.token.line,\n                    col: mapping.token.col,\n                    cline: mapping.line,\n                    ccol: mapping.col,\n                    name: mapping.name || \"\"\n                });\n            }\n        });\n        mappings = [];\n    } : noop;\n\n    var ensure_line_len = options.max_line_len ? function() {\n        if (current_col > options.max_line_len) {\n            if (might_add_newline) {\n                var left = OUTPUT.slice(0, might_add_newline);\n                var right = OUTPUT.slice(might_add_newline);\n                if (mappings) {\n                    var delta = right.length - current_col;\n                    mappings.forEach(function(mapping) {\n                        mapping.line++;\n                        mapping.col += delta;\n                    });\n                }\n                OUTPUT = left + \"\\n\" + right;\n                current_line++;\n                current_pos++;\n                current_col = right.length;\n            }\n            if (current_col > options.max_line_len) {\n                AST_Node.warn(\"Output exceeds {max_line_len} characters\", options);\n            }\n        }\n        if (might_add_newline) {\n            might_add_newline = 0;\n            do_add_mapping();\n        }\n    } : noop;\n\n    var requireSemicolonChars = makePredicate(\"( [ + * / - , . `\");\n\n    function print(str) {\n        str = String(str);\n        var ch = get_full_char(str, 0);\n        if (need_newline_indented && ch) {\n            need_newline_indented = false;\n            if (ch !== \"\\n\") {\n                print(\"\\n\");\n                indent();\n            }\n        }\n        if (need_space && ch) {\n            need_space = false;\n            if (!/[\\s;})]/.test(ch)) {\n                space();\n            }\n        }\n        newline_insert = -1;\n        var prev = last.charAt(last.length - 1);\n        if (might_need_semicolon) {\n            might_need_semicolon = false;\n\n            if (prev === \":\" && ch === \"}\" || (!ch || !\";}\".includes(ch)) && prev !== \";\") {\n                if (options.semicolons || requireSemicolonChars.has(ch)) {\n                    OUTPUT += \";\";\n                    current_col++;\n                    current_pos++;\n                } else {\n                    ensure_line_len();\n                    if (current_col > 0) {\n                        OUTPUT += \"\\n\";\n                        current_pos++;\n                        current_line++;\n                        current_col = 0;\n                    }\n\n                    if (/^\\s+$/.test(str)) {\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        might_need_semicolon = true;\n                    }\n                }\n\n                if (!options.beautify)\n                    might_need_space = false;\n            }\n        }\n\n        if (might_need_space) {\n            if ((is_identifier_char(prev)\n                    && (is_identifier_char(ch) || ch == \"\\\\\"))\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last)\n            ) {\n                OUTPUT += \" \";\n                current_col++;\n                current_pos++;\n            }\n            might_need_space = false;\n        }\n\n        if (mapping_token) {\n            mappings.push({\n                token: mapping_token,\n                name: mapping_name,\n                line: current_line,\n                col: current_col\n            });\n            mapping_token = false;\n            if (!might_add_newline) do_add_mapping();\n        }\n\n        OUTPUT += str;\n        has_parens = str[str.length - 1] == \"(\";\n        current_pos += str.length;\n        var a = str.split(/\\r?\\n/), n = a.length - 1;\n        current_line += n;\n        current_col += a[0].length;\n        if (n > 0) {\n            ensure_line_len();\n            current_col = a[n].length;\n        }\n        last = str;\n    }\n\n    var star = function() {\n        print(\"*\");\n    };\n\n    var space = options.beautify ? function() {\n        print(\" \");\n    } : function() {\n        might_need_space = true;\n    };\n\n    var indent = options.beautify ? function(half) {\n        if (options.beautify) {\n            print(make_indent(half ? 0.5 : 0));\n        }\n    } : noop;\n\n    var with_indent = options.beautify ? function(col, cont) {\n        if (col === true) col = next_indent();\n        var save_indentation = indentation;\n        indentation = col;\n        var ret = cont();\n        indentation = save_indentation;\n        return ret;\n    } : function(col, cont) { return cont(); };\n\n    var newline = options.beautify ? function() {\n        if (newline_insert < 0) return print(\"\\n\");\n        if (OUTPUT[newline_insert] != \"\\n\") {\n            OUTPUT = OUTPUT.slice(0, newline_insert) + \"\\n\" + OUTPUT.slice(newline_insert);\n            current_pos++;\n            current_line++;\n        }\n        newline_insert++;\n    } : options.max_line_len ? function() {\n        ensure_line_len();\n        might_add_newline = OUTPUT.length;\n    } : noop;\n\n    var semicolon = options.beautify ? function() {\n        print(\";\");\n    } : function() {\n        might_need_semicolon = true;\n    };\n\n    function force_semicolon() {\n        might_need_semicolon = false;\n        print(\";\");\n    }\n\n    function next_indent() {\n        return indentation + options.indent_level;\n    }\n\n    function with_block(cont) {\n        var ret;\n        print(\"{\");\n        newline();\n        with_indent(next_indent(), function() {\n            ret = cont();\n        });\n        indent();\n        print(\"}\");\n        return ret;\n    }\n\n    function with_parens(cont) {\n        print(\"(\");\n        //XXX: still nice to have that for argument lists\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\")\");\n        return ret;\n    }\n\n    function with_square(cont) {\n        print(\"[\");\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\"]\");\n        return ret;\n    }\n\n    function comma() {\n        print(\",\");\n        space();\n    }\n\n    function colon() {\n        print(\":\");\n        space();\n    }\n\n    var add_mapping = mappings ? function(token, name) {\n        mapping_token = token;\n        mapping_name = name;\n    } : noop;\n\n    function get() {\n        if (might_add_newline) {\n            ensure_line_len();\n        }\n        return OUTPUT;\n    }\n\n    function has_nlb() {\n        var index = OUTPUT.lastIndexOf(\"\\n\");\n        return /^ *$/.test(OUTPUT.slice(index + 1));\n    }\n\n    function prepend_comments(node) {\n        var self = this;\n        var start = node.start;\n        if (!start) return;\n        if (start.comments_before && start.comments_before._dumped === self) return;\n        var comments = start.comments_before;\n        if (!comments) {\n            comments = start.comments_before = [];\n        }\n        comments._dumped = self;\n\n        if (node instanceof AST_Exit && node.value) {\n            var tw = new TreeWalker(function(node) {\n                var parent = tw.parent();\n                if (parent instanceof AST_Exit\n                    || parent instanceof AST_Binary && parent.left === node\n                    || parent.TYPE == \"Call\" && parent.expression === node\n                    || parent instanceof AST_Conditional && parent.condition === node\n                    || parent instanceof AST_Dot && parent.expression === node\n                    || parent instanceof AST_Sequence && parent.expressions[0] === node\n                    || parent instanceof AST_Sub && parent.expression === node\n                    || parent instanceof AST_UnaryPostfix) {\n                    if (!node.start) return;\n                    var text = node.start.comments_before;\n                    if (text && text._dumped !== self) {\n                        text._dumped = self;\n                        comments = comments.concat(text);\n                    }\n                } else {\n                    return true;\n                }\n            });\n            tw.push(node);\n            node.value.walk(tw);\n        }\n\n        if (current_pos == 0) {\n            if (comments.length > 0 && options.shebang && comments[0].type == \"comment5\") {\n                print(\"#!\" + comments.shift().value + \"\\n\");\n                indent();\n            }\n            var preamble = options.preamble;\n            if (preamble) {\n                print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n            }\n        }\n\n        comments = comments.filter(comment_filter, node);\n        if (comments.length == 0) return;\n        var last_nlb = has_nlb();\n        comments.forEach(function(c, i) {\n            if (!last_nlb) {\n                if (c.nlb) {\n                    print(\"\\n\");\n                    indent();\n                    last_nlb = true;\n                } else if (i > 0) {\n                    space();\n                }\n            }\n            if (/comment[134]/.test(c.type)) {\n                print(\"//\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"\\n\");\n                indent();\n                last_nlb = true;\n            } else if (c.type == \"comment2\") {\n                print(\"/*\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"*/\");\n                last_nlb = false;\n            }\n        });\n        if (!last_nlb) {\n            if (start.nlb) {\n                print(\"\\n\");\n                indent();\n            } else {\n                space();\n            }\n        }\n    }\n\n    function append_comments(node, tail) {\n        var self = this;\n        var token = node.end;\n        if (!token) return;\n        var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n        if (!comments || comments._dumped === self) return;\n        if (!(node instanceof AST_Statement || all(comments, function(c) {\n            return !/comment[134]/.test(c.type);\n        }))) return;\n        comments._dumped = self;\n        var insert = OUTPUT.length;\n        comments.filter(comment_filter, node).forEach(function(c, i) {\n            need_space = false;\n            if (need_newline_indented) {\n                print(\"\\n\");\n                indent();\n                need_newline_indented = false;\n            } else if (c.nlb && (i > 0 || !has_nlb())) {\n                print(\"\\n\");\n                indent();\n            } else if (i > 0 || !tail) {\n                space();\n            }\n            if (/comment[134]/.test(c.type)) {\n                print(\"//\" + c.value.replace(/[@#]__PURE__/g, \" \"));\n                need_newline_indented = true;\n            } else if (c.type == \"comment2\") {\n                print(\"/*\" + c.value.replace(/[@#]__PURE__/g, \" \") + \"*/\");\n                need_space = true;\n            }\n        });\n        if (OUTPUT.length > insert) newline_insert = insert;\n    }\n\n    var stack = [];\n    return {\n        get             : get,\n        toString        : get,\n        indent          : indent,\n        indentation     : function() { return indentation; },\n        current_width   : function() { return current_col - indentation; },\n        should_break    : function() { return options.width && this.current_width() >= options.width; },\n        has_parens      : function() { return has_parens; },\n        newline         : newline,\n        print           : print,\n        star            : star,\n        space           : space,\n        comma           : comma,\n        colon           : colon,\n        last            : function() { return last; },\n        semicolon       : semicolon,\n        force_semicolon : force_semicolon,\n        to_utf8         : to_utf8,\n        print_name      : function(name) { print(make_name(name)); },\n        print_string    : function(str, quote, escape_directive) {\n            var encoded = encode_string(str, quote);\n            if (escape_directive === true && !encoded.includes(\"\\\\\")) {\n                // Insert semicolons to break directive prologue\n                if (!EXPECT_DIRECTIVE.test(OUTPUT)) {\n                    force_semicolon();\n                }\n                force_semicolon();\n            }\n            print(encoded);\n        },\n        print_template_string_chars: function(str) {\n            var encoded = encode_string(str, \"`\").replace(/\\${/g, \"\\\\${\");\n            return print(encoded.substr(1, encoded.length - 2));\n        },\n        encode_string   : encode_string,\n        next_indent     : next_indent,\n        with_indent     : with_indent,\n        with_block      : with_block,\n        with_parens     : with_parens,\n        with_square     : with_square,\n        add_mapping     : add_mapping,\n        option          : function(opt) { return options[opt]; },\n        prepend_comments: readonly ? noop : prepend_comments,\n        append_comments : readonly || comment_filter === return_false ? noop : append_comments,\n        line            : function() { return current_line; },\n        col             : function() { return current_col; },\n        pos             : function() { return current_pos; },\n        push_node       : function(node) { stack.push(node); },\n        pop_node        : function() { return stack.pop(); },\n        parent          : function(n) {\n            return stack[stack.length - 2 - (n || 0)];\n        }\n    };\n\n}\n\n/* -----[ code generators ]----- */\n\n(function() {\n\n    /* -----[ utils ]----- */\n\n    function DEFPRINT(nodetype, generator) {\n        nodetype.DEFMETHOD(\"_codegen\", generator);\n    }\n\n    var in_directive = false;\n    var active_scope = null;\n    var use_asm = null;\n\n    AST_Node.DEFMETHOD(\"print\", function(stream, force_parens) {\n        var self = this, generator = self._codegen;\n        if (self instanceof AST_Scope) {\n            active_scope = self;\n        } else if (!use_asm && self instanceof AST_Directive && self.value == \"use asm\") {\n            use_asm = active_scope;\n        }\n        function doit() {\n            stream.prepend_comments(self);\n            self.add_source_map(stream);\n            generator(self, stream);\n            stream.append_comments(self);\n        }\n        stream.push_node(self);\n        if (force_parens || self.needs_parens(stream)) {\n            stream.with_parens(doit);\n        } else {\n            doit();\n        }\n        stream.pop_node();\n        if (self === use_asm) {\n            use_asm = null;\n        }\n    });\n    AST_Node.DEFMETHOD(\"_print\", AST_Node.prototype.print);\n\n    AST_Node.DEFMETHOD(\"print_to_string\", function(options) {\n        var s = OutputStream(options);\n        this.print(s);\n        return s.get();\n    });\n\n    /* -----[ PARENTHESES ]----- */\n\n    function PARENS(nodetype, func) {\n        if (Array.isArray(nodetype)) {\n            nodetype.forEach(function(nodetype) {\n                PARENS(nodetype, func);\n            });\n        } else {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n    }\n\n    PARENS(AST_Node, return_false);\n\n    // a function expression needs parens around it when it's provably\n    // the first token to appear in a statement.\n    PARENS(AST_Function, function(output) {\n        if (!output.has_parens() && first_in_statement(output)) {\n            return true;\n        }\n\n        if (output.option(\"webkit\")) {\n            var p = output.parent();\n            if (p instanceof AST_PropAccess && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_iife\")) {\n            var p = output.parent();\n            return p instanceof AST_Call && p.expression === this;\n        }\n\n        return false;\n    });\n\n    PARENS(AST_Arrow, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this;\n    });\n\n    // same goes for an object literal, because otherwise it would be\n    // interpreted as a block of code.\n    PARENS(AST_Object, function(output) {\n        return !output.has_parens() && first_in_statement(output);\n    });\n\n    PARENS(AST_ClassExpression, first_in_statement);\n\n    PARENS(AST_Unary, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || p instanceof AST_Binary\n                && p.operator === \"**\"\n                && this instanceof AST_UnaryPrefix\n                && p.left === this\n                && this.operator !== \"++\"\n                && this.operator !== \"--\";\n    });\n\n    PARENS(AST_Await, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || output.option(\"safari10\") && p instanceof AST_UnaryPrefix;\n    });\n\n    PARENS(AST_Sequence, function(output) {\n        var p = output.parent();\n        return p instanceof AST_Call                          // (foo, bar)() or foo(1, (2, 3), 4)\n            || p instanceof AST_Unary                         // !(foo, bar, baz)\n            || p instanceof AST_Binary                        // 1 + (2, 3) + 4 ==> 8\n            || p instanceof AST_VarDef                        // var a = (1, 2), b = a + a; ==> b == 4\n            || p instanceof AST_PropAccess                    // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n            || p instanceof AST_Array                         // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n            || p instanceof AST_ObjectProperty                // { foo: (1, 2) }.foo ==> 2\n            || p instanceof AST_Conditional                   /* (false, true) ? (a = 10, b = 20) : (c = 30)\n                                                               * ==> 20 (side effect, set a := 10 and b := 20) */\n            || p instanceof AST_Arrow                         // x => (x, x)\n            || p instanceof AST_DefaultAssign                 // x => (x = (0, function(){}))\n            || p instanceof AST_Expansion                     // [...(a, b)]\n            || p instanceof AST_ForOf && this === p.object    // for (e of (foo, bar)) {}\n            || p instanceof AST_Yield                         // yield (foo, bar)\n            || p instanceof AST_Export                        // export default (foo, bar)\n        ;\n    });\n\n    PARENS(AST_Binary, function(output) {\n        var p = output.parent();\n        // (foo && bar)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // typeof (foo && bar)\n        if (p instanceof AST_Unary)\n            return true;\n        // (foo && bar)[\"prop\"], (foo && bar).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // this deals with precedence: 3 * (2 + 1)\n        if (p instanceof AST_Binary) {\n            var po = p.operator, pp = PRECEDENCE[po];\n            var so = this.operator, sp = PRECEDENCE[so];\n            if (pp > sp\n                || (pp == sp\n                    && (this === p.right || po == \"**\"))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_Yield, function(output) {\n        var p = output.parent();\n        // (yield 1) + (yield 2)\n        // a = yield 3\n        if (p instanceof AST_Binary && p.operator !== \"=\")\n            return true;\n        // (yield 1)()\n        // new (yield 1)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (yield 1) ? yield 2 : yield 3\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // -(yield 4)\n        if (p instanceof AST_Unary)\n            return true;\n        // (yield x).foo\n        // (yield x)['foo']\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n    });\n\n    PARENS(AST_PropAccess, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_New && p.expression === this) {\n            // i.e. new (foo.bar().baz)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            var parens = false;\n            this.walk(new TreeWalker(function(node) {\n                if (parens || node instanceof AST_Scope) return true;\n                if (node instanceof AST_Call) {\n                    parens = true;\n                    return true;\n                }\n            }));\n            return parens;\n        }\n    });\n\n    PARENS(AST_Call, function(output) {\n        var p = output.parent(), p1;\n        if (p instanceof AST_New && p.expression === this\n            || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function)\n            return true;\n\n        // workaround for Safari bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=123506\n        return this.expression instanceof AST_Function\n            && p instanceof AST_PropAccess\n            && p.expression === this\n            && (p1 = output.parent(1)) instanceof AST_Assign\n            && p1.left === p;\n    });\n\n    PARENS(AST_New, function(output) {\n        var p = output.parent();\n        if (!need_constructor_parens(this, output)\n            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n                || p instanceof AST_Call && p.expression === this)) // (new foo)(bar)\n            return true;\n    });\n\n    PARENS(AST_Number, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value < 0 || /^0/.test(make_num(value))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS([ AST_Assign, AST_Conditional ], function(output) {\n        var p = output.parent();\n        // !(a = false) → true\n        if (p instanceof AST_Unary)\n            return true;\n        // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n        if (p instanceof AST_Binary && !(p instanceof AST_Assign))\n            return true;\n        // (a = func)() —or— new (a = Object)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (a = foo) ? bar : baz\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // (a = foo)[\"prop\"] —or— (a = foo).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // ({a, b} = {a: 1, b: 2}), a destructuring assignment\n        if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false)\n            return true;\n    });\n\n    /* -----[ PRINTERS ]----- */\n\n    DEFPRINT(AST_Directive, function(self, output) {\n        output.print_string(self.value, self.quote);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_Expansion, function (self, output) {\n        output.print(\"...\");\n        self.expression.print(output);\n    });\n\n    DEFPRINT(AST_Destructuring, function (self, output) {\n        output.print(self.is_array ? \"[\" : \"{\");\n        var len = self.names.length;\n        self.names.forEach(function (name, i) {\n            if (i > 0) output.comma();\n            name.print(output);\n            // If the final element is a hole, we need to make sure it\n            // doesn't look like a trailing comma, by inserting an actual\n            // trailing comma.\n            if (i == len - 1 && name instanceof AST_Hole) output.comma();\n        });\n        output.print(self.is_array ? \"]\" : \"}\");\n    });\n\n    DEFPRINT(AST_Debugger, function(self, output) {\n        output.print(\"debugger\");\n        output.semicolon();\n    });\n\n    /* -----[ statements ]----- */\n\n    function display_body(body, is_toplevel, output, allow_directives) {\n        var last = body.length - 1;\n        in_directive = allow_directives;\n        body.forEach(function(stmt, i) {\n            if (in_directive === true && !(stmt instanceof AST_Directive ||\n                stmt instanceof AST_EmptyStatement ||\n                (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)\n            )) {\n                in_directive = false;\n            }\n            if (!(stmt instanceof AST_EmptyStatement)) {\n                output.indent();\n                stmt.print(output);\n                if (!(i == last && is_toplevel)) {\n                    output.newline();\n                    if (is_toplevel) output.newline();\n                }\n            }\n            if (in_directive === true &&\n                stmt instanceof AST_SimpleStatement &&\n                stmt.body instanceof AST_String\n            ) {\n                in_directive = false;\n            }\n        });\n        in_directive = false;\n    }\n\n    AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function(output) {\n        force_statement(this.body, output);\n    });\n\n    DEFPRINT(AST_Statement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Toplevel, function(self, output) {\n        display_body(self.body, true, output, true);\n        output.print(\"\");\n    });\n    DEFPRINT(AST_LabeledStatement, function(self, output) {\n        self.label.print(output);\n        output.colon();\n        self.body.print(output);\n    });\n    DEFPRINT(AST_SimpleStatement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    function print_braced_empty(self, output) {\n        output.print(\"{\");\n        output.with_indent(output.next_indent(), function() {\n            output.append_comments(self, true);\n        });\n        output.print(\"}\");\n    }\n    function print_braced(self, output, allow_directives) {\n        if (self.body.length > 0) {\n            output.with_block(function() {\n                display_body(self.body, false, output, allow_directives);\n            });\n        } else print_braced_empty(self, output);\n    }\n    DEFPRINT(AST_BlockStatement, function(self, output) {\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_EmptyStatement, function(self, output) {\n        output.semicolon();\n    });\n    DEFPRINT(AST_Do, function(self, output) {\n        output.print(\"do\");\n        output.space();\n        make_block(self.body, output);\n        output.space();\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.semicolon();\n    });\n    DEFPRINT(AST_While, function(self, output) {\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_For, function(self, output) {\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function() {\n            if (self.init) {\n                if (self.init instanceof AST_Definitions) {\n                    self.init.print(output);\n                } else {\n                    parenthesize_for_noin(self.init, output, true);\n                }\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.condition) {\n                self.condition.print(output);\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.step) {\n                self.step.print(output);\n            }\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_ForIn, function(self, output) {\n        output.print(\"for\");\n        if (self.await) {\n            output.space();\n            output.print(\"await\");\n        }\n        output.space();\n        output.with_parens(function() {\n            self.init.print(output);\n            output.space();\n            output.print(self instanceof AST_ForOf ? \"of\" : \"in\");\n            output.space();\n            self.object.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_With, function(self, output) {\n        output.print(\"with\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n\n    /* -----[ functions ]----- */\n    AST_Lambda.DEFMETHOD(\"_do_print\", function(output, nokeyword) {\n        var self = this;\n        if (!nokeyword) {\n            if (self.async) {\n                output.print(\"async\");\n                output.space();\n            }\n            output.print(\"function\");\n            if (self.is_generator) {\n                output.star();\n            }\n            if (self.name) {\n                output.space();\n            }\n        }\n        if (self.name instanceof AST_Symbol) {\n            self.name.print(output);\n        } else if (nokeyword && self.name instanceof AST_Node) {\n            output.with_square(function() {\n                self.name.print(output); // Computed method name\n            });\n        }\n        output.with_parens(function() {\n            self.argnames.forEach(function(arg, i) {\n                if (i) output.comma();\n                arg.print(output);\n            });\n        });\n        output.space();\n        print_braced(self, output, true);\n    });\n    DEFPRINT(AST_Lambda, function(self, output) {\n        self._do_print(output);\n    });\n\n    DEFPRINT(AST_PrefixedTemplateString, function(self, output) {\n        var tag = self.prefix;\n        var parenthesize_tag = tag instanceof AST_Arrow\n            || tag instanceof AST_Binary\n            || tag instanceof AST_Conditional\n            || tag instanceof AST_Sequence\n            || tag instanceof AST_Unary;\n        if (parenthesize_tag) output.print(\"(\");\n        self.prefix.print(output);\n        if (parenthesize_tag) output.print(\")\");\n        self.template_string.print(output);\n    });\n    DEFPRINT(AST_TemplateString, function(self, output) {\n        var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;\n\n        output.print(\"`\");\n        for (var i = 0; i < self.segments.length; i++) {\n            if (!(self.segments[i] instanceof AST_TemplateSegment)) {\n                output.print(\"${\");\n                self.segments[i].print(output);\n                output.print(\"}\");\n            } else if (is_tagged) {\n                output.print(self.segments[i].raw);\n            } else {\n                output.print_template_string_chars(self.segments[i].value);\n            }\n        }\n        output.print(\"`\");\n    });\n\n    AST_Arrow.DEFMETHOD(\"_do_print\", function(output) {\n        var self = this;\n        var parent = output.parent();\n        var needs_parens = (parent instanceof AST_Binary && !(parent instanceof AST_Assign)) ||\n            parent instanceof AST_Unary ||\n            (parent instanceof AST_Call && self === parent.expression);\n        if (needs_parens) { output.print(\"(\"); }\n        if (self.async) {\n            output.print(\"async\");\n            output.space();\n        }\n        if (self.argnames.length === 1 && self.argnames[0] instanceof AST_Symbol) {\n            self.argnames[0].print(output);\n        } else {\n            output.with_parens(function() {\n                self.argnames.forEach(function(arg, i) {\n                    if (i) output.comma();\n                    arg.print(output);\n                });\n            });\n        }\n        output.space();\n        output.print(\"=>\");\n        output.space();\n        if (self.body instanceof AST_Node) {\n            self.body.print(output);\n        } else {\n            print_braced(self, output);\n        }\n        if (needs_parens) { output.print(\")\"); }\n    });\n\n    /* -----[ exits ]----- */\n    AST_Exit.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.value) {\n            output.space();\n            this.value.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Return, function(self, output) {\n        self._do_print(output, \"return\");\n    });\n    DEFPRINT(AST_Throw, function(self, output) {\n        self._do_print(output, \"throw\");\n    });\n\n    /* -----[ yield ]----- */\n\n    DEFPRINT(AST_Yield, function(self, output) {\n        var star = self.is_star ? \"*\" : \"\";\n        output.print(\"yield\" + star);\n        if (self.expression) {\n            output.space();\n            self.expression.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Await, function(self, output) {\n        output.print(\"await\");\n        output.space();\n        var e = self.expression;\n        var parens = !(\n               e instanceof AST_Call\n            || e instanceof AST_SymbolRef\n            || e instanceof AST_PropAccess\n            || e instanceof AST_Unary\n            || e instanceof AST_Constant\n        );\n        if (parens) output.print(\"(\");\n        self.expression.print(output);\n        if (parens) output.print(\")\");\n    });\n\n    /* -----[ loop control ]----- */\n    AST_LoopControl.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.label) {\n            output.space();\n            this.label.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Break, function(self, output) {\n        self._do_print(output, \"break\");\n    });\n    DEFPRINT(AST_Continue, function(self, output) {\n        self._do_print(output, \"continue\");\n    });\n\n    /* -----[ if ]----- */\n    function make_then(self, output) {\n        var b = self.body;\n        if (output.option(\"braces\")\n            || output.option(\"ie8\") && b instanceof AST_Do)\n            return make_block(b, output);\n        // The squeezer replaces \"block\"-s that contain only a single\n        // statement with the statement itself; technically, the AST\n        // is correct, but this can create problems when we output an\n        // IF having an ELSE clause where the THEN clause ends in an\n        // IF *without* an ELSE block (then the outer ELSE would refer\n        // to the inner IF).  This function checks for this case and\n        // adds the block braces if needed.\n        if (!b) return output.force_semicolon();\n        while (true) {\n            if (b instanceof AST_If) {\n                if (!b.alternative) {\n                    make_block(self.body, output);\n                    return;\n                }\n                b = b.alternative;\n            } else if (b instanceof AST_StatementWithBody) {\n                b = b.body;\n            } else break;\n        }\n        force_statement(self.body, output);\n    }\n    DEFPRINT(AST_If, function(self, output) {\n        output.print(\"if\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        if (self.alternative) {\n            make_then(self, output);\n            output.space();\n            output.print(\"else\");\n            output.space();\n            if (self.alternative instanceof AST_If)\n                self.alternative.print(output);\n            else\n                force_statement(self.alternative, output);\n        } else {\n            self._do_print_body(output);\n        }\n    });\n\n    /* -----[ switch ]----- */\n    DEFPRINT(AST_Switch, function(self, output) {\n        output.print(\"switch\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        var last = self.body.length - 1;\n        if (last < 0) print_braced_empty(self, output);\n        else output.with_block(function() {\n            self.body.forEach(function(branch, i) {\n                output.indent(true);\n                branch.print(output);\n                if (i < last && branch.body.length > 0)\n                    output.newline();\n            });\n        });\n    });\n    AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function(output) {\n        output.newline();\n        this.body.forEach(function(stmt) {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    });\n    DEFPRINT(AST_Default, function(self, output) {\n        output.print(\"default:\");\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_Case, function(self, output) {\n        output.print(\"case\");\n        output.space();\n        self.expression.print(output);\n        output.print(\":\");\n        self._do_print_body(output);\n    });\n\n    /* -----[ exceptions ]----- */\n    DEFPRINT(AST_Try, function(self, output) {\n        output.print(\"try\");\n        output.space();\n        print_braced(self, output);\n        if (self.bcatch) {\n            output.space();\n            self.bcatch.print(output);\n        }\n        if (self.bfinally) {\n            output.space();\n            self.bfinally.print(output);\n        }\n    });\n    DEFPRINT(AST_Catch, function(self, output) {\n        output.print(\"catch\");\n        if (self.argname) {\n            output.space();\n            output.with_parens(function() {\n                self.argname.print(output);\n            });\n        }\n        output.space();\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_Finally, function(self, output) {\n        output.print(\"finally\");\n        output.space();\n        print_braced(self, output);\n    });\n\n    /* -----[ var/const ]----- */\n    AST_Definitions.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        output.space();\n        this.definitions.forEach(function(def, i) {\n            if (i) output.comma();\n            def.print(output);\n        });\n        var p = output.parent();\n        var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n        var output_semicolon = !in_for || p && p.init !== this;\n        if (output_semicolon)\n            output.semicolon();\n    });\n    DEFPRINT(AST_Let, function(self, output) {\n        self._do_print(output, \"let\");\n    });\n    DEFPRINT(AST_Var, function(self, output) {\n        self._do_print(output, \"var\");\n    });\n    DEFPRINT(AST_Const, function(self, output) {\n        self._do_print(output, \"const\");\n    });\n    DEFPRINT(AST_Import, function(self, output) {\n        output.print(\"import\");\n        output.space();\n        if (self.imported_name) {\n            self.imported_name.print(output);\n        }\n        if (self.imported_name && self.imported_names) {\n            output.print(\",\");\n            output.space();\n        }\n        if (self.imported_names) {\n            if (self.imported_names.length === 1 && self.imported_names[0].foreign_name.name === \"*\") {\n                self.imported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.imported_names.forEach(function (name_import, i) {\n                    output.space();\n                    name_import.print(output);\n                    if (i < self.imported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        }\n        if (self.imported_name || self.imported_names) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n        }\n        self.module_name.print(output);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_NameMapping, function(self, output) {\n        var is_import = output.parent() instanceof AST_Import;\n        var definition = self.name.definition();\n        var names_are_different =\n            (definition && definition.mangled_name || self.name.name) !==\n            self.foreign_name.name;\n        if (names_are_different) {\n            if (is_import) {\n                output.print(self.foreign_name.name);\n            } else {\n                self.name.print(output);\n            }\n            output.space();\n            output.print(\"as\");\n            output.space();\n            if (is_import) {\n                self.name.print(output);\n            } else {\n                output.print(self.foreign_name.name);\n            }\n        } else {\n            self.name.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Export, function(self, output) {\n        output.print(\"export\");\n        output.space();\n        if (self.is_default) {\n            output.print(\"default\");\n            output.space();\n        }\n        if (self.exported_names) {\n            if (self.exported_names.length === 1 && self.exported_names[0].name.name === \"*\") {\n                self.exported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.exported_names.forEach(function(name_export, i) {\n                    output.space();\n                    name_export.print(output);\n                    if (i < self.exported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        } else if (self.exported_value) {\n            self.exported_value.print(output);\n        } else if (self.exported_definition) {\n            self.exported_definition.print(output);\n            if (self.exported_definition instanceof AST_Definitions) return;\n        }\n        if (self.module_name) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n            self.module_name.print(output);\n        }\n        if (self.exported_value\n                && !(self.exported_value instanceof AST_Defun ||\n                    self.exported_value instanceof AST_Function ||\n                    self.exported_value instanceof AST_Class)\n            || self.module_name\n            || self.exported_names\n        ) {\n            output.semicolon();\n        }\n    });\n\n    function parenthesize_for_noin(node, output, noin) {\n        var parens = false;\n        // need to take some precautions here:\n        //    https://github.com/mishoo/UglifyJS2/issues/60\n        if (noin) node.walk(new TreeWalker(function(node) {\n            if (parens || node instanceof AST_Scope) return true;\n            if (node instanceof AST_Binary && node.operator == \"in\") {\n                parens = true;\n                return true;\n            }\n        }));\n        node.print(output, parens);\n    }\n\n    DEFPRINT(AST_VarDef, function(self, output) {\n        self.name.print(output);\n        if (self.value) {\n            output.space();\n            output.print(\"=\");\n            output.space();\n            var p = output.parent(1);\n            var noin = p instanceof AST_For || p instanceof AST_ForIn;\n            parenthesize_for_noin(self.value, output, noin);\n        }\n    });\n\n    /* -----[ other expressions ]----- */\n    DEFPRINT(AST_Call, function(self, output) {\n        self.expression.print(output);\n        if (self instanceof AST_New && !need_constructor_parens(self, output))\n            return;\n        if (self.expression instanceof AST_Call || self.expression instanceof AST_Lambda) {\n            output.add_mapping(self.start);\n        }\n        output.with_parens(function() {\n            self.args.forEach(function(expr, i) {\n                if (i) output.comma();\n                expr.print(output);\n            });\n        });\n    });\n    DEFPRINT(AST_New, function(self, output) {\n        output.print(\"new\");\n        output.space();\n        AST_Call.prototype._codegen(self, output);\n    });\n\n    AST_Sequence.DEFMETHOD(\"_do_print\", function(output) {\n        this.expressions.forEach(function(node, index) {\n            if (index > 0) {\n                output.comma();\n                if (output.should_break()) {\n                    output.newline();\n                    output.indent();\n                }\n            }\n            node.print(output);\n        });\n    });\n    DEFPRINT(AST_Sequence, function(self, output) {\n        self._do_print(output);\n        // var p = output.parent();\n        // if (p instanceof AST_Statement) {\n        //     output.with_indent(output.next_indent(), function(){\n        //         self._do_print(output);\n        //     });\n        // } else {\n        //     self._do_print(output);\n        // }\n    });\n    DEFPRINT(AST_Dot, function(self, output) {\n        var expr = self.expression;\n        expr.print(output);\n        var prop = self.property;\n        if (output.option(\"ie8\") && RESERVED_WORDS.has(prop)) {\n            output.print(\"[\");\n            output.add_mapping(self.end);\n            output.print_string(prop);\n            output.print(\"]\");\n        } else {\n            if (expr instanceof AST_Number && expr.getValue() >= 0) {\n                if (!/[xa-f.)]/i.test(output.last())) {\n                    output.print(\".\");\n                }\n            }\n            output.print(\".\");\n            // the name after dot would be mapped about here.\n            output.add_mapping(self.end);\n            output.print_name(prop);\n        }\n    });\n    DEFPRINT(AST_Sub, function(self, output) {\n        self.expression.print(output);\n        output.print(\"[\");\n        self.property.print(output);\n        output.print(\"]\");\n    });\n    DEFPRINT(AST_UnaryPrefix, function(self, output) {\n        var op = self.operator;\n        output.print(op);\n        if (/^[a-z]/i.test(op)\n            || (/[+-]$/.test(op)\n                && self.expression instanceof AST_UnaryPrefix\n                && /^[+-]/.test(self.expression.operator))) {\n            output.space();\n        }\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPostfix, function(self, output) {\n        self.expression.print(output);\n        output.print(self.operator);\n    });\n    DEFPRINT(AST_Binary, function(self, output) {\n        var op = self.operator;\n        self.left.print(output);\n        if (op[0] == \">\" /* \">>\" \">>>\" \">\" \">=\" */\n            && self.left instanceof AST_UnaryPostfix\n            && self.left.operator == \"--\") {\n            // space is mandatory to avoid outputting -->\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        output.print(op);\n        if ((op == \"<\" || op == \"<<\")\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"!\"\n            && self.right.expression instanceof AST_UnaryPrefix\n            && self.right.expression.operator == \"--\") {\n            // space is mandatory to avoid outputting <!--\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        self.right.print(output);\n    });\n    DEFPRINT(AST_Conditional, function(self, output) {\n        self.condition.print(output);\n        output.space();\n        output.print(\"?\");\n        output.space();\n        self.consequent.print(output);\n        output.space();\n        output.colon();\n        self.alternative.print(output);\n    });\n\n    /* -----[ literals ]----- */\n    DEFPRINT(AST_Array, function(self, output) {\n        output.with_square(function() {\n            var a = self.elements, len = a.length;\n            if (len > 0) output.space();\n            a.forEach(function(exp, i) {\n                if (i) output.comma();\n                exp.print(output);\n                // If the final element is a hole, we need to make sure it\n                // doesn't look like a trailing comma, by inserting an actual\n                // trailing comma.\n                if (i === len - 1 && exp instanceof AST_Hole)\n                  output.comma();\n            });\n            if (len > 0) output.space();\n        });\n    });\n    DEFPRINT(AST_Object, function(self, output) {\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.print(\",\");\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else print_braced_empty(self, output);\n    });\n    DEFPRINT(AST_Class, function(self, output) {\n        output.print(\"class\");\n        output.space();\n        if (self.name) {\n            self.name.print(output);\n            output.space();\n        }\n        if (self.extends) {\n            var parens = (\n                   !(self.extends instanceof AST_SymbolRef)\n                && !(self.extends instanceof AST_PropAccess)\n                && !(self.extends instanceof AST_ClassExpression)\n                && !(self.extends instanceof AST_Function)\n            );\n            output.print(\"extends\");\n            if (parens) {\n                output.print(\"(\");\n            } else {\n                output.space();\n            }\n            self.extends.print(output);\n            if (parens) {\n                output.print(\")\");\n            } else {\n                output.space();\n            }\n        }\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else output.print(\"{}\");\n    });\n    DEFPRINT(AST_NewTarget, function(self, output) {\n        output.print(\"new.target\");\n    });\n\n    function print_property_name(key, quote, output) {\n        if (output.option(\"quote_keys\")) {\n            output.print_string(key);\n        } else if (\"\" + +key == key && key >= 0) {\n            output.print(make_num(key));\n        } else if (RESERVED_WORDS.has(key) ? !output.option(\"ie8\") : is_identifier_string(key)) {\n            if (quote && output.option(\"keep_quoted_props\")) {\n                output.print_string(key, quote);\n            } else {\n                output.print_name(key);\n            }\n        } else {\n            output.print_string(key, quote);\n        }\n    }\n\n    DEFPRINT(AST_ObjectKeyVal, function(self, output) {\n        function get_name(self) {\n            var def = self.definition();\n            return def ? def.mangled_name || def.name : self.name;\n        }\n\n        var allowShortHand = output.option(\"shorthand\");\n        if (allowShortHand &&\n            self.value instanceof AST_Symbol &&\n            is_identifier_string(self.key) &&\n            get_name(self.value) === self.key &&\n            !RESERVED_WORDS.has(self.key)\n        ) {\n            print_property_name(self.key, self.quote, output);\n\n        } else if (allowShortHand &&\n            self.value instanceof AST_DefaultAssign &&\n            self.value.left instanceof AST_Symbol &&\n            is_identifier_string(self.key) &&\n            get_name(self.value.left) === self.key\n        ) {\n            print_property_name(self.key, self.quote, output);\n            output.space();\n            output.print(\"=\");\n            output.space();\n            self.value.right.print(output);\n        } else {\n            if (!(self.key instanceof AST_Node)) {\n                print_property_name(self.key, self.quote, output);\n            } else {\n                output.with_square(function() {\n                    self.key.print(output);\n                });\n            }\n            output.colon();\n            self.value.print(output);\n        }\n    });\n    AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function(type, output) {\n        var self = this;\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n        if (type) {\n            output.print(type);\n            output.space();\n        }\n        if (self.key instanceof AST_SymbolMethod) {\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.with_square(function() {\n                self.key.print(output);\n            });\n        }\n        self.value._do_print(output, true);\n    });\n    DEFPRINT(AST_ObjectSetter, function(self, output) {\n        self._print_getter_setter(\"set\", output);\n    });\n    DEFPRINT(AST_ObjectGetter, function(self, output) {\n        self._print_getter_setter(\"get\", output);\n    });\n    DEFPRINT(AST_ConciseMethod, function(self, output) {\n        var type;\n        if (self.is_generator && self.async) {\n            type = \"async*\";\n        } else if (self.is_generator) {\n            type = \"*\";\n        } else if (self.async) {\n            type = \"async\";\n        }\n        self._print_getter_setter(type, output);\n    });\n    AST_Symbol.DEFMETHOD(\"_do_print\", function(output) {\n        var def = this.definition();\n        output.print_name(def ? def.mangled_name || def.name : this.name);\n    });\n    DEFPRINT(AST_Symbol, function (self, output) {\n        self._do_print(output);\n    });\n    DEFPRINT(AST_Hole, noop);\n    DEFPRINT(AST_This, function(self, output) {\n        output.print(\"this\");\n    });\n    DEFPRINT(AST_Super, function(self, output) {\n        output.print(\"super\");\n    });\n    DEFPRINT(AST_Constant, function(self, output) {\n        output.print(self.getValue());\n    });\n    DEFPRINT(AST_String, function(self, output) {\n        output.print_string(self.getValue(), self.quote, in_directive);\n    });\n    DEFPRINT(AST_Number, function(self, output) {\n        if (use_asm && self.start && self.start.raw != null) {\n            output.print(self.start.raw);\n        } else {\n            output.print(make_num(self.getValue()));\n        }\n    });\n\n    DEFPRINT(AST_RegExp, function(self, output) {\n        var regexp = self.getValue();\n        var str = regexp.toString();\n        str = output.to_utf8(str);\n        output.print(str);\n        var p = output.parent();\n        if (p instanceof AST_Binary && /^in/.test(p.operator) && p.left === self)\n            output.print(\" \");\n    });\n\n    function force_statement(stat, output) {\n        if (output.option(\"braces\")) {\n            make_block(stat, output);\n        } else {\n            if (!stat || stat instanceof AST_EmptyStatement)\n                output.force_semicolon();\n            else\n                stat.print(output);\n        }\n    }\n\n    // self should be AST_New.  decide if we want to show parens or not.\n    function need_constructor_parens(self, output) {\n        // Always print parentheses with arguments\n        if (self.args.length > 0) return true;\n\n        return output.option(\"beautify\");\n    }\n\n    function best_of(a) {\n        var best = a[0], len = best.length;\n        for (var i = 1; i < a.length; ++i) {\n            if (a[i].length < len) {\n                best = a[i];\n                len = best.length;\n            }\n        }\n        return best;\n    }\n\n    function make_num(num) {\n        var str = num.toString(10), a = [ str.replace(/^0\\./, \".\").replace(\"e+\", \"e\") ], m;\n        if (Math.floor(num) === num) {\n            a.push(\n                (num >= 0 ? \"0x\" : \"-0x\") + num.toString(16).toLowerCase() // probably pointless\n            );\n            if ((m = /^(.*?)(0{3,})$/.exec(num))) {\n                a.push(m[1] + \"e\" + m[2].length);\n            }\n        } else if ((m = /^0?\\.(0+)(.*)$/.exec(num))) {\n            a.push(m[2] + \"e-\" + (m[1].length + m[2].length));\n        }\n        return best_of(a);\n    }\n\n    function make_block(stmt, output) {\n        if (!stmt || stmt instanceof AST_EmptyStatement)\n            output.print(\"{}\");\n        else if (stmt instanceof AST_BlockStatement)\n            stmt.print(output);\n        else output.with_block(function() {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    }\n\n    /* -----[ source map generators ]----- */\n\n    function DEFMAP(nodetype, generator) {\n        nodetype.forEach(function(nodetype) {\n            nodetype.DEFMETHOD(\"add_source_map\", generator);\n        });\n    }\n\n    DEFMAP([\n        // We could easily add info for ALL nodes, but it seems to me that\n        // would be quite wasteful, hence this noop in the base class.\n        AST_Node,\n        // since the label symbol will mark it\n        AST_LabeledStatement,\n        AST_Toplevel,\n    ], noop);\n\n    // XXX: I'm not exactly sure if we need it for all of these nodes,\n    // or if we should add even more.\n    DEFMAP([\n        AST_Array,\n        AST_BlockStatement,\n        AST_Catch,\n        AST_Class,\n        AST_Constant,\n        AST_Debugger,\n        AST_Definitions,\n        AST_Directive,\n        AST_Finally,\n        AST_Jump,\n        AST_Lambda,\n        AST_New,\n        AST_Object,\n        AST_StatementWithBody,\n        AST_Symbol,\n        AST_Switch,\n        AST_SwitchBranch,\n        AST_Try,\n    ], function(output) {\n        output.add_mapping(this.start);\n    });\n\n    DEFMAP([\n        AST_ObjectGetter,\n        AST_ObjectSetter,\n    ], function(output) {\n        output.add_mapping(this.start, this.key.name);\n    });\n\n    DEFMAP([ AST_ObjectProperty ], function(output) {\n        output.add_mapping(this.start, this.key);\n    });\n})();\n\nexport {\n    OutputStream,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    all,\n    defaults,\n    keep_name,\n    member,\n    mergeSort,\n    push_uniq,\n    return_false,\n    return_this,\n    return_true,\n    string_template,\n} from \"./utils.js\";\nimport {\n    AST_Arrow,\n    AST_Block,\n    AST_Call,\n    AST_Class,\n    AST_Conditional,\n    AST_DefClass,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Dot,\n    AST_Export,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Import,\n    AST_IterationStatement,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_Node,\n    AST_Scope,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_Toplevel,\n    AST_With,\n    TreeWalker,\n} from \"./ast.js\";\nimport {\n    RESERVED_WORDS,\n    js_error,\n} from \"./parse.js\";\n\nfunction SymbolDef(scope, orig, init) {\n    this.name = orig.name;\n    this.orig = [ orig ];\n    this.init = init;\n    this.eliminated = 0;\n    this.scope = scope;\n    this.references = [];\n    this.replaced = 0;\n    this.global = false;\n    this.export = false;\n    this.mangled_name = null;\n    this.undeclared = false;\n    this.id = SymbolDef.next_id++;\n}\n\nSymbolDef.next_id = 1;\n\nvar MASK_EXPORT_DONT_MANGLE = 1 << 0;\nvar MASK_EXPORT_WANT_MANGLE = 1 << 1;\n\nSymbolDef.prototype = {\n    unmangleable: function(options) {\n        if (!options) options = {};\n\n        return this.global && !options.toplevel\n            || (this.export & MASK_EXPORT_DONT_MANGLE)\n            || this.undeclared\n            || !options.eval && this.scope.pinned()\n            || (this.orig[0] instanceof AST_SymbolLambda\n                  || this.orig[0] instanceof AST_SymbolDefun) && keep_name(options.keep_fnames, this.orig[0].name)\n            || this.orig[0] instanceof AST_SymbolMethod\n            || (this.orig[0] instanceof AST_SymbolClass\n                  || this.orig[0] instanceof AST_SymbolDefClass) && keep_name(options.keep_classnames, this.orig[0].name);\n    },\n    mangle: function(options) {\n        var cache = options.cache && options.cache.props;\n        if (this.global && cache && cache.has(this.name)) {\n            this.mangled_name = cache.get(this.name);\n        } else if (!this.mangled_name && !this.unmangleable(options)) {\n            var s = this.scope;\n            var sym = this.orig[0];\n            if (options.ie8 && sym instanceof AST_SymbolLambda)\n                s = s.parent_scope;\n            var def;\n            if (def = this.redefined()) {\n                this.mangled_name = def.mangled_name || def.name;\n            } else\n                this.mangled_name = s.next_mangled(options, this);\n            if (this.global && cache) {\n                cache.set(this.name, this.mangled_name);\n            }\n        }\n    },\n    redefined: function() {\n        return this.defun && this.defun.variables.get(this.name);\n    }\n};\n\nAST_Toplevel.DEFMETHOD(\"figure_out_scope\", function(options) {\n    options = defaults(options, {\n        cache: null,\n        ie8: false,\n        safari10: false,\n    });\n\n    // pass 1: setup scope chaining and handle definitions\n    var self = this;\n    var scope = self.parent_scope = null;\n    var labels = new Map();\n    var defun = null;\n    var in_destructuring = null;\n    var for_scopes = [];\n    var tw = new TreeWalker(function(node, descend) {\n        if (node.is_block_scope()) {\n            var save_scope = scope;\n            node.block_scope = scope = new AST_Scope(node);\n            scope.init_scope_vars(save_scope);\n            if (!(node instanceof AST_Scope)) {\n                scope.uses_with = save_scope.uses_with;\n                scope.uses_eval = save_scope.uses_eval;\n                scope.directives = save_scope.directives;\n            }\n            if (options.safari10) {\n                if (node instanceof AST_For || node instanceof AST_ForIn) {\n                    for_scopes.push(scope);\n                }\n            }\n            descend();\n            scope = save_scope;\n            return true;\n        }\n        if (node instanceof AST_Destructuring) {\n            in_destructuring = node;  // These don't nest\n            descend();\n            in_destructuring = null;\n            return true;\n        }\n        if (node instanceof AST_Scope) {\n            node.init_scope_vars(scope);\n            var save_scope = scope;\n            var save_defun = defun;\n            var save_labels = labels;\n            defun = scope = node;\n            labels = new Map();\n            descend();\n            scope = save_scope;\n            defun = save_defun;\n            labels = save_labels;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_LabeledStatement) {\n            var l = node.label;\n            if (labels.has(l.name)) {\n                throw new Error(string_template(\"Label {name} defined twice\", l));\n            }\n            labels.set(l.name, l);\n            descend();\n            labels.delete(l.name);\n            return true;        // no descend again\n        }\n        if (node instanceof AST_With) {\n            for (var s = scope; s; s = s.parent_scope)\n                s.uses_with = true;\n            return;\n        }\n        if (node instanceof AST_Symbol) {\n            node.scope = scope;\n        }\n        if (node instanceof AST_Label) {\n            node.thedef = node;\n            node.references = [];\n        }\n        if (node instanceof AST_SymbolLambda) {\n            defun.def_function(node, node.name == \"arguments\" ? undefined : defun);\n        } else if (node instanceof AST_SymbolDefun) {\n            // Careful here, the scope where this should be defined is\n            // the parent scope.  The reason is that we enter a new\n            // scope when we encounter the AST_Defun node (which is\n            // instanceof AST_Scope) but we get to the symbol a bit\n            // later.\n            mark_export((node.scope = defun.parent_scope.get_defun_scope()).def_function(node, defun), 1);\n        } else if (node instanceof AST_SymbolClass) {\n            mark_export(defun.def_variable(node, defun), 1);\n        } else if (node instanceof AST_SymbolImport) {\n            scope.def_variable(node);\n        } else if (node instanceof AST_SymbolDefClass) {\n            // This deals with the name of the class being available\n            // inside the class.\n            mark_export((node.scope = defun.parent_scope).def_function(node, defun), 1);\n        } else if (node instanceof AST_SymbolVar\n            || node instanceof AST_SymbolLet\n            || node instanceof AST_SymbolConst) {\n            var def;\n            if (node instanceof AST_SymbolBlockDeclaration) {\n                def = scope.def_variable(node, null);\n            } else {\n                def = defun.def_variable(node, node.TYPE == \"SymbolVar\" ? null : undefined);\n            }\n            if (!all(def.orig, function(sym) {\n                if (sym === node) return true;\n                if (node instanceof AST_SymbolBlockDeclaration) {\n                    return sym instanceof AST_SymbolLambda;\n                }\n                return !(sym instanceof AST_SymbolLet || sym instanceof AST_SymbolConst);\n            })) {\n                js_error(\n                    node.name + \" redeclared\",\n                    node.start.file,\n                    node.start.line,\n                    node.start.col,\n                    node.start.pos\n                );\n            }\n            if (!(node instanceof AST_SymbolFunarg)) mark_export(def, 2);\n            def.destructuring = in_destructuring;\n            if (defun !== scope) {\n                node.mark_enclosed(options);\n                var def = scope.find_variable(node);\n                if (node.thedef !== def) {\n                    node.thedef = def;\n                    node.reference(options);\n                }\n            }\n        } else if (node instanceof AST_SymbolCatch) {\n            scope.def_variable(node).defun = defun;\n        } else if (node instanceof AST_LabelRef) {\n            var sym = labels.get(node.name);\n            if (!sym) throw new Error(string_template(\"Undefined label {name} [{line},{col}]\", {\n                name: node.name,\n                line: node.start.line,\n                col: node.start.col\n            }));\n            node.thedef = sym;\n        }\n        if (!(scope instanceof AST_Toplevel) && (node instanceof AST_Export || node instanceof AST_Import)) {\n            js_error(\n                node.TYPE + \" statement may only appear at top level\",\n                node.start.file,\n                node.start.line,\n                node.start.col,\n                node.start.pos\n            );\n        }\n\n        function mark_export(def, level) {\n            if (in_destructuring) {\n                var i = 0;\n                do {\n                    level++;\n                } while (tw.parent(i++) !== in_destructuring);\n            }\n            var node = tw.parent(level);\n            if (def.export = node instanceof AST_Export && MASK_EXPORT_DONT_MANGLE) {\n                var exported = node.exported_definition;\n                if ((exported instanceof AST_Defun || exported instanceof AST_DefClass) && node.is_default) {\n                    def.export = MASK_EXPORT_WANT_MANGLE;\n                }\n            }\n        }\n    });\n    self.walk(tw);\n\n    // pass 2: find back references and eval\n    self.globals = new Map();\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_LoopControl && node.label) {\n            node.label.thedef.references.push(node);\n            return true;\n        }\n        if (node instanceof AST_SymbolRef) {\n            var name = node.name;\n            if (name == \"eval\" && tw.parent() instanceof AST_Call) {\n                for (var s = node.scope; s && !s.uses_eval; s = s.parent_scope) {\n                    s.uses_eval = true;\n                }\n            }\n            var sym;\n            if (tw.parent() instanceof AST_NameMapping && tw.parent(1).module_name\n                || !(sym = node.scope.find_variable(name))) {\n                sym = self.def_global(node);\n                if (node instanceof AST_SymbolExport) sym.export = MASK_EXPORT_DONT_MANGLE;\n            } else if (sym.scope instanceof AST_Lambda && name == \"arguments\") {\n                sym.scope.uses_arguments = true;\n            }\n            node.thedef = sym;\n            node.reference(options);\n            if (node.scope.is_block_scope()\n                && !(sym.orig[0] instanceof AST_SymbolBlockDeclaration)) {\n                node.scope = node.scope.get_defun_scope();\n            }\n            return true;\n        }\n        // ensure mangling works if catch reuses a scope variable\n        var def;\n        if (node instanceof AST_SymbolCatch && (def = node.definition().redefined())) {\n            var s = node.scope;\n            while (s) {\n                push_uniq(s.enclosed, def);\n                if (s === def.scope) break;\n                s = s.parent_scope;\n            }\n        }\n    });\n    self.walk(tw);\n\n    // pass 3: work around IE8 and Safari catch scope bugs\n    if (options.ie8 || options.safari10) {\n        self.walk(new TreeWalker(function(node, descend) {\n            if (node instanceof AST_SymbolCatch) {\n                var name = node.name;\n                var refs = node.thedef.references;\n                var scope = node.thedef.defun;\n                var def = scope.find_variable(name) || self.globals.get(name) || scope.def_variable(node);\n                refs.forEach(function(ref) {\n                    ref.thedef = def;\n                    ref.reference(options);\n                });\n                node.thedef = def;\n                node.reference(options);\n                return true;\n            }\n        }));\n    }\n\n    // pass 4: add symbol definitions to loop scopes\n    // Safari/Webkit bug workaround - loop init let variable shadowing argument.\n    // https://github.com/mishoo/UglifyJS2/issues/1753\n    // https://bugs.webkit.org/show_bug.cgi?id=171041\n    if (options.safari10) {\n        for (var i = 0; i < for_scopes.length; i++) {\n            var scope = for_scopes[i];\n            scope.parent_scope.variables.forEach(function(def) {\n                push_uniq(scope.enclosed, def);\n            });\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"def_global\", function(node) {\n    var globals = this.globals, name = node.name;\n    if (globals.has(name)) {\n        return globals.get(name);\n    } else {\n        var g = new SymbolDef(this, node);\n        g.undeclared = true;\n        g.global = true;\n        globals.set(name, g);\n        return g;\n    }\n});\n\nAST_Scope.DEFMETHOD(\"init_scope_vars\", function(parent_scope) {\n    this.variables = new Map();         // map name to AST_SymbolVar (variables defined in this scope; includes functions)\n    this.functions = new Map();         // map name to AST_SymbolDefun (functions defined in this scope)\n    this.uses_with = false;             // will be set to true if this or some nested scope uses the `with` statement\n    this.uses_eval = false;             // will be set to true if this or nested scope uses the global `eval`\n    this.parent_scope = parent_scope;   // the parent scope\n    this.enclosed = [];                 // a list of variables from this or outer scope(s) that are referenced from this or inner scopes\n    this.cname = -1;                    // the current index for mangling functions/variables\n});\n\nAST_Node.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Class.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Lambda.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Toplevel.DEFMETHOD(\"is_block_scope\", return_false);\nAST_SwitchBranch.DEFMETHOD(\"is_block_scope\", return_false);\nAST_Block.DEFMETHOD(\"is_block_scope\", return_true);\nAST_IterationStatement.DEFMETHOD(\"is_block_scope\", return_true);\n\nAST_Lambda.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n    this.def_variable(new AST_SymbolFunarg({\n        name: \"arguments\",\n        start: this.start,\n        end: this.end\n    }));\n});\n\nAST_Arrow.DEFMETHOD(\"init_scope_vars\", function() {\n    AST_Scope.prototype.init_scope_vars.apply(this, arguments);\n    this.uses_arguments = false;\n});\n\nAST_Symbol.DEFMETHOD(\"mark_enclosed\", function(options) {\n    var def = this.definition();\n    var s = this.scope;\n    while (s) {\n        push_uniq(s.enclosed, def);\n        if (options.keep_fnames) {\n            s.functions.forEach(function(d) {\n                if (keep_name(options.keep_fnames, d.name)) {\n                    push_uniq(def.scope.enclosed, d);\n                }\n            });\n        }\n        if (s === def.scope) break;\n        s = s.parent_scope;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"reference\", function(options) {\n    this.definition().references.push(this);\n    this.mark_enclosed(options);\n});\n\nAST_Scope.DEFMETHOD(\"find_variable\", function(name) {\n    if (name instanceof AST_Symbol) name = name.name;\n    return this.variables.get(name)\n        || (this.parent_scope && this.parent_scope.find_variable(name));\n});\n\nAST_Scope.DEFMETHOD(\"def_function\", function(symbol, init) {\n    var def = this.def_variable(symbol, init);\n    if (!def.init || def.init instanceof AST_Defun) def.init = init;\n    this.functions.set(symbol.name, def);\n    return def;\n});\n\nAST_Scope.DEFMETHOD(\"def_variable\", function(symbol, init) {\n    var def = this.variables.get(symbol.name);\n    if (def) {\n        def.orig.push(symbol);\n        if (def.init && (def.scope !== symbol.scope || def.init instanceof AST_Function)) {\n            def.init = init;\n        }\n    } else {\n        def = new SymbolDef(this, symbol, init);\n        this.variables.set(symbol.name, def);\n        def.global = !this.parent_scope;\n    }\n    return symbol.thedef = def;\n});\n\nfunction next_mangled(scope, options) {\n    var ext = scope.enclosed;\n    out: while (true) {\n        var m = base54(++scope.cname);\n        if (RESERVED_WORDS.has(m)) continue; // skip over \"do\"\n\n        // https://github.com/mishoo/UglifyJS2/issues/242 -- do not\n        // shadow a name reserved from mangling.\n        if (member(m, options.reserved)) continue;\n\n        // we must ensure that the mangled name does not shadow a name\n        // from some parent scope that is referenced in this or in\n        // inner scopes.\n        for (var i = ext.length; --i >= 0;) {\n            var sym = ext[i];\n            var name = sym.mangled_name || (sym.unmangleable(options) && sym.name);\n            if (m == name) continue out;\n        }\n        return m;\n    }\n}\n\nAST_Scope.DEFMETHOD(\"next_mangled\", function(options) {\n    return next_mangled(this, options);\n});\n\nAST_Toplevel.DEFMETHOD(\"next_mangled\", function(options) {\n    var name;\n    do {\n        name = next_mangled(this, options);\n    } while (this.mangled_names.has(name));\n    return name;\n});\n\nAST_Function.DEFMETHOD(\"next_mangled\", function(options, def) {\n    // #179, #326\n    // in Safari strict mode, something like (function x(x){...}) is a syntax error;\n    // a function expression's argument cannot shadow the function expression's name\n\n    var tricky_def = def.orig[0] instanceof AST_SymbolFunarg && this.name && this.name.definition();\n\n    // the function's mangled_name is null when keep_fnames is true\n    var tricky_name = tricky_def ? tricky_def.mangled_name || tricky_def.name : null;\n\n    while (true) {\n        var name = next_mangled(this, options);\n        if (!tricky_name || tricky_name != name)\n            return name;\n    }\n});\n\nAST_Symbol.DEFMETHOD(\"unmangleable\", function(options) {\n    var def = this.definition();\n    return !def || def.unmangleable(options);\n});\n\n// labels are always mangleable\nAST_Label.DEFMETHOD(\"unmangleable\", return_false);\n\nAST_Symbol.DEFMETHOD(\"unreferenced\", function() {\n    return !this.definition().references.length && !this.scope.pinned();\n});\n\nAST_Symbol.DEFMETHOD(\"definition\", function() {\n    return this.thedef;\n});\n\nAST_Symbol.DEFMETHOD(\"global\", function() {\n    return this.definition().global;\n});\n\nAST_Toplevel.DEFMETHOD(\"_default_mangler_options\", function(options) {\n    options = defaults(options, {\n        eval        : false,\n        ie8         : false,\n        keep_classnames: false,\n        keep_fnames : false,\n        module      : false,\n        reserved    : [],\n        toplevel    : false,\n    });\n    if (options[\"module\"]) {\n        options.toplevel = true;\n    }\n    if (!Array.isArray(options.reserved)) options.reserved = [];\n    // Never mangle arguments\n    push_uniq(options.reserved, \"arguments\");\n    return options;\n});\n\nAST_Toplevel.DEFMETHOD(\"mangle_names\", function(options) {\n    options = this._default_mangler_options(options);\n\n    // We only need to mangle declaration nodes.  Special logic wired\n    // into the code generator will display the mangled name if it's\n    // present (and for AST_SymbolRef-s it'll use the mangled name of\n    // the AST_SymbolDeclaration that it points to).\n    var lname = -1;\n    var to_mangle = [];\n\n    var mangled_names = this.mangled_names = new Set();\n    if (options.cache) {\n        this.globals.forEach(collect);\n        if (options.cache.props) {\n            options.cache.props.forEach(function(mangled_name) {\n                mangled_names.add(mangled_name);\n            });\n        }\n    }\n\n    var tw = new TreeWalker(function(node, descend) {\n        if (node instanceof AST_LabeledStatement) {\n            // lname is incremented when we get to the AST_Label\n            var save_nesting = lname;\n            descend();\n            lname = save_nesting;\n            return true;        // don't descend again in TreeWalker\n        }\n        if (node instanceof AST_Scope) {\n            node.variables.forEach(collect);\n            return;\n        }\n        if (node.is_block_scope()) {\n            node.block_scope.variables.forEach(collect);\n            return;\n        }\n        if (node instanceof AST_Label) {\n            var name;\n            do name = base54(++lname); while (RESERVED_WORDS.has(name));\n            node.mangled_name = name;\n            return true;\n        }\n        if (!(options.ie8 || options.safari10) && node instanceof AST_SymbolCatch) {\n            to_mangle.push(node.definition());\n            return;\n        }\n    });\n    this.walk(tw);\n    to_mangle.forEach(function(def) { def.mangle(options); });\n\n    function collect(symbol) {\n        if (!member(symbol.name, options.reserved)) {\n            if (!(symbol.export & MASK_EXPORT_DONT_MANGLE)) {\n                to_mangle.push(symbol);\n            }\n        }\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"find_colliding_names\", function(options) {\n    var cache = options.cache && options.cache.props;\n    var avoid = new Set();\n    options.reserved.forEach(to_avoid);\n    this.globals.forEach(add_def);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(add_def);\n        if (node instanceof AST_SymbolCatch) add_def(node.definition());\n    }));\n    return avoid;\n\n    function to_avoid(name) {\n        avoid.add(name);\n    }\n\n    function add_def(def) {\n        var name = def.name;\n        if (def.global && cache && cache.has(name)) name = cache.get(name);\n        else if (!def.unmangleable(options)) return;\n        to_avoid(name);\n    }\n});\n\nAST_Toplevel.DEFMETHOD(\"expand_names\", function(options) {\n    base54.reset();\n    base54.sort();\n    options = this._default_mangler_options(options);\n    var avoid = this.find_colliding_names(options);\n    var cname = 0;\n    this.globals.forEach(rename);\n    this.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Scope) node.variables.forEach(rename);\n        if (node instanceof AST_SymbolCatch) rename(node.definition());\n    }));\n\n    function next_name() {\n        var name;\n        do {\n            name = base54(cname++);\n        } while (avoid.has(name) || RESERVED_WORDS.has(name));\n        return name;\n    }\n\n    function rename(def) {\n        if (def.global && options.cache) return;\n        if (def.unmangleable(options)) return;\n        if (member(def.name, options.reserved)) return;\n        var d = def.redefined();\n        def.name = d ? d.name : next_name();\n        def.orig.forEach(function(sym) {\n            sym.name = def.name;\n        });\n        def.references.forEach(function(sym) {\n            sym.name = def.name;\n        });\n    }\n});\n\nAST_Node.DEFMETHOD(\"tail_node\", return_this);\nAST_Sequence.DEFMETHOD(\"tail_node\", function() {\n    return this.expressions[this.expressions.length - 1];\n});\n\nAST_Toplevel.DEFMETHOD(\"compute_char_frequency\", function(options) {\n    options = this._default_mangler_options(options);\n    try {\n        AST_Node.prototype.print = function(stream, force_parens) {\n            this._print(stream, force_parens);\n            if (this instanceof AST_Symbol && !this.unmangleable(options)) {\n                base54.consider(this.name, -1);\n            } else if (options.properties) {\n                if (this instanceof AST_Dot) {\n                    base54.consider(this.property, -1);\n                } else if (this instanceof AST_Sub) {\n                    skip_string(this.property);\n                }\n            }\n        };\n        base54.consider(this.print_to_string(), 1);\n    } finally {\n        AST_Node.prototype.print = AST_Node.prototype._print;\n    }\n    base54.sort();\n\n    function skip_string(node) {\n        if (node instanceof AST_String) {\n            base54.consider(node.value, -1);\n        } else if (node instanceof AST_Conditional) {\n            skip_string(node.consequent);\n            skip_string(node.alternative);\n        } else if (node instanceof AST_Sequence) {\n            skip_string(node.tail_node());\n        }\n    }\n});\n\nvar base54 = (function() {\n    var leading = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_\".split(\"\");\n    var digits = \"0123456789\".split(\"\");\n    var chars, frequency;\n    function reset() {\n        frequency = new Map();\n        leading.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n        digits.forEach(function(ch) {\n            frequency.set(ch, 0);\n        });\n    }\n    base54.consider = function(str, delta) {\n        for (var i = str.length; --i >= 0;) {\n            frequency.set(str[i], frequency.get(str[i]) + delta);\n        }\n    };\n    function compare(a, b) {\n        return frequency.get(b) - frequency.get(a);\n    }\n    base54.sort = function() {\n        chars = mergeSort(leading, compare).concat(mergeSort(digits, compare));\n    };\n    base54.reset = reset;\n    reset();\n    function base54(num) {\n        var ret = \"\", base = 54;\n        num++;\n        do {\n            num--;\n            ret += chars[num % base];\n            num = Math.floor(num / base);\n            base = 64;\n        } while (num > 0);\n        return ret;\n    }\n    return base54;\n})();\n\nexport {\n    base54,\n    SymbolDef,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    all,\n    defaults,\n    find_if,\n    first_in_statement,\n    HOP,\n    keep_name,\n    makePredicate,\n    map_add,\n    MAP,\n    member,\n    merge,\n    noop,\n    remove,\n    return_false,\n    return_null,\n    return_this,\n    return_true,\n    string_template,\n} from \"../utils.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_DWLoop,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Infinity,\n    AST_IterationStatement,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NaN,\n    AST_New,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_Sub,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolBlockDeclaration,\n    AST_SymbolCatch,\n    AST_SymbolConst,\n    AST_SymbolDeclaration,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolFunarg,\n    AST_SymbolLambda,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeTransformer,\n    TreeWalker,\n    walk_body,\n} from \"../ast.js\";\nimport {\n    is_identifier_string,\n    JS_Parse_Error,\n    parse,\n    PRECEDENCE,\n} from \"../parse.js\";\nimport { OutputStream } from \"../output.js\";\nimport {\n    base54,\n    SymbolDef,\n} from \"../scope.js\";\n\nfunction Compressor(options, false_by_default) {\n    if (!(this instanceof Compressor))\n        return new Compressor(options, false_by_default);\n    TreeTransformer.call(this, this.before, this.after);\n    if (options.defaults !== undefined && !options.defaults) false_by_default = true;\n    this.options = defaults(options, {\n        arguments     : false,\n        arrows        : !false_by_default,\n        booleans      : !false_by_default,\n        booleans_as_integers : false,\n        collapse_vars : !false_by_default,\n        comparisons   : !false_by_default,\n        computed_props: !false_by_default,\n        conditionals  : !false_by_default,\n        dead_code     : !false_by_default,\n        defaults      : true,\n        directives    : !false_by_default,\n        drop_console  : false,\n        drop_debugger : !false_by_default,\n        ecma          : 5,\n        evaluate      : !false_by_default,\n        expression    : false,\n        global_defs   : false,\n        hoist_funs    : false,\n        hoist_props   : !false_by_default,\n        hoist_vars    : false,\n        ie8           : false,\n        if_return     : !false_by_default,\n        inline        : !false_by_default,\n        join_vars     : !false_by_default,\n        keep_classnames: false,\n        keep_fargs    : true,\n        keep_fnames   : false,\n        keep_infinity : false,\n        loops         : !false_by_default,\n        module        : false,\n        negate_iife   : !false_by_default,\n        passes        : 1,\n        properties    : !false_by_default,\n        pure_getters  : !false_by_default && \"strict\",\n        pure_funcs    : null,\n        reduce_funcs  : !false_by_default,\n        reduce_vars   : !false_by_default,\n        sequences     : !false_by_default,\n        side_effects  : !false_by_default,\n        switches      : !false_by_default,\n        top_retain    : null,\n        toplevel      : !!(options && options[\"top_retain\"]),\n        typeofs       : !false_by_default,\n        unsafe        : false,\n        unsafe_arrows : false,\n        unsafe_comps  : false,\n        unsafe_Function: false,\n        unsafe_math   : false,\n        unsafe_methods: false,\n        unsafe_proto  : false,\n        unsafe_regexp : false,\n        unsafe_undefined: false,\n        unused        : !false_by_default,\n        warnings      : false,\n    }, true);\n    var global_defs = this.options[\"global_defs\"];\n    if (typeof global_defs == \"object\") for (var key in global_defs) {\n        if (/^@/.test(key) && HOP(global_defs, key)) {\n            global_defs[key.slice(1)] = parse(global_defs[key], {\n                expression: true\n            });\n        }\n    }\n    if (this.options[\"inline\"] === true) this.options[\"inline\"] = 3;\n    var pure_funcs = this.options[\"pure_funcs\"];\n    if (typeof pure_funcs == \"function\") {\n        this.pure_funcs = pure_funcs;\n    } else {\n        this.pure_funcs = pure_funcs ? function(node) {\n            return !pure_funcs.includes(node.expression.print_to_string());\n        } : return_true;\n    }\n    var top_retain = this.options[\"top_retain\"];\n    if (top_retain instanceof RegExp) {\n        this.top_retain = function(def) {\n            return top_retain.test(def.name);\n        };\n    } else if (typeof top_retain == \"function\") {\n        this.top_retain = top_retain;\n    } else if (top_retain) {\n        if (typeof top_retain == \"string\") {\n            top_retain = top_retain.split(/,/);\n        }\n        this.top_retain = function(def) {\n            return top_retain.includes(def.name);\n        };\n    }\n    if (this.options[\"module\"]) {\n        this.directives[\"use strict\"] = true;\n        this.options[\"toplevel\"] = true;\n    }\n    var toplevel = this.options[\"toplevel\"];\n    this.toplevel = typeof toplevel == \"string\" ? {\n        funcs: /funcs/.test(toplevel),\n        vars: /vars/.test(toplevel)\n    } : {\n        funcs: toplevel,\n        vars: toplevel\n    };\n    var sequences = this.options[\"sequences\"];\n    this.sequences_limit = sequences == 1 ? 800 : sequences | 0;\n    this.warnings_produced = {};\n}\n\nCompressor.prototype = new TreeTransformer;\nmerge(Compressor.prototype, {\n    option: function(key) { return this.options[key]; },\n    exposed: function(def) {\n        if (def.export) return true;\n        if (def.global) for (var i = 0, len = def.orig.length; i < len; i++)\n            if (!this.toplevel[def.orig[i] instanceof AST_SymbolDefun ? \"funcs\" : \"vars\"])\n                return true;\n        return false;\n    },\n    in_boolean_context: function() {\n        if (!this.option(\"booleans\")) return false;\n        var self = this.self();\n        for (var i = 0, p; p = this.parent(i); i++) {\n            if (p instanceof AST_SimpleStatement\n                || p instanceof AST_Conditional && p.condition === self\n                || p instanceof AST_DWLoop && p.condition === self\n                || p instanceof AST_For && p.condition === self\n                || p instanceof AST_If && p.condition === self\n                || p instanceof AST_UnaryPrefix && p.operator == \"!\" && p.expression === self) {\n                return true;\n            }\n            if (p instanceof AST_Binary && (p.operator == \"&&\" || p.operator == \"||\")\n                || p instanceof AST_Conditional\n                || p.tail_node() === self) {\n                self = p;\n            } else {\n                return false;\n            }\n        }\n    },\n    compress: function(node) {\n        node = node.resolve_defines(this);\n        if (this.option(\"expression\")) {\n            node.process_expression(true);\n        }\n        var passes = +this.options.passes || 1;\n        var min_count = 1 / 0;\n        var stopping = false;\n        var mangle = { ie8: this.option(\"ie8\") };\n        for (var pass = 0; pass < passes; pass++) {\n            node.figure_out_scope(mangle);\n            if (pass === 0 && this.option(\"drop_console\")) {\n                // must be run before reduce_vars and compress pass\n                node = node.drop_console();\n            }\n            if (pass > 0 || this.option(\"reduce_vars\"))\n                node.reset_opt_flags(this);\n            node = node.transform(this);\n            if (passes > 1) {\n                var count = 0;\n                node.walk(new TreeWalker(function() {\n                    count++;\n                }));\n                this.info(\"pass \" + pass + \": last_count: \" + min_count + \", count: \" + count);\n                if (count < min_count) {\n                    min_count = count;\n                    stopping = false;\n                } else if (stopping) {\n                    break;\n                } else {\n                    stopping = true;\n                }\n            }\n        }\n        if (this.option(\"expression\")) {\n            node.process_expression(false);\n        }\n        return node;\n    },\n    info: function() {\n        if (this.options.warnings == \"verbose\") {\n            AST_Node.warn.apply(AST_Node, arguments);\n        }\n    },\n    warn: function(text, props) {\n        if (this.options.warnings) {\n            // only emit unique warnings\n            var message = string_template(text, props);\n            if (!(message in this.warnings_produced)) {\n                this.warnings_produced[message] = true;\n                AST_Node.warn.apply(AST_Node, arguments);\n            }\n        }\n    },\n    clear_warnings: function() {\n        this.warnings_produced = {};\n    },\n    before: function(node, descend, in_list) {\n        if (node._squeezed) return node;\n        var was_scope = false;\n        if (node instanceof AST_Scope) {\n            node = node.hoist_properties(this);\n            node = node.hoist_declarations(this);\n            was_scope = true;\n        }\n        // Before https://github.com/mishoo/UglifyJS2/pull/1602 AST_Node.optimize()\n        // would call AST_Node.transform() if a different instance of AST_Node is\n        // produced after def_optimize().\n        // This corrupts TreeWalker.stack, which cause AST look-ups to malfunction.\n        // Migrate and defer all children's AST_Node.transform() to below, which\n        // will now happen after this parent AST_Node has been properly substituted\n        // thus gives a consistent AST snapshot.\n        descend(node, this);\n        // Existing code relies on how AST_Node.optimize() worked, and omitting the\n        // following replacement call would result in degraded efficiency of both\n        // output and performance.\n        descend(node, this);\n        var opt = node.optimize(this);\n        if (was_scope && opt instanceof AST_Scope) {\n            opt.drop_unused(this);\n            descend(opt, this);\n        }\n        if (opt === node) opt._squeezed = true;\n        return opt;\n    }\n});\n\n(function() {\n\n    function def_optimize(node, optimizer) {\n        node.DEFMETHOD(\"optimize\", function(compressor) {\n            var self = this;\n            if (self._optimized) return self;\n            if (compressor.has_directive(\"use asm\")) return self;\n            var opt = optimizer(self, compressor);\n            opt._optimized = true;\n            return opt;\n        });\n    }\n\n    def_optimize(AST_Node, function(self, compressor) {\n        return self;\n    });\n\n    AST_Toplevel.DEFMETHOD(\"drop_console\", function() {\n        return this.transform(new TreeTransformer(function(self) {\n            if (self.TYPE == \"Call\") {\n                var exp = self.expression;\n                if (exp instanceof AST_PropAccess) {\n                    var name = exp.expression;\n                    while (name.expression) {\n                        name = name.expression;\n                    }\n                    if (is_undeclared_ref(name) && name.name == \"console\") {\n                        return make_node(AST_Undefined, self);\n                    }\n                }\n            }\n        }));\n    });\n\n    AST_Node.DEFMETHOD(\"equivalent_to\", function(node) {\n        return this.TYPE == node.TYPE && this.print_to_string() == node.print_to_string();\n    });\n\n    AST_Scope.DEFMETHOD(\"process_expression\", function(insert, compressor) {\n        var self = this;\n        var tt = new TreeTransformer(function(node) {\n            if (insert && node instanceof AST_SimpleStatement) {\n                return make_node(AST_Return, node, {\n                    value: node.body\n                });\n            }\n            if (!insert && node instanceof AST_Return) {\n                if (compressor) {\n                    var value = node.value && node.value.drop_side_effect_free(compressor, true);\n                    return value ? make_node(AST_SimpleStatement, node, {\n                        body: value\n                    }) : make_node(AST_EmptyStatement, node);\n                }\n                return make_node(AST_SimpleStatement, node, {\n                    body: node.value || make_node(AST_UnaryPrefix, node, {\n                        operator: \"void\",\n                        expression: make_node(AST_Number, node, {\n                            value: 0\n                        })\n                    })\n                });\n            }\n            if (node instanceof AST_Class || node instanceof AST_Lambda && node !== self) {\n                return node;\n            }\n            if (node instanceof AST_Block) {\n                var index = node.body.length - 1;\n                if (index >= 0) {\n                    node.body[index] = node.body[index].transform(tt);\n                }\n            } else if (node instanceof AST_If) {\n                node.body = node.body.transform(tt);\n                if (node.alternative) {\n                    node.alternative = node.alternative.transform(tt);\n                }\n            } else if (node instanceof AST_With) {\n                node.body = node.body.transform(tt);\n            }\n            return node;\n        });\n        self.transform(tt);\n    });\n\n    function read_property(obj, key) {\n        key = get_value(key);\n        if (key instanceof AST_Node) return;\n        var value;\n        if (obj instanceof AST_Array) {\n            var elements = obj.elements;\n            if (key == \"length\") return make_node_from_constant(elements.length, obj);\n            if (typeof key == \"number\" && key in elements) value = elements[key];\n        } else if (obj instanceof AST_Object) {\n            key = \"\" + key;\n            var props = obj.properties;\n            for (var i = props.length; --i >= 0;) {\n                var prop = props[i];\n                if (!(prop instanceof AST_ObjectKeyVal)) return;\n                if (!value && props[i].key === key) value = props[i].value;\n            }\n        }\n        return value instanceof AST_SymbolRef && value.fixed_value() || value;\n    }\n\n    function is_modified(compressor, tw, node, value, level, immutable) {\n        var parent = tw.parent(level);\n        var lhs = is_lhs(node, parent);\n        if (lhs) return lhs;\n        if (!immutable\n            && parent instanceof AST_Call\n            && parent.expression === node\n            && !(value instanceof AST_Arrow)\n            && !(value instanceof AST_Class)\n            && !parent.is_expr_pure(compressor)\n            && (!(value instanceof AST_Function)\n                || !(parent instanceof AST_New) && value.contains_this())) {\n            return true;\n        }\n        if (parent instanceof AST_Array) {\n            return is_modified(compressor, tw, parent, parent, level + 1);\n        }\n        if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n            var obj = tw.parent(level + 1);\n            return is_modified(compressor, tw, obj, obj, level + 2);\n        }\n        if (parent instanceof AST_PropAccess && parent.expression === node) {\n            var prop = read_property(value, parent.property);\n            return !immutable && is_modified(compressor, tw, parent, prop, level + 1);\n        }\n    }\n\n    (function(def_reduce_vars) {\n        def_reduce_vars(AST_Node, noop);\n\n        function reset_def(compressor, def) {\n            def.assignments = 0;\n            def.chained = false;\n            def.direct_access = false;\n            def.escaped = false;\n            if (def.scope.pinned()) {\n                def.fixed = false;\n            } else if (def.orig[0] instanceof AST_SymbolConst || !compressor.exposed(def)) {\n                def.fixed = def.init;\n            } else {\n                def.fixed = false;\n            }\n            def.recursive_refs = 0;\n            def.references = [];\n            def.should_replace = undefined;\n            def.single_use = undefined;\n        }\n\n        function reset_variables(tw, compressor, node) {\n            node.variables.forEach(function(def) {\n                reset_def(compressor, def);\n                if (def.fixed === null) {\n                    def.safe_ids = tw.safe_ids;\n                    mark(tw, def, true);\n                } else if (def.fixed) {\n                    tw.loop_ids[def.id] = tw.in_loop;\n                    mark(tw, def, true);\n                }\n            });\n        }\n\n        function reset_block_variables(compressor, node) {\n            if (node.block_scope) node.block_scope.variables.forEach(function(def) {\n                reset_def(compressor, def);\n            });\n        }\n\n        function push(tw) {\n            tw.safe_ids = Object.create(tw.safe_ids);\n        }\n\n        function pop(tw) {\n            tw.safe_ids = Object.getPrototypeOf(tw.safe_ids);\n        }\n\n        function mark(tw, def, safe) {\n            tw.safe_ids[def.id] = safe;\n        }\n\n        function safe_to_read(tw, def) {\n            if (def.single_use == \"m\") return false;\n            if (tw.safe_ids[def.id]) {\n                if (def.fixed == null) {\n                    var orig = def.orig[0];\n                    if (orig instanceof AST_SymbolFunarg || orig.name == \"arguments\") return false;\n                    def.fixed = make_node(AST_Undefined, orig);\n                }\n                return true;\n            }\n            return def.fixed instanceof AST_Defun;\n        }\n\n        function safe_to_assign(tw, def, value) {\n            if (def.fixed === undefined) return true;\n            if (def.fixed === null && def.safe_ids) {\n                def.safe_ids[def.id] = false;\n                delete def.safe_ids;\n                return true;\n            }\n            if (!HOP(tw.safe_ids, def.id)) return false;\n            if (!safe_to_read(tw, def)) return false;\n            if (def.fixed === false) return false;\n            if (def.fixed != null && (!value || def.references.length > def.assignments)) return false;\n            return all(def.orig, function(sym) {\n                return !(sym instanceof AST_SymbolConst\n                    || sym instanceof AST_SymbolDefun\n                    || sym instanceof AST_SymbolLambda);\n            });\n        }\n\n        function ref_once(tw, compressor, def) {\n            return compressor.option(\"unused\")\n                && !def.scope.pinned()\n                && def.references.length - def.recursive_refs == 1\n                && tw.loop_ids[def.id] === tw.in_loop;\n        }\n\n        function is_immutable(value) {\n            if (!value) return false;\n            return value.is_constant()\n                || value instanceof AST_Lambda\n                || value instanceof AST_This;\n        }\n\n        function mark_escaped(tw, d, scope, node, value, level, depth) {\n            var parent = tw.parent(level);\n            if (value) {\n                if (value.is_constant()) return;\n                if (value instanceof AST_ClassExpression) return;\n            }\n            if (parent instanceof AST_Assign && parent.operator == \"=\" && node === parent.right\n                || parent instanceof AST_Call && (node !== parent.expression || parent instanceof AST_New)\n                || parent instanceof AST_Exit && node === parent.value && node.scope !== d.scope\n                || parent instanceof AST_VarDef && node === parent.value\n                || parent instanceof AST_Yield && node === parent.value && node.scope !== d.scope) {\n                if (depth > 1 && !(value && value.is_constant_expression(scope))) depth = 1;\n                if (!d.escaped || d.escaped > depth) d.escaped = depth;\n                return;\n            } else if (parent instanceof AST_Array\n                || parent instanceof AST_Await\n                || parent instanceof AST_Binary && lazy_op.has(parent.operator)\n                || parent instanceof AST_Conditional && node !== parent.condition\n                || parent instanceof AST_Expansion\n                || parent instanceof AST_Sequence && node === parent.tail_node()) {\n                mark_escaped(tw, d, scope, parent, parent, level + 1, depth);\n            } else if (parent instanceof AST_ObjectKeyVal && node === parent.value) {\n                var obj = tw.parent(level + 1);\n                mark_escaped(tw, d, scope, obj, obj, level + 2, depth);\n            } else if (parent instanceof AST_PropAccess && node === parent.expression) {\n                value = read_property(value, parent.property);\n                mark_escaped(tw, d, scope, parent, value, level + 1, depth + 1);\n                if (value) return;\n            }\n            if (level > 0) return;\n            if (parent instanceof AST_Sequence && node !== parent.tail_node()) return;\n            if (parent instanceof AST_SimpleStatement) return;\n            d.direct_access = true;\n        }\n\n        var suppressor = new TreeWalker(function(node) {\n            if (!(node instanceof AST_Symbol)) return;\n            var d = node.definition();\n            if (!d) return;\n            if (node instanceof AST_SymbolRef) d.references.push(node);\n            d.fixed = false;\n        });\n        def_reduce_vars(AST_Accessor, function(tw, descend, compressor) {\n            push(tw);\n            reset_variables(tw, compressor, this);\n            descend();\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Arrow, mark_func_expr);\n        def_reduce_vars(AST_Assign, function(tw, descend, compressor) {\n            var node = this;\n            if (node.left instanceof AST_Destructuring) {\n                node.left.walk(suppressor);\n                return;\n            }\n            var sym = node.left;\n            if (!(sym instanceof AST_SymbolRef)) return;\n            var d = sym.definition();\n            var safe = safe_to_assign(tw, d, sym.scope, node.right);\n            d.assignments++;\n            if (!safe) return;\n            var fixed = d.fixed;\n            if (!fixed && node.operator != \"=\") return;\n            var eq = node.operator == \"=\";\n            var value = eq ? node.right : node;\n            if (is_modified(compressor, tw, node, value, 0)) return;\n            d.references.push(sym);\n            if (!eq) d.chained = true;\n            d.fixed = eq ? function() {\n                return node.right;\n            } : function() {\n                return make_node(AST_Binary, node, {\n                    operator: node.operator.slice(0, -1),\n                    left: fixed instanceof AST_Node ? fixed : fixed(),\n                    right: node.right\n                });\n            };\n            mark(tw, d, false);\n            node.right.walk(tw);\n            mark(tw, d, true);\n            mark_escaped(tw, d, sym.scope, node, value, 0, 1);\n            return true;\n        });\n        def_reduce_vars(AST_Binary, function(tw) {\n            if (!lazy_op.has(this.operator)) return;\n            this.left.walk(tw);\n            push(tw);\n            this.right.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Block, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n        });\n        def_reduce_vars(AST_Case, function(tw) {\n            push(tw);\n            this.expression.walk(tw);\n            pop(tw);\n            push(tw);\n            walk_body(this, tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_ClassExpression, function(tw, descend) {\n            this.inlined = false;\n            push(tw);\n            descend();\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Conditional, function(tw) {\n            this.condition.walk(tw);\n            push(tw);\n            this.consequent.walk(tw);\n            pop(tw);\n            push(tw);\n            this.alternative.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Default, function(tw, descend) {\n            push(tw);\n            descend();\n            pop(tw);\n            return true;\n        });\n\n        function mark_def_node(tw, descend, compressor) {\n            this.inlined = false;\n            var save_ids = tw.safe_ids;\n            tw.safe_ids = Object.create(null);\n            reset_variables(tw, compressor, this);\n            descend();\n            tw.safe_ids = save_ids;\n            return true;\n        }\n\n        def_reduce_vars(AST_DefClass, mark_def_node);\n        def_reduce_vars(AST_Defun, mark_def_node);\n        def_reduce_vars(AST_Do, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            this.body.walk(tw);\n            if (has_break_or_continue(this)) {\n                pop(tw);\n                push(tw);\n            }\n            this.condition.walk(tw);\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n        def_reduce_vars(AST_For, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            if (this.init) this.init.walk(tw);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            if (this.condition) this.condition.walk(tw);\n            this.body.walk(tw);\n            if (this.step) {\n                if (has_break_or_continue(this)) {\n                    pop(tw);\n                    push(tw);\n                }\n                this.step.walk(tw);\n            }\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n        def_reduce_vars(AST_ForIn, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            this.init.walk(suppressor);\n            this.object.walk(tw);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n\n        function mark_func_expr(tw, descend, compressor) {\n            var node = this;\n            node.inlined = false;\n            push(tw);\n            reset_variables(tw, compressor, node);\n            var iife;\n            if (!node.name\n                && (iife = tw.parent()) instanceof AST_Call\n                && iife.expression === node) {\n                // Virtually turn IIFE parameters into variable definitions:\n                //   (function(a,b) {...})(c,d) => (function() {var a=c,b=d; ...})()\n                // So existing transformation rules can work on them.\n                node.argnames.forEach(function(arg, i) {\n                    if (!arg.definition) return;\n                    var d = arg.definition();\n                    if (d.fixed === undefined && (!node.uses_arguments || tw.has_directive(\"use strict\"))) {\n                        d.fixed = function() {\n                            return iife.args[i] || make_node(AST_Undefined, iife);\n                        };\n                        tw.loop_ids[d.id] = tw.in_loop;\n                        mark(tw, d, true);\n                    } else {\n                        d.fixed = false;\n                    }\n                });\n            }\n            descend();\n            pop(tw);\n            return true;\n        }\n\n        def_reduce_vars(AST_Function, mark_func_expr);\n        def_reduce_vars(AST_If, function(tw) {\n            this.condition.walk(tw);\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            if (this.alternative) {\n                push(tw);\n                this.alternative.walk(tw);\n                pop(tw);\n            }\n            return true;\n        });\n        def_reduce_vars(AST_LabeledStatement, function(tw) {\n            push(tw);\n            this.body.walk(tw);\n            pop(tw);\n            return true;\n        });\n        def_reduce_vars(AST_SymbolCatch, function() {\n            this.definition().fixed = false;\n        });\n        def_reduce_vars(AST_SymbolRef, function(tw, descend, compressor) {\n            var d = this.definition();\n            d.references.push(this);\n            if (d.references.length == 1\n                && !d.fixed\n                && d.orig[0] instanceof AST_SymbolDefun) {\n                tw.loop_ids[d.id] = tw.in_loop;\n            }\n            var value;\n            if (d.fixed === undefined || !safe_to_read(tw, d)) {\n                d.fixed = false;\n            } else if (d.fixed) {\n                value = this.fixed_value();\n                if (value instanceof AST_Lambda && recursive_ref(tw, d)) {\n                    d.recursive_refs++;\n                } else if (value && !compressor.exposed(d) && ref_once(tw, compressor, d)) {\n                    d.single_use = value instanceof AST_Lambda && !value.pinned()\n                        || value instanceof AST_Class\n                        || d.scope === this.scope && value.is_constant_expression();\n                } else {\n                    d.single_use = false;\n                }\n                if (is_modified(compressor, tw, this, value, 0, is_immutable(value))) {\n                    if (d.single_use) {\n                        d.single_use = \"m\";\n                    } else {\n                        d.fixed = false;\n                    }\n                }\n            }\n            mark_escaped(tw, d, this.scope, this, value, 0, 1);\n        });\n        def_reduce_vars(AST_Toplevel, function(tw, descend, compressor) {\n            this.globals.forEach(function(def) {\n                reset_def(compressor, def);\n            });\n            reset_variables(tw, compressor, this);\n        });\n        def_reduce_vars(AST_Try, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            push(tw);\n            walk_body(this, tw);\n            pop(tw);\n            if (this.bcatch) {\n                push(tw);\n                this.bcatch.walk(tw);\n                pop(tw);\n            }\n            if (this.bfinally) this.bfinally.walk(tw);\n            return true;\n        });\n        def_reduce_vars(AST_Unary, function(tw, descend) {\n            var node = this;\n            if (node.operator != \"++\" && node.operator != \"--\") return;\n            var exp = node.expression;\n            if (!(exp instanceof AST_SymbolRef)) return;\n            var d = exp.definition();\n            var safe = safe_to_assign(tw, d, true);\n            d.assignments++;\n            if (!safe) return;\n            var fixed = d.fixed;\n            if (!fixed) return;\n            d.references.push(exp);\n            d.chained = true;\n            d.fixed = function() {\n                return make_node(AST_Binary, node, {\n                    operator: node.operator.slice(0, -1),\n                    left: make_node(AST_UnaryPrefix, node, {\n                        operator: \"+\",\n                        expression: fixed instanceof AST_Node ? fixed : fixed()\n                    }),\n                    right: make_node(AST_Number, node, {\n                        value: 1\n                    })\n                });\n            };\n            mark(tw, d, true);\n            return true;\n        });\n        def_reduce_vars(AST_VarDef, function(tw, descend) {\n            var node = this;\n            if (node.name instanceof AST_Destructuring) {\n                node.name.walk(suppressor);\n                return;\n            }\n            var d = node.name.definition();\n            if (node.value) {\n                if (safe_to_assign(tw, d, node.value)) {\n                    d.fixed = function() {\n                        return node.value;\n                    };\n                    tw.loop_ids[d.id] = tw.in_loop;\n                    mark(tw, d, false);\n                    descend();\n                    mark(tw, d, true);\n                    return true;\n                } else {\n                    d.fixed = false;\n                }\n            }\n        });\n        def_reduce_vars(AST_While, function(tw, descend, compressor) {\n            reset_block_variables(compressor, this);\n            var saved_loop = tw.in_loop;\n            tw.in_loop = this;\n            push(tw);\n            descend();\n            pop(tw);\n            tw.in_loop = saved_loop;\n            return true;\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"reduce_vars\", func);\n    });\n\n    AST_Toplevel.DEFMETHOD(\"reset_opt_flags\", function(compressor) {\n        var self = this;\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var tw = new TreeWalker(function(node, descend) {\n            node._squeezed = false;\n            node._optimized = false;\n            if (reduce_vars) {\n                if (compressor.top_retain) {\n                    if (tw.parent() === self)\n                        node._top = true;\n                    else\n                        delete node._top;\n                }\n                return node.reduce_vars(tw, descend, compressor);\n            }\n        });\n        // Stack of look-up tables to keep track of whether a `SymbolDef` has been\n        // properly assigned before use:\n        // - `push()` & `pop()` when visiting conditional branches\n        // - backup & restore via `save_ids` when visiting out-of-order sections\n        tw.safe_ids = Object.create(null);\n        tw.in_loop = null;\n        tw.loop_ids = Object.create(null);\n        self.walk(tw);\n    });\n\n    AST_Symbol.DEFMETHOD(\"fixed_value\", function() {\n        var fixed = this.definition().fixed;\n        if (!fixed || fixed instanceof AST_Node) return fixed;\n        return fixed();\n    });\n\n    AST_SymbolRef.DEFMETHOD(\"is_immutable\", function() {\n        var orig = this.definition().orig;\n        return orig.length == 1 && orig[0] instanceof AST_SymbolLambda;\n    });\n\n    function is_func_expr(node) {\n        return node instanceof AST_Arrow || node instanceof AST_Function;\n    }\n\n    function is_lhs_read_only(lhs) {\n        if (lhs instanceof AST_This) return true;\n        if (lhs instanceof AST_SymbolRef) return lhs.definition().orig[0] instanceof AST_SymbolLambda;\n        if (lhs instanceof AST_PropAccess) {\n            lhs = lhs.expression;\n            if (lhs instanceof AST_SymbolRef) {\n                if (lhs.is_immutable()) return false;\n                lhs = lhs.fixed_value();\n            }\n            if (!lhs) return true;\n            if (lhs instanceof AST_RegExp) return false;\n            if (lhs instanceof AST_Constant) return true;\n            return is_lhs_read_only(lhs);\n        }\n        return false;\n    }\n\n    function is_ref_of(ref, type) {\n        if (!(ref instanceof AST_SymbolRef)) return false;\n        var orig = ref.definition().orig;\n        for (var i = orig.length; --i >= 0;) {\n            if (orig[i] instanceof type) return true;\n        }\n    }\n\n    function find_variable(compressor, name) {\n        var scope, i = 0;\n        while (scope = compressor.parent(i++)) {\n            if (scope instanceof AST_Scope) break;\n            if (scope instanceof AST_Catch && scope.argname) {\n                scope = scope.argname.definition().scope;\n                break;\n            }\n        }\n        return scope.find_variable(name);\n    }\n\n    function make_node(ctor, orig, props) {\n        if (!props) props = {};\n        if (orig) {\n            if (!props.start) props.start = orig.start;\n            if (!props.end) props.end = orig.end;\n        }\n        return new ctor(props);\n    }\n\n    function make_sequence(orig, expressions) {\n        if (expressions.length == 1) return expressions[0];\n        return make_node(AST_Sequence, orig, {\n            expressions: expressions.reduce(merge_sequence, [])\n        });\n    }\n\n    function make_node_from_constant(val, orig) {\n        switch (typeof val) {\n          case \"string\":\n            return make_node(AST_String, orig, {\n                value: val\n            });\n          case \"number\":\n            if (isNaN(val)) return make_node(AST_NaN, orig);\n            if (isFinite(val)) {\n                return 1 / val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                    operator: \"-\",\n                    expression: make_node(AST_Number, orig, { value: -val })\n                }) : make_node(AST_Number, orig, { value: val });\n            }\n            return val < 0 ? make_node(AST_UnaryPrefix, orig, {\n                operator: \"-\",\n                expression: make_node(AST_Infinity, orig)\n            }) : make_node(AST_Infinity, orig);\n          case \"boolean\":\n            return make_node(val ? AST_True : AST_False, orig);\n          case \"undefined\":\n            return make_node(AST_Undefined, orig);\n          default:\n            if (val === null) {\n                return make_node(AST_Null, orig, { value: null });\n            }\n            if (val instanceof RegExp) {\n                return make_node(AST_RegExp, orig, { value: val });\n            }\n            throw new Error(string_template(\"Can't handle constant of type: {type}\", {\n                type: typeof val\n            }));\n        }\n    }\n\n    // we shouldn't compress (1,func)(something) to\n    // func(something) because that changes the meaning of\n    // the func (becomes lexical instead of global).\n    function maintain_this_binding(parent, orig, val) {\n        if (parent instanceof AST_UnaryPrefix && parent.operator == \"delete\"\n            || parent instanceof AST_Call && parent.expression === orig\n                && (val instanceof AST_PropAccess || val instanceof AST_SymbolRef && val.name == \"eval\")) {\n            return make_sequence(orig, [ make_node(AST_Number, orig, { value: 0 }), val ]);\n        }\n        return val;\n    }\n\n    function merge_sequence(array, node) {\n        if (node instanceof AST_Sequence) {\n            array.push.apply(array, node.expressions);\n        } else {\n            array.push(node);\n        }\n        return array;\n    }\n\n    function as_statement_array(thing) {\n        if (thing === null) return [];\n        if (thing instanceof AST_BlockStatement) return thing.body;\n        if (thing instanceof AST_EmptyStatement) return [];\n        if (thing instanceof AST_Statement) return [ thing ];\n        throw new Error(\"Can't convert thing to statement array\");\n    }\n\n    function is_empty(thing) {\n        if (thing === null) return true;\n        if (thing instanceof AST_EmptyStatement) return true;\n        if (thing instanceof AST_BlockStatement) return thing.body.length == 0;\n        return false;\n    }\n\n    function can_be_evicted_from_block(node) {\n        return !(\n            node instanceof AST_DefClass ||\n            node instanceof AST_Defun ||\n            node instanceof AST_Let ||\n            node instanceof AST_Const ||\n            node instanceof AST_Export ||\n            node instanceof AST_Import\n        );\n    }\n\n    function loop_body(x) {\n        if (x instanceof AST_IterationStatement) {\n            return x.body instanceof AST_BlockStatement ? x.body : x;\n        }\n        return x;\n    }\n\n    function is_iife_call(node) {\n        if (node.TYPE != \"Call\") return false;\n        return node.expression instanceof AST_Function || is_iife_call(node.expression);\n    }\n\n    function is_undeclared_ref(node) {\n        return node instanceof AST_SymbolRef && node.definition().undeclared;\n    }\n\n    var global_names = makePredicate(\"Array Boolean clearInterval clearTimeout console Date decodeURI decodeURIComponent encodeURI encodeURIComponent Error escape eval EvalError Function isFinite isNaN JSON Math Number parseFloat parseInt RangeError ReferenceError RegExp Object setInterval setTimeout String SyntaxError TypeError unescape URIError\");\n    AST_SymbolRef.DEFMETHOD(\"is_declared\", function(compressor) {\n        return !this.definition().undeclared\n            || compressor.option(\"unsafe\") && global_names.has(this.name);\n    });\n\n    var identifier_atom = makePredicate(\"Infinity NaN undefined\");\n    function is_identifier_atom(node) {\n        return node instanceof AST_Infinity\n            || node instanceof AST_NaN\n            || node instanceof AST_Undefined;\n    }\n\n    function tighten_body(statements, compressor) {\n        var in_loop, in_try;\n        var scope = compressor.find_parent(AST_Scope).get_defun_scope();\n        find_loop_scope_try();\n        var CHANGED, max_iter = 10;\n        do {\n            CHANGED = false;\n            eliminate_spurious_blocks(statements);\n            if (compressor.option(\"dead_code\")) {\n                eliminate_dead_code(statements, compressor);\n            }\n            if (compressor.option(\"if_return\")) {\n                handle_if_return(statements, compressor);\n            }\n            if (compressor.sequences_limit > 0) {\n                sequencesize(statements, compressor);\n                sequencesize_2(statements, compressor);\n            }\n            if (compressor.option(\"join_vars\")) {\n                join_consecutive_vars(statements);\n            }\n            if (compressor.option(\"collapse_vars\")) {\n                collapse(statements, compressor);\n            }\n        } while (CHANGED && max_iter-- > 0);\n\n        function find_loop_scope_try() {\n            var node = compressor.self(), level = 0;\n            do {\n                if (node instanceof AST_Catch || node instanceof AST_Finally) {\n                    level++;\n                } else if (node instanceof AST_IterationStatement) {\n                    in_loop = true;\n                } else if (node instanceof AST_Scope) {\n                    scope = node;\n                    break;\n                } else if (node instanceof AST_Try) {\n                    in_try = true;\n                }\n            } while (node = compressor.parent(level++));\n        }\n\n        // Search from right to left for assignment-like expressions:\n        // - `var a = x;`\n        // - `a = x;`\n        // - `++a`\n        // For each candidate, scan from left to right for first usage, then try\n        // to fold assignment into the site for compression.\n        // Will not attempt to collapse assignments into or past code blocks\n        // which are not sequentially executed, e.g. loops and conditionals.\n        function collapse(statements, compressor) {\n            if (scope.pinned()) return statements;\n            var args;\n            var candidates = [];\n            var stat_index = statements.length;\n            var scanner = new TreeTransformer(function(node, descend) {\n                if (abort) return node;\n                // Skip nodes before `candidate` as quickly as possible\n                if (!hit) {\n                    if (node !== hit_stack[hit_index]) return node;\n                    hit_index++;\n                    if (hit_index < hit_stack.length) return handle_custom_scan_order(node);\n                    hit = true;\n                    stop_after = find_stop(node, 0);\n                    if (stop_after === node) abort = true;\n                    return node;\n                }\n                // Stop immediately if these node types are encountered\n                var parent = scanner.parent();\n                if (node instanceof AST_Assign && node.operator != \"=\" && lhs.equivalent_to(node.left)\n                    || node instanceof AST_Await\n                    || node instanceof AST_Call && lhs instanceof AST_PropAccess && lhs.equivalent_to(node.expression)\n                    || node instanceof AST_Debugger\n                    || node instanceof AST_Destructuring\n                    || node instanceof AST_Expansion\n                       && node.expression instanceof AST_Symbol\n                       && node.expression.definition().references.length > 1\n                    || node instanceof AST_IterationStatement && !(node instanceof AST_For)\n                    || node instanceof AST_LoopControl\n                    || node instanceof AST_Try\n                    || node instanceof AST_With\n                    || node instanceof AST_Yield\n                    || parent instanceof AST_For && node !== parent.init\n                    || !replace_all\n                        && (node instanceof AST_SymbolRef && !node.is_declared(compressor))) {\n                    abort = true;\n                    return node;\n                }\n                // Stop only if candidate is found within conditional branches\n                if (!stop_if_hit && (!lhs_local || !replace_all)\n                    && (parent instanceof AST_Binary && lazy_op.has(parent.operator) && parent.left !== node\n                        || parent instanceof AST_Conditional && parent.condition !== node\n                        || parent instanceof AST_If && parent.condition !== node)) {\n                    stop_if_hit = parent;\n                }\n                // Replace variable with assignment when found\n                if (can_replace\n                    && !(node instanceof AST_SymbolDeclaration)\n                    && lhs.equivalent_to(node)) {\n                    if (stop_if_hit) {\n                        abort = true;\n                        return node;\n                    }\n                    if (is_lhs(node, parent)) {\n                        if (value_def) replaced++;\n                        return node;\n                    }\n                    CHANGED = abort = true;\n                    replaced++;\n                    compressor.info(\"Collapsing {name} [{file}:{line},{col}]\", {\n                        name: node.print_to_string(),\n                        file: node.start.file,\n                        line: node.start.line,\n                        col: node.start.col\n                    });\n                    if (candidate instanceof AST_UnaryPostfix) {\n                        return make_node(AST_UnaryPrefix, candidate, candidate);\n                    }\n                    if (candidate instanceof AST_VarDef) {\n                        if (value_def) {\n                            abort = false;\n                            return node;\n                        }\n                        var def = candidate.name.definition();\n                        var value = candidate.value;\n                        if (def.references.length - def.replaced == 1 && !compressor.exposed(def)) {\n                            def.replaced++;\n                            if (funarg && is_identifier_atom(value)) {\n                                return value.transform(compressor);\n                            } else {\n                                return maintain_this_binding(parent, node, value);\n                            }\n                        }\n                        return make_node(AST_Assign, candidate, {\n                            operator: \"=\",\n                            left: make_node(AST_SymbolRef, candidate.name, candidate.name),\n                            right: value\n                        });\n                    }\n                    candidate.write_only = false;\n                    return candidate;\n                }\n                // These node types have child nodes that execute sequentially,\n                // but are otherwise not safe to scan into or beyond them.\n                var sym;\n                if (node instanceof AST_Call\n                    || node instanceof AST_Exit\n                        && (side_effects || lhs instanceof AST_PropAccess || may_modify(lhs))\n                    || node instanceof AST_PropAccess\n                        && (side_effects || node.expression.may_throw_on_access(compressor))\n                    || node instanceof AST_SymbolRef\n                        && (lvalues.get(node.name) || side_effects && may_modify(node))\n                    || node instanceof AST_VarDef && node.value\n                        && (lvalues.has(node.name.name) || side_effects && may_modify(node.name))\n                    || (sym = is_lhs(node.left, node))\n                        && (sym instanceof AST_PropAccess || lvalues.has(sym.name))\n                    || may_throw\n                        && (in_try ? node.has_side_effects(compressor) : side_effects_external(node))) {\n                    stop_after = node;\n                    if (node instanceof AST_Scope) abort = true;\n                }\n                return handle_custom_scan_order(node);\n            }, function(node) {\n                if (abort) return;\n                if (stop_after === node) abort = true;\n                if (stop_if_hit === node) stop_if_hit = null;\n            });\n            var multi_replacer = new TreeTransformer(function(node) {\n                if (abort) return node;\n                // Skip nodes before `candidate` as quickly as possible\n                if (!hit) {\n                    if (node !== hit_stack[hit_index]) return node;\n                    hit_index++;\n                    if (hit_index < hit_stack.length) return;\n                    hit = true;\n                    return node;\n                }\n                // Replace variable when found\n                if (node instanceof AST_SymbolRef\n                    && node.name == def.name) {\n                    if (!--replaced) abort = true;\n                    if (is_lhs(node, multi_replacer.parent())) return node;\n                    def.replaced++;\n                    value_def.replaced--;\n                    return candidate.value;\n                }\n                // Skip (non-executed) functions and (leading) default case in switch statements\n                if (node instanceof AST_Default || node instanceof AST_Scope) return node;\n            });\n            while (--stat_index >= 0) {\n                // Treat parameters as collapsible in IIFE, i.e.\n                //   function(a, b){ ... }(x());\n                // would be translated into equivalent assignments:\n                //   var a = x(), b = undefined;\n                if (stat_index == 0 && compressor.option(\"unused\")) extract_args();\n                // Find collapsible assignments\n                var hit_stack = [];\n                extract_candidates(statements[stat_index]);\n                while (candidates.length > 0) {\n                    hit_stack = candidates.pop();\n                    var hit_index = 0;\n                    var candidate = hit_stack[hit_stack.length - 1];\n                    var value_def = null;\n                    var stop_after = null;\n                    var stop_if_hit = null;\n                    var lhs = get_lhs(candidate);\n                    if (!lhs || is_lhs_read_only(lhs) || lhs.has_side_effects(compressor)) continue;\n                    // Locate symbols which may execute code outside of scanning range\n                    var lvalues = get_lvalues(candidate);\n                    var lhs_local = is_lhs_local(lhs);\n                    if (lhs instanceof AST_SymbolRef) lvalues.set(lhs.name, false);\n                    var side_effects = value_has_side_effects(candidate);\n                    var replace_all = replace_all_symbols();\n                    var may_throw = candidate.may_throw(compressor);\n                    var funarg = candidate.name instanceof AST_SymbolFunarg;\n                    var hit = funarg;\n                    var abort = false, replaced = 0, can_replace = !args || !hit;\n                    if (!can_replace) {\n                        for (var j = compressor.self().argnames.lastIndexOf(candidate.name) + 1; !abort && j < args.length; j++) {\n                            args[j].transform(scanner);\n                        }\n                        can_replace = true;\n                    }\n                    for (var i = stat_index; !abort && i < statements.length; i++) {\n                        statements[i].transform(scanner);\n                    }\n                    if (value_def) {\n                        var def = candidate.name.definition();\n                        if (abort && def.references.length - def.replaced > replaced) replaced = false;\n                        else {\n                            abort = false;\n                            hit_index = 0;\n                            hit = funarg;\n                            for (var i = stat_index; !abort && i < statements.length; i++) {\n                                statements[i].transform(multi_replacer);\n                            }\n                            value_def.single_use = false;\n                        }\n                    }\n                    if (replaced && !remove_candidate(candidate)) statements.splice(stat_index, 1);\n                }\n            }\n\n            function handle_custom_scan_order(node) {\n                // Skip (non-executed) functions\n                if (node instanceof AST_Scope) return node;\n                // Scan case expressions first in a switch statement\n                if (node instanceof AST_Switch) {\n                    node.expression = node.expression.transform(scanner);\n                    for (var i = 0, len = node.body.length; !abort && i < len; i++) {\n                        var branch = node.body[i];\n                        if (branch instanceof AST_Case) {\n                            if (!hit) {\n                                if (branch !== hit_stack[hit_index]) continue;\n                                hit_index++;\n                            }\n                            branch.expression = branch.expression.transform(scanner);\n                            if (!replace_all) break;\n                        }\n                    }\n                    abort = true;\n                    return node;\n                }\n            }\n\n            function has_overlapping_symbol(fn, arg, fn_strict) {\n                var found = false, scan_this = !(fn instanceof AST_Arrow);\n                arg.walk(new TreeWalker(function(node, descend) {\n                    if (found) return true;\n                    if (node instanceof AST_SymbolRef && fn.variables.has(node.name)) {\n                        var s = node.definition().scope;\n                        if (s !== scope) while (s = s.parent_scope) {\n                            if (s === scope) return true;\n                        }\n                        return found = true;\n                    }\n                    if ((fn_strict || scan_this) && node instanceof AST_This) {\n                        return found = true;\n                    }\n                    if (node instanceof AST_Scope && !(node instanceof AST_Arrow)) {\n                        var prev = scan_this;\n                        scan_this = false;\n                        descend();\n                        scan_this = prev;\n                        return true;\n                    }\n                }));\n                return found;\n            }\n\n            function extract_args() {\n                var iife, fn = compressor.self();\n                if (is_func_expr(fn)\n                    && !fn.name\n                    && !fn.uses_arguments\n                    && !fn.pinned()\n                    && (iife = compressor.parent()) instanceof AST_Call\n                    && iife.expression === fn\n                    && all(iife.args, function(arg) {\n                        return !(arg instanceof AST_Expansion);\n                    })) {\n                    var fn_strict = compressor.has_directive(\"use strict\");\n                    if (fn_strict && !member(fn_strict, fn.body)) fn_strict = false;\n                    var len = fn.argnames.length;\n                    args = iife.args.slice(len);\n                    var names = new Set();\n                    for (var i = len; --i >= 0;) {\n                        var sym = fn.argnames[i];\n                        var arg = iife.args[i];\n                        args.unshift(make_node(AST_VarDef, sym, {\n                            name: sym,\n                            value: arg\n                        }));\n                        if (names.has(sym.name)) continue;\n                        names.add(sym.name);\n                        if (sym instanceof AST_Expansion) {\n                            var elements = iife.args.slice(i);\n                            if (all(elements, function(arg) {\n                                return !has_overlapping_symbol(fn, arg, fn_strict);\n                            })) {\n                                candidates.unshift([ make_node(AST_VarDef, sym, {\n                                    name: sym.expression,\n                                    value: make_node(AST_Array, iife, {\n                                        elements: elements\n                                    })\n                                }) ]);\n                            }\n                        } else {\n                            if (!arg) {\n                                arg = make_node(AST_Undefined, sym).transform(compressor);\n                            } else if (arg instanceof AST_Lambda && arg.pinned()\n                                || has_overlapping_symbol(fn, arg, fn_strict)) {\n                                arg = null;\n                            }\n                            if (arg) candidates.unshift([ make_node(AST_VarDef, sym, {\n                                name: sym,\n                                value: arg\n                            }) ]);\n                        }\n                    }\n                }\n            }\n\n            function extract_candidates(expr) {\n                hit_stack.push(expr);\n                if (expr instanceof AST_Assign) {\n                    if (!expr.left.has_side_effects(compressor)) {\n                        candidates.push(hit_stack.slice());\n                    }\n                    extract_candidates(expr.right);\n                } else if (expr instanceof AST_Binary) {\n                    extract_candidates(expr.left);\n                    extract_candidates(expr.right);\n                } else if (expr instanceof AST_Call) {\n                    extract_candidates(expr.expression);\n                    expr.args.forEach(extract_candidates);\n                } else if (expr instanceof AST_Case) {\n                    extract_candidates(expr.expression);\n                } else if (expr instanceof AST_Conditional) {\n                    extract_candidates(expr.condition);\n                    extract_candidates(expr.consequent);\n                    extract_candidates(expr.alternative);\n                } else if (expr instanceof AST_Definitions\n                    && (compressor.option(\"unused\") || !(expr instanceof AST_Const))) {\n                    var len = expr.definitions.length;\n                    // limit number of trailing variable definitions for consideration\n                    var i = len - 200;\n                    if (i < 0) i = 0;\n                    for (; i < len; i++) {\n                        extract_candidates(expr.definitions[i]);\n                    }\n                } else if (expr instanceof AST_DWLoop) {\n                    extract_candidates(expr.condition);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_Exit) {\n                    if (expr.value) extract_candidates(expr.value);\n                } else if (expr instanceof AST_For) {\n                    if (expr.init) extract_candidates(expr.init);\n                    if (expr.condition) extract_candidates(expr.condition);\n                    if (expr.step) extract_candidates(expr.step);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_ForIn) {\n                    extract_candidates(expr.object);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                } else if (expr instanceof AST_If) {\n                    extract_candidates(expr.condition);\n                    if (!(expr.body instanceof AST_Block)) {\n                        extract_candidates(expr.body);\n                    }\n                    if (expr.alternative && !(expr.alternative instanceof AST_Block)) {\n                        extract_candidates(expr.alternative);\n                    }\n                } else if (expr instanceof AST_Sequence) {\n                    expr.expressions.forEach(extract_candidates);\n                } else if (expr instanceof AST_SimpleStatement) {\n                    extract_candidates(expr.body);\n                } else if (expr instanceof AST_Switch) {\n                    extract_candidates(expr.expression);\n                    expr.body.forEach(extract_candidates);\n                } else if (expr instanceof AST_Unary) {\n                    if (expr.operator == \"++\" || expr.operator == \"--\") {\n                        candidates.push(hit_stack.slice());\n                    }\n                } else if (expr instanceof AST_VarDef) {\n                    if (expr.value) {\n                        candidates.push(hit_stack.slice());\n                        extract_candidates(expr.value);\n                    }\n                }\n                hit_stack.pop();\n            }\n\n            function find_stop(node, level, write_only) {\n                var parent = scanner.parent(level);\n                if (parent instanceof AST_Assign) {\n                    if (write_only\n                        && !(parent.left instanceof AST_PropAccess\n                            || lvalues.has(parent.left.name))) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Binary) {\n                    if (write_only && (!lazy_op.has(parent.operator) || parent.left === node)) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Call) return node;\n                if (parent instanceof AST_Case) return node;\n                if (parent instanceof AST_Conditional) {\n                    if (write_only && parent.condition === node) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_Definitions) {\n                    return find_stop(parent, level + 1, true);\n                }\n                if (parent instanceof AST_Exit) {\n                    return write_only ? find_stop(parent, level + 1, write_only) : node;\n                }\n                if (parent instanceof AST_If) {\n                    if (write_only && parent.condition === node) {\n                        return find_stop(parent, level + 1, write_only);\n                    }\n                    return node;\n                }\n                if (parent instanceof AST_IterationStatement) return node;\n                if (parent instanceof AST_Sequence) {\n                    return find_stop(parent, level + 1, parent.tail_node() !== node);\n                }\n                if (parent instanceof AST_SimpleStatement) {\n                    return find_stop(parent, level + 1, true);\n                }\n                if (parent instanceof AST_Switch) return node;\n                if (parent instanceof AST_VarDef) return node;\n                return null;\n            }\n\n            function mangleable_var(var_def) {\n                var value = var_def.value;\n                if (!(value instanceof AST_SymbolRef)) return;\n                if (value.name == \"arguments\") return;\n                var def = value.definition();\n                if (def.undeclared) return;\n                return value_def = def;\n            }\n\n            function get_lhs(expr) {\n                if (expr instanceof AST_VarDef && expr.name instanceof AST_SymbolDeclaration) {\n                    var def = expr.name.definition();\n                    if (!member(expr.name, def.orig)) return;\n                    var referenced = def.references.length - def.replaced;\n                    if (!referenced) return;\n                    var declared = def.orig.length - def.eliminated;\n                    if (declared > 1 && !(expr.name instanceof AST_SymbolFunarg)\n                        || (referenced > 1 ? mangleable_var(expr) : !compressor.exposed(def))) {\n                        return make_node(AST_SymbolRef, expr.name, expr.name);\n                    }\n                } else {\n                    var lhs = expr[expr instanceof AST_Assign ? \"left\" : \"expression\"];\n                    return !is_ref_of(lhs, AST_SymbolConst) && lhs;\n                }\n            }\n\n            function get_rvalue(expr) {\n                return expr[expr instanceof AST_Assign ? \"right\" : \"value\"];\n            }\n\n            function get_lvalues(expr) {\n                var lvalues = new Map();\n                if (expr instanceof AST_Unary) return lvalues;\n                var tw = new TreeWalker(function(node, descend) {\n                    var sym = node;\n                    while (sym instanceof AST_PropAccess) sym = sym.expression;\n                    if (sym instanceof AST_SymbolRef || sym instanceof AST_This) {\n                        lvalues.set(sym.name, lvalues.get(sym.name) || is_modified(compressor, tw, node, node, 0));\n                    }\n                });\n                get_rvalue(expr).walk(tw);\n                return lvalues;\n            }\n\n            function remove_candidate(expr) {\n                if (expr.name instanceof AST_SymbolFunarg) {\n                    var iife = compressor.parent(), argnames = compressor.self().argnames;\n                    var index = argnames.indexOf(expr.name);\n                    if (index < 0) {\n                        iife.args.length = Math.min(iife.args.length, argnames.length - 1);\n                    } else {\n                        var args = iife.args;\n                        if (args[index]) args[index] = make_node(AST_Number, args[index], {\n                            value: 0\n                        });\n                    }\n                    return true;\n                }\n                var found = false;\n                return statements[stat_index].transform(new TreeTransformer(function(node, descend, in_list) {\n                    if (found) return node;\n                    if (node === expr || node.body === expr) {\n                        found = true;\n                        if (node instanceof AST_VarDef) {\n                            node.value = null;\n                            return node;\n                        }\n                        return in_list ? MAP.skip : null;\n                    }\n                }, function(node) {\n                    if (node instanceof AST_Sequence) switch (node.expressions.length) {\n                      case 0: return null;\n                      case 1: return node.expressions[0];\n                    }\n                }));\n            }\n\n            function is_lhs_local(lhs) {\n                while (lhs instanceof AST_PropAccess) lhs = lhs.expression;\n                return lhs instanceof AST_SymbolRef\n                    && lhs.definition().scope === scope\n                    && !(in_loop\n                        && (lvalues.has(lhs.name)\n                            || candidate instanceof AST_Unary\n                            || candidate instanceof AST_Assign && candidate.operator != \"=\"));\n            }\n\n            function value_has_side_effects(expr) {\n                if (expr instanceof AST_Unary) return false;\n                return get_rvalue(expr).has_side_effects(compressor);\n            }\n\n            function replace_all_symbols() {\n                if (side_effects) return false;\n                if (value_def) return true;\n                if (lhs instanceof AST_SymbolRef) {\n                    var def = lhs.definition();\n                    if (def.references.length - def.replaced == (candidate instanceof AST_VarDef ? 1 : 2)) {\n                        return true;\n                    }\n                }\n                return false;\n            }\n\n            function may_modify(sym) {\n                if (!sym.definition) return true; // AST_Destructuring\n                var def = sym.definition();\n                if (def.orig.length == 1 && def.orig[0] instanceof AST_SymbolDefun) return false;\n                if (def.scope.get_defun_scope() !== scope) return true;\n                return !all(def.references, function(ref) {\n                    var s = ref.scope.get_defun_scope();\n                    // \"block\" scope within AST_Catch\n                    if (s.TYPE == \"Scope\") s = s.parent_scope;\n                    return s === scope;\n                });\n            }\n\n            function side_effects_external(node, lhs) {\n                if (node instanceof AST_Assign) return side_effects_external(node.left, true);\n                if (node instanceof AST_Unary) return side_effects_external(node.expression, true);\n                if (node instanceof AST_VarDef) return node.value && side_effects_external(node.value);\n                if (lhs) {\n                    if (node instanceof AST_Dot) return side_effects_external(node.expression, true);\n                    if (node instanceof AST_Sub) return side_effects_external(node.expression, true);\n                    if (node instanceof AST_SymbolRef) return node.definition().scope !== scope;\n                }\n                return false;\n            }\n        }\n\n        function eliminate_spurious_blocks(statements) {\n            var seen_dirs = [];\n            for (var i = 0; i < statements.length;) {\n                var stat = statements[i];\n                if (stat instanceof AST_BlockStatement && all(stat.body, can_be_evicted_from_block)) {\n                    CHANGED = true;\n                    eliminate_spurious_blocks(stat.body);\n                    [].splice.apply(statements, [i, 1].concat(stat.body));\n                    i += stat.body.length;\n                } else if (stat instanceof AST_EmptyStatement) {\n                    CHANGED = true;\n                    statements.splice(i, 1);\n                } else if (stat instanceof AST_Directive) {\n                    if (seen_dirs.indexOf(stat.value) < 0) {\n                        i++;\n                        seen_dirs.push(stat.value);\n                    } else {\n                        CHANGED = true;\n                        statements.splice(i, 1);\n                    }\n                } else i++;\n            }\n        }\n\n        function handle_if_return(statements, compressor) {\n            var self = compressor.self();\n            var multiple_if_returns = has_multiple_if_returns(statements);\n            var in_lambda = self instanceof AST_Lambda;\n            for (var i = statements.length; --i >= 0;) {\n                var stat = statements[i];\n                var j = next_index(i);\n                var next = statements[j];\n\n                if (in_lambda && !next && stat instanceof AST_Return) {\n                    if (!stat.value) {\n                        CHANGED = true;\n                        statements.splice(i, 1);\n                        continue;\n                    }\n                    if (stat.value instanceof AST_UnaryPrefix && stat.value.operator == \"void\") {\n                        CHANGED = true;\n                        statements[i] = make_node(AST_SimpleStatement, stat, {\n                            body: stat.value.expression\n                        });\n                        continue;\n                    }\n                }\n\n                if (stat instanceof AST_If) {\n                    var ab = aborts(stat.body);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.condition = stat.condition.negate(compressor);\n                        var body = as_statement_array_with_return(stat.body, ab);\n                        stat.body = make_node(AST_BlockStatement, stat, {\n                            body: as_statement_array(stat.alternative).concat(extract_functions())\n                        });\n                        stat.alternative = make_node(AST_BlockStatement, stat, {\n                            body: body\n                        });\n                        statements[i] = stat.transform(compressor);\n                        continue;\n                    }\n\n                    var ab = aborts(stat.alternative);\n                    if (can_merge_flow(ab)) {\n                        if (ab.label) {\n                            remove(ab.label.thedef.references, ab);\n                        }\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.body = make_node(AST_BlockStatement, stat.body, {\n                            body: as_statement_array(stat.body).concat(extract_functions())\n                        });\n                        var body = as_statement_array_with_return(stat.alternative, ab);\n                        stat.alternative = make_node(AST_BlockStatement, stat.alternative, {\n                            body: body\n                        });\n                        statements[i] = stat.transform(compressor);\n                        continue;\n                    }\n                }\n\n                if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                    var value = stat.body.value;\n                    //---\n                    // pretty silly case, but:\n                    // if (foo()) return; return; ==> foo(); return;\n                    if (!value && !stat.alternative\n                        && (in_lambda && !next || next instanceof AST_Return && !next.value)) {\n                        CHANGED = true;\n                        statements[i] = make_node(AST_SimpleStatement, stat.condition, {\n                            body: stat.condition\n                        });\n                        continue;\n                    }\n                    //---\n                    // if (foo()) return x; return y; ==> return foo() ? x : y;\n                    if (value && !stat.alternative && next instanceof AST_Return && next.value) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = next;\n                        statements.splice(i, 1, stat.transform(compressor));\n                        statements.splice(j, 1);\n                        continue;\n                    }\n                    //---\n                    // if (foo()) return x; [ return ; ] ==> return foo() ? x : undefined;\n                    if (value && !stat.alternative\n                        && (!next && in_lambda && multiple_if_returns\n                            || next instanceof AST_Return)) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = next || make_node(AST_Return, stat, {\n                            value: null\n                        });\n                        statements.splice(i, 1, stat.transform(compressor));\n                        if (next) statements.splice(j, 1);\n                        continue;\n                    }\n                    //---\n                    // if (a) return b; if (c) return d; e; ==> return a ? b : c ? d : void e;\n                    //\n                    // if sequences is not enabled, this can lead to an endless loop (issue #866).\n                    // however, with sequences on this helps producing slightly better output for\n                    // the example code.\n                    var prev = statements[prev_index(i)];\n                    if (compressor.option(\"sequences\") && in_lambda && !stat.alternative\n                        && prev instanceof AST_If && prev.body instanceof AST_Return\n                        && next_index(j) == statements.length && next instanceof AST_SimpleStatement) {\n                        CHANGED = true;\n                        stat = stat.clone();\n                        stat.alternative = make_node(AST_BlockStatement, next, {\n                            body: [\n                                next,\n                                make_node(AST_Return, next, {\n                                    value: null\n                                })\n                            ]\n                        });\n                        statements.splice(i, 1, stat.transform(compressor));\n                        statements.splice(j, 1);\n                        continue;\n                    }\n                }\n            }\n\n            function has_multiple_if_returns(statements) {\n                var n = 0;\n                for (var i = statements.length; --i >= 0;) {\n                    var stat = statements[i];\n                    if (stat instanceof AST_If && stat.body instanceof AST_Return) {\n                        if (++n > 1) return true;\n                    }\n                }\n                return false;\n            }\n\n            function is_return_void(value) {\n                return !value || value instanceof AST_UnaryPrefix && value.operator == \"void\";\n            }\n\n            function can_merge_flow(ab) {\n                if (!ab) return false;\n                for (var j = i + 1, len = statements.length; j < len; j++) {\n                    var stat = statements[j];\n                    if (stat instanceof AST_Const || stat instanceof AST_Let) return false;\n                }\n                var lct = ab instanceof AST_LoopControl ? compressor.loopcontrol_target(ab) : null;\n                return ab instanceof AST_Return && in_lambda && is_return_void(ab.value)\n                    || ab instanceof AST_Continue && self === loop_body(lct)\n                    || ab instanceof AST_Break && lct instanceof AST_BlockStatement && self === lct;\n            }\n\n            function extract_functions() {\n                var tail = statements.slice(i + 1);\n                statements.length = i + 1;\n                return tail.filter(function(stat) {\n                    if (stat instanceof AST_Defun) {\n                        statements.push(stat);\n                        return false;\n                    }\n                    return true;\n                });\n            }\n\n            function as_statement_array_with_return(node, ab) {\n                var body = as_statement_array(node).slice(0, -1);\n                if (ab.value) {\n                    body.push(make_node(AST_SimpleStatement, ab.value, {\n                        body: ab.value.expression\n                    }));\n                }\n                return body;\n            }\n\n            function next_index(i) {\n                for (var j = i + 1, len = statements.length; j < len; j++) {\n                    var stat = statements[j];\n                    if (!(stat instanceof AST_Var && declarations_only(stat))) {\n                        break;\n                    }\n                }\n                return j;\n            }\n\n            function prev_index(i) {\n                for (var j = i; --j >= 0;) {\n                    var stat = statements[j];\n                    if (!(stat instanceof AST_Var && declarations_only(stat))) {\n                        break;\n                    }\n                }\n                return j;\n            }\n        }\n\n        function eliminate_dead_code(statements, compressor) {\n            var has_quit;\n            var self = compressor.self();\n            for (var i = 0, n = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (stat instanceof AST_LoopControl) {\n                    var lct = compressor.loopcontrol_target(stat);\n                    if (stat instanceof AST_Break\n                            && !(lct instanceof AST_IterationStatement)\n                            && loop_body(lct) === self\n                        || stat instanceof AST_Continue\n                            && loop_body(lct) === self) {\n                        if (stat.label) {\n                            remove(stat.label.thedef.references, stat);\n                        }\n                    } else {\n                        statements[n++] = stat;\n                    }\n                } else {\n                    statements[n++] = stat;\n                }\n                if (aborts(stat)) {\n                    has_quit = statements.slice(i + 1);\n                    break;\n                }\n            }\n            statements.length = n;\n            CHANGED = n != len;\n            if (has_quit) has_quit.forEach(function(stat) {\n                extract_declarations_from_unreachable_code(compressor, stat, statements);\n            });\n        }\n\n        function declarations_only(node) {\n            return all(node.definitions, function(var_def) {\n                return !var_def.value;\n            });\n        }\n\n        function sequencesize(statements, compressor) {\n            if (statements.length < 2) return;\n            var seq = [], n = 0;\n            function push_seq() {\n                if (!seq.length) return;\n                var body = make_sequence(seq[0], seq);\n                statements[n++] = make_node(AST_SimpleStatement, body, { body: body });\n                seq = [];\n            }\n            for (var i = 0, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                if (stat instanceof AST_SimpleStatement) {\n                    if (seq.length >= compressor.sequences_limit) push_seq();\n                    var body = stat.body;\n                    if (seq.length > 0) body = body.drop_side_effect_free(compressor);\n                    if (body) merge_sequence(seq, body);\n                } else if (stat instanceof AST_Definitions && declarations_only(stat)\n                    || stat instanceof AST_Defun) {\n                    statements[n++] = stat;\n                } else {\n                    push_seq();\n                    statements[n++] = stat;\n                }\n            }\n            push_seq();\n            statements.length = n;\n            if (n != len) CHANGED = true;\n        }\n\n        function to_simple_statement(block, decls) {\n            if (!(block instanceof AST_BlockStatement)) return block;\n            var stat = null;\n            for (var i = 0, len = block.body.length; i < len; i++) {\n                var line = block.body[i];\n                if (line instanceof AST_Var && declarations_only(line)) {\n                    decls.push(line);\n                } else if (stat) {\n                    return false;\n                } else {\n                    stat = line;\n                }\n            }\n            return stat;\n        }\n\n        function sequencesize_2(statements, compressor) {\n            function cons_seq(right) {\n                n--;\n                CHANGED = true;\n                var left = prev.body;\n                return make_sequence(left, [ left, right ]).transform(compressor);\n            }\n            var n = 0, prev;\n            for (var i = 0; i < statements.length; i++) {\n                var stat = statements[i];\n                if (prev) {\n                    if (stat instanceof AST_Exit) {\n                        stat.value = cons_seq(stat.value || make_node(AST_Undefined, stat).transform(compressor));\n                    } else if (stat instanceof AST_For) {\n                        if (!(stat.init instanceof AST_Definitions)) {\n                            var abort = false;\n                            prev.body.walk(new TreeWalker(function(node) {\n                                if (abort || node instanceof AST_Scope) return true;\n                                if (node instanceof AST_Binary && node.operator == \"in\") {\n                                    abort = true;\n                                    return true;\n                                }\n                            }));\n                            if (!abort) {\n                                if (stat.init) stat.init = cons_seq(stat.init);\n                                else {\n                                    stat.init = prev.body;\n                                    n--;\n                                    CHANGED = true;\n                                }\n                            }\n                        }\n                    } else if (stat instanceof AST_ForIn) {\n                        if (!(stat.init instanceof AST_Const) && !(stat.init instanceof AST_Let)) {\n                            stat.object = cons_seq(stat.object);\n                        }\n                    } else if (stat instanceof AST_If) {\n                        stat.condition = cons_seq(stat.condition);\n                    } else if (stat instanceof AST_Switch) {\n                        stat.expression = cons_seq(stat.expression);\n                    } else if (stat instanceof AST_With) {\n                        stat.expression = cons_seq(stat.expression);\n                    }\n                }\n                if (compressor.option(\"conditionals\") && stat instanceof AST_If) {\n                    var decls = [];\n                    var body = to_simple_statement(stat.body, decls);\n                    var alt = to_simple_statement(stat.alternative, decls);\n                    if (body !== false && alt !== false && decls.length > 0) {\n                        var len = decls.length;\n                        decls.push(make_node(AST_If, stat, {\n                            condition: stat.condition,\n                            body: body || make_node(AST_EmptyStatement, stat.body),\n                            alternative: alt\n                        }));\n                        decls.unshift(n, 1);\n                        [].splice.apply(statements, decls);\n                        i += len;\n                        n += len + 1;\n                        prev = null;\n                        CHANGED = true;\n                        continue;\n                    }\n                }\n                statements[n++] = stat;\n                prev = stat instanceof AST_SimpleStatement ? stat : null;\n            }\n            statements.length = n;\n        }\n\n        function join_object_assignments(defn, body) {\n            if (!(defn instanceof AST_Definitions)) return;\n            var def = defn.definitions[defn.definitions.length - 1];\n            if (!(def.value instanceof AST_Object)) return;\n            var exprs;\n            if (body instanceof AST_Assign) {\n                exprs = [ body ];\n            } else if (body instanceof AST_Sequence) {\n                exprs = body.expressions.slice();\n            }\n            if (!exprs) return;\n            var trimmed = false;\n            do {\n                var node = exprs[0];\n                if (!(node instanceof AST_Assign)) break;\n                if (node.operator != \"=\") break;\n                if (!(node.left instanceof AST_PropAccess)) break;\n                var sym = node.left.expression;\n                if (!(sym instanceof AST_SymbolRef)) break;\n                if (def.name.name != sym.name) break;\n                if (!node.right.is_constant_expression(scope)) break;\n                var prop = node.left.property;\n                if (prop instanceof AST_Node) {\n                    prop = prop.evaluate(compressor);\n                }\n                if (prop instanceof AST_Node) break;\n                prop = \"\" + prop;\n                var diff = compressor.option(\"ecma\") < 6\n                    && compressor.has_directive(\"use strict\") ? function(node) {\n                    return node.key != prop && (node.key && node.key.name != prop);\n                } : function(node) {\n                    return node.key && node.key.name != prop;\n                };\n                if (!all(def.value.properties, diff)) break;\n                var p = def.value.properties.filter(function (p) { return p.key === prop; })[0];\n                if (!p) {\n                    def.value.properties.push(make_node(AST_ObjectKeyVal, node, {\n                        key: prop,\n                        value: node.right\n                    }));\n                } else {\n                    p.value = new AST_Sequence({\n                        start: p.start,\n                        expressions: [p.value.clone(), node.right.clone()],\n                        end: p.end\n                    });\n                }\n                exprs.shift();\n                trimmed = true;\n            } while (exprs.length);\n            return trimmed && exprs;\n        }\n\n        function join_consecutive_vars(statements) {\n            var defs;\n            for (var i = 0, j = -1, len = statements.length; i < len; i++) {\n                var stat = statements[i];\n                var prev = statements[j];\n                if (stat instanceof AST_Definitions) {\n                    if (prev && prev.TYPE == stat.TYPE) {\n                        prev.definitions = prev.definitions.concat(stat.definitions);\n                        CHANGED = true;\n                    } else if (defs && defs.TYPE == stat.TYPE && declarations_only(stat)) {\n                        defs.definitions = defs.definitions.concat(stat.definitions);\n                        CHANGED = true;\n                    } else {\n                        statements[++j] = stat;\n                        defs = stat;\n                    }\n                } else if (stat instanceof AST_Exit) {\n                    stat.value = extract_object_assignments(stat.value);\n                } else if (stat instanceof AST_For) {\n                    var exprs = join_object_assignments(prev, stat.init);\n                    if (exprs) {\n                        CHANGED = true;\n                        stat.init = exprs.length ? make_sequence(stat.init, exprs) : null;\n                        statements[++j] = stat;\n                    } else if (prev instanceof AST_Var && (!stat.init || stat.init.TYPE == prev.TYPE)) {\n                        if (stat.init) {\n                            prev.definitions = prev.definitions.concat(stat.init.definitions);\n                        }\n                        stat.init = prev;\n                        statements[j] = stat;\n                        CHANGED = true;\n                    } else if (defs && stat.init && defs.TYPE == stat.init.TYPE && declarations_only(stat.init)) {\n                        defs.definitions = defs.definitions.concat(stat.init.definitions);\n                        stat.init = null;\n                        statements[++j] = stat;\n                        CHANGED = true;\n                    } else {\n                        statements[++j] = stat;\n                    }\n                } else if (stat instanceof AST_ForIn) {\n                    stat.object = extract_object_assignments(stat.object);\n                } else if (stat instanceof AST_If) {\n                    stat.condition = extract_object_assignments(stat.condition);\n                } else if (stat instanceof AST_SimpleStatement) {\n                    var exprs = join_object_assignments(prev, stat.body);\n                    if (exprs) {\n                        CHANGED = true;\n                        if (!exprs.length) continue;\n                        stat.body = make_sequence(stat.body, exprs);\n                    }\n                    statements[++j] = stat;\n                } else if (stat instanceof AST_Switch) {\n                    stat.expression = extract_object_assignments(stat.expression);\n                } else if (stat instanceof AST_With) {\n                    stat.expression = extract_object_assignments(stat.expression);\n                } else {\n                    statements[++j] = stat;\n                }\n            }\n            statements.length = j + 1;\n\n            function extract_object_assignments(value) {\n                statements[++j] = stat;\n                var exprs = join_object_assignments(prev, value);\n                if (exprs) {\n                    CHANGED = true;\n                    if (exprs.length) {\n                        return make_sequence(value, exprs);\n                    } else if (value instanceof AST_Sequence) {\n                        return value.tail_node().left;\n                    } else {\n                        return value.left;\n                    }\n                }\n                return value;\n            }\n        }\n    }\n\n    function extract_declarations_from_unreachable_code(compressor, stat, target) {\n        if (!(stat instanceof AST_Defun)) {\n            compressor.warn(\"Dropping unreachable code [{file}:{line},{col}]\", stat.start);\n        }\n        stat.walk(new TreeWalker(function(node) {\n            if (node instanceof AST_Var) {\n                compressor.warn(\"Declarations in unreachable code! [{file}:{line},{col}]\", node.start);\n                node.remove_initializers();\n                target.push(node);\n                return true;\n            }\n            if (node instanceof AST_Defun && (node === stat || !compressor.has_directive(\"use strict\"))) {\n                target.push(node === stat ? node : make_node(AST_Var, node, {\n                    definitions: [\n                        make_node(AST_VarDef, node, {\n                            name: make_node(AST_SymbolVar, node.name, node.name),\n                            value: null\n                        })\n                    ]\n                }));\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                return true;\n            }\n        }));\n    }\n\n    function get_value(key) {\n        if (key instanceof AST_Constant) {\n            return key.getValue();\n        }\n        if (key instanceof AST_UnaryPrefix\n            && key.operator == \"void\"\n            && key.expression instanceof AST_Constant) {\n            return;\n        }\n        return key;\n    }\n\n    function is_undefined(node, compressor) {\n        return node.is_undefined\n            || node instanceof AST_Undefined\n            || node instanceof AST_UnaryPrefix\n                && node.operator == \"void\"\n                && !node.expression.has_side_effects(compressor);\n    }\n\n    // may_throw_on_access()\n    // returns true if this node may be null, undefined or contain `AST_Accessor`\n    (function(def_dot_throw) {\n        AST_Node.DEFMETHOD(\"may_throw_on_access\", function(compressor) {\n            return !compressor.option(\"pure_getters\")\n                || this._dot_throw(compressor);\n        });\n\n        function is_strict(compressor) {\n            return /strict/.test(compressor.option(\"pure_getters\"));\n        }\n\n        def_dot_throw(AST_Node, is_strict);\n        def_dot_throw(AST_Null, return_true);\n        def_dot_throw(AST_Undefined, return_true);\n        def_dot_throw(AST_Constant, return_false);\n        def_dot_throw(AST_Array, return_false);\n        def_dot_throw(AST_Object, function(compressor) {\n            if (!is_strict(compressor)) return false;\n            for (var i = this.properties.length; --i >=0;)\n                if (this.properties[i]._dot_throw(compressor)) return true;\n            return false;\n        });\n        def_dot_throw(AST_ObjectProperty, return_false);\n        def_dot_throw(AST_ObjectGetter, return_true);\n        def_dot_throw(AST_Expansion, function(compressor) {\n            return this.expression._dot_throw(compressor);\n        });\n        def_dot_throw(AST_Function, return_false);\n        def_dot_throw(AST_Arrow, return_false);\n        def_dot_throw(AST_UnaryPostfix, return_false);\n        def_dot_throw(AST_UnaryPrefix, function() {\n            return this.operator == \"void\";\n        });\n        def_dot_throw(AST_Binary, function(compressor) {\n            return (this.operator == \"&&\" || this.operator == \"||\")\n                && (this.left._dot_throw(compressor) || this.right._dot_throw(compressor));\n        });\n        def_dot_throw(AST_Assign, function(compressor) {\n            return this.operator == \"=\"\n                && this.right._dot_throw(compressor);\n        });\n        def_dot_throw(AST_Conditional, function(compressor) {\n            return this.consequent._dot_throw(compressor)\n                || this.alternative._dot_throw(compressor);\n        });\n        def_dot_throw(AST_Dot, function(compressor) {\n            if (!is_strict(compressor)) return false;\n            if (this.expression instanceof AST_Function && this.property == \"prototype\") return false;\n            return true;\n        });\n        def_dot_throw(AST_Sequence, function(compressor) {\n            return this.tail_node()._dot_throw(compressor);\n        });\n        def_dot_throw(AST_SymbolRef, function(compressor) {\n            if (this.is_undefined) return true;\n            if (!is_strict(compressor)) return false;\n            if (is_undeclared_ref(this) && this.is_declared(compressor)) return false;\n            if (this.is_immutable()) return false;\n            var fixed = this.fixed_value();\n            return !fixed || fixed._dot_throw(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_dot_throw\", func);\n    });\n\n    /* -----[ boolean/negation helpers ]----- */\n\n    // methods to determine whether an expression has a boolean result type\n    (function(def_is_boolean) {\n        const unary_bool = makePredicate(\"! delete\");\n        const binary_bool = makePredicate(\"in instanceof == != === !== < <= >= >\");\n        def_is_boolean(AST_Node, return_false);\n        def_is_boolean(AST_UnaryPrefix, function() {\n            return unary_bool.has(this.operator);\n        });\n        def_is_boolean(AST_Binary, function() {\n            return binary_bool.has(this.operator)\n                || lazy_op.has(this.operator)\n                    && this.left.is_boolean()\n                    && this.right.is_boolean();\n        });\n        def_is_boolean(AST_Conditional, function() {\n            return this.consequent.is_boolean() && this.alternative.is_boolean();\n        });\n        def_is_boolean(AST_Assign, function() {\n            return this.operator == \"=\" && this.right.is_boolean();\n        });\n        def_is_boolean(AST_Sequence, function() {\n            return this.tail_node().is_boolean();\n        });\n        def_is_boolean(AST_True, return_true);\n        def_is_boolean(AST_False, return_true);\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_boolean\", func);\n    });\n\n    // methods to determine if an expression has a numeric result type\n    (function(def_is_number) {\n        def_is_number(AST_Node, return_false);\n        def_is_number(AST_Number, return_true);\n        var unary = makePredicate(\"+ - ~ ++ --\");\n        def_is_number(AST_Unary, function() {\n            return unary.has(this.operator);\n        });\n        var binary = makePredicate(\"- * / % & | ^ << >> >>>\");\n        def_is_number(AST_Binary, function(compressor) {\n            return binary.has(this.operator) || this.operator == \"+\"\n                && this.left.is_number(compressor)\n                && this.right.is_number(compressor);\n        });\n        def_is_number(AST_Assign, function(compressor) {\n            return binary.has(this.operator.slice(0, -1))\n                || this.operator == \"=\" && this.right.is_number(compressor);\n        });\n        def_is_number(AST_Sequence, function(compressor) {\n            return this.tail_node().is_number(compressor);\n        });\n        def_is_number(AST_Conditional, function(compressor) {\n            return this.consequent.is_number(compressor) && this.alternative.is_number(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_number\", func);\n    });\n\n    // methods to determine if an expression has a string result type\n    (function(def_is_string) {\n        def_is_string(AST_Node, return_false);\n        def_is_string(AST_String, return_true);\n        def_is_string(AST_TemplateString, function() {\n            return this.segments.length === 1;\n        });\n        def_is_string(AST_UnaryPrefix, function() {\n            return this.operator == \"typeof\";\n        });\n        def_is_string(AST_Binary, function(compressor) {\n            return this.operator == \"+\" &&\n                (this.left.is_string(compressor) || this.right.is_string(compressor));\n        });\n        def_is_string(AST_Assign, function(compressor) {\n            return (this.operator == \"=\" || this.operator == \"+=\") && this.right.is_string(compressor);\n        });\n        def_is_string(AST_Sequence, function(compressor) {\n            return this.tail_node().is_string(compressor);\n        });\n        def_is_string(AST_Conditional, function(compressor) {\n            return this.consequent.is_string(compressor) && this.alternative.is_string(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_string\", func);\n    });\n\n    var lazy_op = makePredicate(\"&& ||\");\n    var unary_side_effects = makePredicate(\"delete ++ --\");\n\n    function is_lhs(node, parent) {\n        if (parent instanceof AST_Unary && unary_side_effects.has(parent.operator)) return parent.expression;\n        if (parent instanceof AST_Assign && parent.left === node) return node;\n    }\n\n    (function(def_find_defs) {\n        function to_node(value, orig) {\n            if (value instanceof AST_Node) return make_node(value.CTOR, orig, value);\n            if (Array.isArray(value)) return make_node(AST_Array, orig, {\n                elements: value.map(function(value) {\n                    return to_node(value, orig);\n                })\n            });\n            if (value && typeof value == \"object\") {\n                var props = [];\n                for (var key in value) if (HOP(value, key)) {\n                    props.push(make_node(AST_ObjectKeyVal, orig, {\n                        key: key,\n                        value: to_node(value[key], orig)\n                    }));\n                }\n                return make_node(AST_Object, orig, {\n                    properties: props\n                });\n            }\n            return make_node_from_constant(value, orig);\n        }\n\n        function warn(compressor, node) {\n            compressor.warn(\"global_defs \" + node.print_to_string() + \" redefined [{file}:{line},{col}]\", node.start);\n        }\n\n        AST_Toplevel.DEFMETHOD(\"resolve_defines\", function(compressor) {\n            if (!compressor.option(\"global_defs\")) return this;\n            this.figure_out_scope({ ie8: compressor.option(\"ie8\") });\n            return this.transform(new TreeTransformer(function(node) {\n                var def = node._find_defs(compressor, \"\");\n                if (!def) return;\n                var level = 0, child = node, parent;\n                while (parent = this.parent(level++)) {\n                    if (!(parent instanceof AST_PropAccess)) break;\n                    if (parent.expression !== child) break;\n                    child = parent;\n                }\n                if (is_lhs(child, parent)) {\n                    warn(compressor, node);\n                    return;\n                }\n                return def;\n            }));\n        });\n        def_find_defs(AST_Node, noop);\n        def_find_defs(AST_Dot, function(compressor, suffix) {\n            return this.expression._find_defs(compressor, \".\" + this.property + suffix);\n        });\n        def_find_defs(AST_SymbolDeclaration, function(compressor) {\n            if (!this.global()) return;\n            if (HOP(compressor.option(\"global_defs\"), this.name)) warn(compressor, this);\n        });\n        def_find_defs(AST_SymbolRef, function(compressor, suffix) {\n            if (!this.global()) return;\n            var defines = compressor.option(\"global_defs\");\n            var name = this.name + suffix;\n            if (HOP(defines, name)) return to_node(defines[name], this);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"_find_defs\", func);\n    });\n\n    function best_of_expression(ast1, ast2) {\n        return ast1.print_to_string().length >\n            ast2.print_to_string().length\n            ? ast2 : ast1;\n    }\n\n    function best_of_statement(ast1, ast2) {\n        return best_of_expression(make_node(AST_SimpleStatement, ast1, {\n            body: ast1\n        }), make_node(AST_SimpleStatement, ast2, {\n            body: ast2\n        })).body;\n    }\n\n    function best_of(compressor, ast1, ast2) {\n        return (first_in_statement(compressor) ? best_of_statement : best_of_expression)(ast1, ast2);\n    }\n\n    function convert_to_predicate(obj) {\n        for (var key of Object.keys(obj)) {\n            obj[key] = makePredicate(obj[key]);\n        }\n    }\n\n    var object_fns = [\n        \"constructor\",\n        \"toString\",\n        \"valueOf\",\n    ];\n    var native_fns = {\n        Array: [\n            \"indexOf\",\n            \"join\",\n            \"lastIndexOf\",\n            \"slice\",\n        ].concat(object_fns),\n        Boolean: object_fns,\n        Function: object_fns,\n        Number: [\n            \"toExponential\",\n            \"toFixed\",\n            \"toPrecision\",\n        ].concat(object_fns),\n        Object: object_fns,\n        RegExp: [\n            \"test\",\n        ].concat(object_fns),\n        String: [\n            \"charAt\",\n            \"charCodeAt\",\n            \"concat\",\n            \"indexOf\",\n            \"italics\",\n            \"lastIndexOf\",\n            \"match\",\n            \"replace\",\n            \"search\",\n            \"slice\",\n            \"split\",\n            \"substr\",\n            \"substring\",\n            \"toLowerCase\",\n            \"toUpperCase\",\n            \"trim\",\n        ].concat(object_fns),\n    };\n    convert_to_predicate(native_fns);\n    var static_fns = {\n        Array: [\n            \"isArray\",\n        ],\n        Math: [\n            \"abs\",\n            \"acos\",\n            \"asin\",\n            \"atan\",\n            \"ceil\",\n            \"cos\",\n            \"exp\",\n            \"floor\",\n            \"log\",\n            \"round\",\n            \"sin\",\n            \"sqrt\",\n            \"tan\",\n            \"atan2\",\n            \"pow\",\n            \"max\",\n            \"min\",\n        ],\n        Number: [\n            \"isFinite\",\n            \"isNaN\",\n        ],\n        Object: [\n            \"create\",\n            \"getOwnPropertyDescriptor\",\n            \"getOwnPropertyNames\",\n            \"getPrototypeOf\",\n            \"isExtensible\",\n            \"isFrozen\",\n            \"isSealed\",\n            \"keys\",\n        ],\n        String: [\n            \"fromCharCode\",\n        ],\n    };\n    convert_to_predicate(static_fns);\n\n    // methods to evaluate a constant expression\n    (function(def_eval) {\n        // If the node has been successfully reduced to a constant,\n        // then its value is returned; otherwise the element itself\n        // is returned.\n        // They can be distinguished as constant value is never a\n        // descendant of AST_Node.\n        AST_Node.DEFMETHOD(\"evaluate\", function(compressor) {\n            if (!compressor.option(\"evaluate\")) return this;\n            var val = this._eval(compressor, 1);\n            if (!val || val instanceof RegExp) return val;\n            if (typeof val == \"function\" || typeof val == \"object\") return this;\n            return val;\n        });\n        var unaryPrefix = makePredicate(\"! ~ - + void\");\n        AST_Node.DEFMETHOD(\"is_constant\", function() {\n            // Accomodate when compress option evaluate=false\n            // as well as the common constant expressions !0 and -1\n            if (this instanceof AST_Constant) {\n                return !(this instanceof AST_RegExp);\n            } else {\n                return this instanceof AST_UnaryPrefix\n                    && this.expression instanceof AST_Constant\n                    && unaryPrefix.has(this.operator);\n            }\n        });\n        def_eval(AST_Statement, function() {\n            throw new Error(string_template(\"Cannot evaluate a statement [{file}:{line},{col}]\", this.start));\n        });\n        def_eval(AST_Lambda, return_this);\n        def_eval(AST_Class, return_this);\n        def_eval(AST_Node, return_this);\n        def_eval(AST_Constant, function() {\n            return this.getValue();\n        });\n        def_eval(AST_TemplateString, function() {\n            if (this.segments.length !== 1) return this;\n            return this.segments[0].value;\n        });\n        def_eval(AST_Function, function(compressor) {\n            if (compressor.option(\"unsafe\")) {\n                var fn = function() {};\n                fn.node = this;\n                fn.toString = function() {\n                    return this.node.print_to_string();\n                };\n                return fn;\n            }\n            return this;\n        });\n        def_eval(AST_Array, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var elements = [];\n                for (var i = 0, len = this.elements.length; i < len; i++) {\n                    var element = this.elements[i];\n                    var value = element._eval(compressor, depth);\n                    if (element === value) return this;\n                    elements.push(value);\n                }\n                return elements;\n            }\n            return this;\n        });\n        def_eval(AST_Object, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var val = {};\n                for (var i = 0, len = this.properties.length; i < len; i++) {\n                    var prop = this.properties[i];\n                    if (prop instanceof AST_Expansion) return this;\n                    var key = prop.key;\n                    if (key instanceof AST_Symbol) {\n                        key = key.name;\n                    } else if (key instanceof AST_Node) {\n                        key = key._eval(compressor, depth);\n                        if (key === prop.key) return this;\n                    }\n                    if (typeof Object.prototype[key] === \"function\") {\n                        return this;\n                    }\n                    if (prop.value instanceof AST_Function) continue;\n                    val[key] = prop.value._eval(compressor, depth);\n                    if (val[key] === prop.value) return this;\n                }\n                return val;\n            }\n            return this;\n        });\n        var non_converting_unary = makePredicate(\"! typeof void\");\n        def_eval(AST_UnaryPrefix, function(compressor, depth) {\n            var e = this.expression;\n            // Function would be evaluated to an array and so typeof would\n            // incorrectly return 'object'. Hence making is a special case.\n            if (compressor.option(\"typeofs\")\n                && this.operator == \"typeof\"\n                && (e instanceof AST_Lambda\n                    || e instanceof AST_SymbolRef\n                        && e.fixed_value() instanceof AST_Lambda)) {\n                return typeof function() {};\n            }\n            if (!non_converting_unary.has(this.operator)) depth++;\n            e = e._eval(compressor, depth);\n            if (e === this.expression) return this;\n            switch (this.operator) {\n              case \"!\": return !e;\n              case \"typeof\":\n                // typeof <RegExp> returns \"object\" or \"function\" on different platforms\n                // so cannot evaluate reliably\n                if (e instanceof RegExp) return this;\n                return typeof e;\n              case \"void\": return void e;\n              case \"~\": return ~e;\n              case \"-\": return -e;\n              case \"+\": return +e;\n            }\n            return this;\n        });\n        var non_converting_binary = makePredicate(\"&& || === !==\");\n        def_eval(AST_Binary, function(compressor, depth) {\n            if (!non_converting_binary.has(this.operator)) depth++;\n            var left = this.left._eval(compressor, depth);\n            if (left === this.left) return this;\n            var right = this.right._eval(compressor, depth);\n            if (right === this.right) return this;\n            var result;\n            switch (this.operator) {\n              case \"&&\"  : result = left &&  right; break;\n              case \"||\"  : result = left ||  right; break;\n              case \"|\"   : result = left |   right; break;\n              case \"&\"   : result = left &   right; break;\n              case \"^\"   : result = left ^   right; break;\n              case \"+\"   : result = left +   right; break;\n              case \"*\"   : result = left *   right; break;\n              case \"**\"  : result = Math.pow(left, right); break;\n              case \"/\"   : result = left /   right; break;\n              case \"%\"   : result = left %   right; break;\n              case \"-\"   : result = left -   right; break;\n              case \"<<\"  : result = left <<  right; break;\n              case \">>\"  : result = left >>  right; break;\n              case \">>>\" : result = left >>> right; break;\n              case \"==\"  : result = left ==  right; break;\n              case \"===\" : result = left === right; break;\n              case \"!=\"  : result = left !=  right; break;\n              case \"!==\" : result = left !== right; break;\n              case \"<\"   : result = left <   right; break;\n              case \"<=\"  : result = left <=  right; break;\n              case \">\"   : result = left >   right; break;\n              case \">=\"  : result = left >=  right; break;\n              default:\n                  return this;\n            }\n            if (isNaN(result) && compressor.find_parent(AST_With)) {\n                // leave original expression as is\n                return this;\n            }\n            return result;\n        });\n        def_eval(AST_Conditional, function(compressor, depth) {\n            var condition = this.condition._eval(compressor, depth);\n            if (condition === this.condition) return this;\n            var node = condition ? this.consequent : this.alternative;\n            var value = node._eval(compressor, depth);\n            return value === node ? this : value;\n        });\n        def_eval(AST_SymbolRef, function(compressor, depth) {\n            var fixed = this.fixed_value();\n            if (!fixed) return this;\n            var value;\n            if (HOP(fixed, \"_eval\")) {\n                value = fixed._eval();\n            } else {\n                this._eval = return_this;\n                value = fixed._eval(compressor, depth);\n                delete this._eval;\n                if (value === fixed) return this;\n                fixed._eval = function() {\n                    return value;\n                };\n            }\n            if (value && typeof value == \"object\") {\n                var escaped = this.definition().escaped;\n                if (escaped && depth > escaped) return this;\n            }\n            return value;\n        });\n        var global_objs = {\n            Array: Array,\n            Math: Math,\n            Number: Number,\n            Object: Object,\n            String: String,\n        };\n        var static_values = {\n            Math: [\n                \"E\",\n                \"LN10\",\n                \"LN2\",\n                \"LOG2E\",\n                \"LOG10E\",\n                \"PI\",\n                \"SQRT1_2\",\n                \"SQRT2\",\n            ],\n            Number: [\n                \"MAX_VALUE\",\n                \"MIN_VALUE\",\n                \"NaN\",\n                \"NEGATIVE_INFINITY\",\n                \"POSITIVE_INFINITY\",\n            ],\n        };\n        convert_to_predicate(static_values);\n        def_eval(AST_PropAccess, function(compressor, depth) {\n            if (compressor.option(\"unsafe\")) {\n                var key = this.property;\n                if (key instanceof AST_Node) {\n                    key = key._eval(compressor, depth);\n                    if (key === this.property) return this;\n                }\n                var exp = this.expression;\n                var val;\n                if (is_undeclared_ref(exp)) {\n\n                    var aa;\n                    var first_arg = exp.name === \"hasOwnProperty\"\n                        && key === \"call\"\n                        && (aa = compressor.parent() && compressor.parent().args)\n                        && (aa && aa[0]\n                        && aa[0].evaluate(compressor));\n\n                    first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;\n\n                    if (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared) {\n                        return this.clone();\n                    }\n                    var static_value = static_values[exp.name];\n                    if (!static_value || !static_value.has(key)) return this;\n                    val = global_objs[exp.name];\n                } else {\n                    val = exp._eval(compressor, depth + 1);\n                    if (!val || val === exp || !HOP(val, key)) return this;\n                    if (typeof val == \"function\") switch (key) {\n                      case \"name\":\n                        return val.node.name ? val.node.name.name : \"\";\n                      case \"length\":\n                        return val.node.argnames.length;\n                      default:\n                        return this;\n                    }\n                }\n                return val[key];\n            }\n            return this;\n        });\n        def_eval(AST_Call, function(compressor, depth) {\n            var exp = this.expression;\n            if (compressor.option(\"unsafe\") && exp instanceof AST_PropAccess) {\n                var key = exp.property;\n                if (key instanceof AST_Node) {\n                    key = key._eval(compressor, depth);\n                    if (key === exp.property) return this;\n                }\n                var val;\n                var e = exp.expression;\n                if (is_undeclared_ref(e)) {\n                    var first_arg =\n                        e.name === \"hasOwnProperty\" &&\n                        key === \"call\" &&\n                        (this.args[0] && this.args[0].evaluate(compressor));\n\n                    first_arg = first_arg instanceof AST_Dot ? first_arg.expression : first_arg;\n\n                    if ((first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)) {\n                        return this.clone();\n                    }\n                    var static_fn = static_fns[e.name];\n                    if (!static_fn || !static_fn.has(key)) return this;\n                    val = global_objs[e.name];\n                } else {\n                    val = e._eval(compressor, depth + 1);\n                    if (val === e || !val) return this;\n                    var native_fn = native_fns[val.constructor.name];\n                    if (!native_fn || !native_fn.has(key)) return this;\n                }\n                var args = [];\n                for (var i = 0, len = this.args.length; i < len; i++) {\n                    var arg = this.args[i];\n                    var value = arg._eval(compressor, depth);\n                    if (arg === value) return this;\n                    args.push(value);\n                }\n                try {\n                    return val[key].apply(val, args);\n                } catch (ex) {\n                    compressor.warn(\"Error evaluating {code} [{file}:{line},{col}]\", {\n                        code: this.print_to_string(),\n                        file: this.start.file,\n                        line: this.start.line,\n                        col: this.start.col\n                    });\n                }\n            }\n            return this;\n        });\n        def_eval(AST_New, return_this);\n    })(function(node, func) {\n        node.DEFMETHOD(\"_eval\", func);\n    });\n\n    // method to negate an expression\n    (function(def_negate) {\n        function basic_negation(exp) {\n            return make_node(AST_UnaryPrefix, exp, {\n                operator: \"!\",\n                expression: exp\n            });\n        }\n        function best(orig, alt, first_in_statement) {\n            var negated = basic_negation(orig);\n            if (first_in_statement) {\n                var stat = make_node(AST_SimpleStatement, alt, {\n                    body: alt\n                });\n                return best_of_expression(negated, stat) === stat ? alt : negated;\n            }\n            return best_of_expression(negated, alt);\n        }\n        def_negate(AST_Node, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_Statement, function() {\n            throw new Error(\"Cannot negate a statement\");\n        });\n        def_negate(AST_Function, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_Arrow, function() {\n            return basic_negation(this);\n        });\n        def_negate(AST_UnaryPrefix, function() {\n            if (this.operator == \"!\")\n                return this.expression;\n            return basic_negation(this);\n        });\n        def_negate(AST_Sequence, function(compressor) {\n            var expressions = this.expressions.slice();\n            expressions.push(expressions.pop().negate(compressor));\n            return make_sequence(this, expressions);\n        });\n        def_negate(AST_Conditional, function(compressor, first_in_statement) {\n            var self = this.clone();\n            self.consequent = self.consequent.negate(compressor);\n            self.alternative = self.alternative.negate(compressor);\n            return best(this, self, first_in_statement);\n        });\n        def_negate(AST_Binary, function(compressor, first_in_statement) {\n            var self = this.clone(), op = this.operator;\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (op) {\n                  case \"<=\" : self.operator = \">\"  ; return self;\n                  case \"<\"  : self.operator = \">=\" ; return self;\n                  case \">=\" : self.operator = \"<\"  ; return self;\n                  case \">\"  : self.operator = \"<=\" ; return self;\n                }\n            }\n            switch (op) {\n              case \"==\" : self.operator = \"!=\"; return self;\n              case \"!=\" : self.operator = \"==\"; return self;\n              case \"===\": self.operator = \"!==\"; return self;\n              case \"!==\": self.operator = \"===\"; return self;\n              case \"&&\":\n                self.operator = \"||\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n              case \"||\":\n                self.operator = \"&&\";\n                self.left = self.left.negate(compressor, first_in_statement);\n                self.right = self.right.negate(compressor);\n                return best(this, self, first_in_statement);\n            }\n            return basic_negation(this);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"negate\", function(compressor, first_in_statement) {\n            return func.call(this, compressor, first_in_statement);\n        });\n    });\n\n    var global_pure_fns = makePredicate(\"Boolean decodeURI decodeURIComponent Date encodeURI encodeURIComponent Error escape EvalError isFinite isNaN Number Object parseFloat parseInt RangeError ReferenceError String SyntaxError TypeError unescape URIError\");\n    AST_Call.DEFMETHOD(\"is_expr_pure\", function(compressor) {\n        if (compressor.option(\"unsafe\")) {\n            var expr = this.expression;\n            var first_arg = (this.args && this.args[0] && this.args[0].evaluate(compressor));\n            if (\n                expr.expression && expr.expression.name === \"hasOwnProperty\" &&\n                (first_arg == null || first_arg.thedef && first_arg.thedef.undeclared)\n            ) {\n                return false;\n            }\n            if (is_undeclared_ref(expr) && global_pure_fns.has(expr.name)) return true;\n            if (expr instanceof AST_Dot\n                && is_undeclared_ref(expr.expression)\n                && static_fns.hasOwnProperty(expr.expression.name)\n                && static_fns[expr.expression.name].has(expr.property)) {\n                return true;\n            }\n        }\n        return this.pure || !compressor.pure_funcs(this);\n    });\n    AST_Node.DEFMETHOD(\"is_call_pure\", return_false);\n    AST_Dot.DEFMETHOD(\"is_call_pure\", function(compressor) {\n        if (!compressor.option(\"unsafe\")) return;\n        const expr = this.expression;\n        let map;\n        if (expr instanceof AST_Array) {\n            map = native_fns.Array;\n        } else if (expr.is_boolean()) {\n            map = native_fns.Boolean;\n        } else if (expr.is_number(compressor)) {\n            map = native_fns.Number;\n        } else if (expr instanceof AST_RegExp) {\n            map = native_fns.RegExp;\n        } else if (expr.is_string(compressor)) {\n            map = native_fns.String;\n        } else if (!this.may_throw_on_access(compressor)) {\n            map = native_fns.Object;\n        }\n        return map && map.has(this.property);\n    });\n\n    // determine if expression has side effects\n    (function(def_has_side_effects) {\n        def_has_side_effects(AST_Node, return_true);\n\n        def_has_side_effects(AST_EmptyStatement, return_false);\n        def_has_side_effects(AST_Constant, return_false);\n        def_has_side_effects(AST_This, return_false);\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].has_side_effects(compressor))\n                    return true;\n            return false;\n        }\n\n        def_has_side_effects(AST_Block, function(compressor) {\n            return any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Call, function(compressor) {\n            if (!this.is_expr_pure(compressor)\n                && (!this.expression.is_call_pure(compressor)\n                    || this.expression.has_side_effects(compressor))) {\n                return true;\n            }\n            return any(this.args, compressor);\n        });\n        def_has_side_effects(AST_Switch, function(compressor) {\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Case, function(compressor) {\n            return this.expression.has_side_effects(compressor)\n                || any(this.body, compressor);\n        });\n        def_has_side_effects(AST_Try, function(compressor) {\n            return any(this.body, compressor)\n                || this.bcatch && this.bcatch.has_side_effects(compressor)\n                || this.bfinally && this.bfinally.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_If, function(compressor) {\n            return this.condition.has_side_effects(compressor)\n                || this.body && this.body.has_side_effects(compressor)\n                || this.alternative && this.alternative.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_LabeledStatement, function(compressor) {\n            return this.body.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_SimpleStatement, function(compressor) {\n            return this.body.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Lambda, return_false);\n        def_has_side_effects(AST_Class, return_false);\n        def_has_side_effects(AST_DefClass, return_true);\n        def_has_side_effects(AST_Binary, function(compressor) {\n            return this.left.has_side_effects(compressor)\n                || this.right.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Assign, return_true);\n        def_has_side_effects(AST_Conditional, function(compressor) {\n            return this.condition.has_side_effects(compressor)\n                || this.consequent.has_side_effects(compressor)\n                || this.alternative.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Unary, function(compressor) {\n            return unary_side_effects.has(this.operator)\n                || this.expression.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_SymbolRef, function(compressor) {\n            return !this.is_declared(compressor);\n        });\n        def_has_side_effects(AST_SymbolDeclaration, return_false);\n        def_has_side_effects(AST_Object, function(compressor) {\n            return any(this.properties, compressor);\n        });\n        def_has_side_effects(AST_ObjectProperty, function(compressor) {\n            if (this.key instanceof AST_ObjectKeyVal &&\n                    this.key.has_side_effects(compressor))\n                return true;\n            return this.value.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Array, function(compressor) {\n            return any(this.elements, compressor);\n        });\n        def_has_side_effects(AST_Dot, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Sub, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.has_side_effects(compressor)\n                || this.property.has_side_effects(compressor);\n        });\n        def_has_side_effects(AST_Sequence, function(compressor) {\n            return any(this.expressions, compressor);\n        });\n        def_has_side_effects(AST_Definitions, function(compressor) {\n            return any(this.definitions, compressor);\n        });\n        def_has_side_effects(AST_VarDef, function(compressor) {\n            return this.value;\n        });\n        def_has_side_effects(AST_TemplateSegment, return_false);\n        def_has_side_effects(AST_TemplateString, function(compressor) {\n            return any(this.segments, compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"has_side_effects\", func);\n    });\n\n    // determine if expression may throw\n    (function(def_may_throw) {\n        def_may_throw(AST_Node, return_true);\n\n        def_may_throw(AST_Class, return_false);\n        def_may_throw(AST_Constant, return_false);\n        def_may_throw(AST_EmptyStatement, return_false);\n        def_may_throw(AST_Lambda, return_false);\n        def_may_throw(AST_SymbolDeclaration, return_false);\n        def_may_throw(AST_This, return_false);\n\n        function any(list, compressor) {\n            for (var i = list.length; --i >= 0;)\n                if (list[i].may_throw(compressor))\n                    return true;\n            return false;\n        }\n\n        def_may_throw(AST_Array, function(compressor) {\n            return any(this.elements, compressor);\n        });\n        def_may_throw(AST_Assign, function(compressor) {\n            if (this.right.may_throw(compressor)) return true;\n            if (!compressor.has_directive(\"use strict\")\n                && this.operator == \"=\"\n                && this.left instanceof AST_SymbolRef) {\n                return false;\n            }\n            return this.left.may_throw(compressor);\n        });\n        def_may_throw(AST_Binary, function(compressor) {\n            return this.left.may_throw(compressor)\n                || this.right.may_throw(compressor);\n        });\n        def_may_throw(AST_Block, function(compressor) {\n            return any(this.body, compressor);\n        });\n        def_may_throw(AST_Call, function(compressor) {\n            if (any(this.args, compressor)) return true;\n            if (this.is_expr_pure(compressor)) return false;\n            if (this.expression.may_throw(compressor)) return true;\n            return !(this.expression instanceof AST_Lambda)\n                || any(this.expression.body, compressor);\n        });\n        def_may_throw(AST_Case, function(compressor) {\n            return this.expression.may_throw(compressor)\n                || any(this.body, compressor);\n        });\n        def_may_throw(AST_Conditional, function(compressor) {\n            return this.condition.may_throw(compressor)\n                || this.consequent.may_throw(compressor)\n                || this.alternative.may_throw(compressor);\n        });\n        def_may_throw(AST_Definitions, function(compressor) {\n            return any(this.definitions, compressor);\n        });\n        def_may_throw(AST_Dot, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.may_throw(compressor);\n        });\n        def_may_throw(AST_If, function(compressor) {\n            return this.condition.may_throw(compressor)\n                || this.body && this.body.may_throw(compressor)\n                || this.alternative && this.alternative.may_throw(compressor);\n        });\n        def_may_throw(AST_LabeledStatement, function(compressor) {\n            return this.body.may_throw(compressor);\n        });\n        def_may_throw(AST_Object, function(compressor) {\n            return any(this.properties, compressor);\n        });\n        def_may_throw(AST_ObjectProperty, function(compressor) {\n            return this.value.may_throw(compressor);\n        });\n        def_may_throw(AST_Return, function(compressor) {\n            return this.value && this.value.may_throw(compressor);\n        });\n        def_may_throw(AST_Sequence, function(compressor) {\n            return any(this.expressions, compressor);\n        });\n        def_may_throw(AST_SimpleStatement, function(compressor) {\n            return this.body.may_throw(compressor);\n        });\n        def_may_throw(AST_Sub, function(compressor) {\n            return this.expression.may_throw_on_access(compressor)\n                || this.expression.may_throw(compressor)\n                || this.property.may_throw(compressor);\n        });\n        def_may_throw(AST_Switch, function(compressor) {\n            return this.expression.may_throw(compressor)\n                || any(this.body, compressor);\n        });\n        def_may_throw(AST_SymbolRef, function(compressor) {\n            return !this.is_declared(compressor);\n        });\n        def_may_throw(AST_Try, function(compressor) {\n            return this.bcatch ? this.bcatch.may_throw(compressor) : any(this.body, compressor)\n                || this.bfinally && this.bfinally.may_throw(compressor);\n        });\n        def_may_throw(AST_Unary, function(compressor) {\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef)\n                return false;\n            return this.expression.may_throw(compressor);\n        });\n        def_may_throw(AST_VarDef, function(compressor) {\n            if (!this.value) return false;\n            return this.value.may_throw(compressor);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"may_throw\", func);\n    });\n\n    // determine if expression is constant\n    (function(def_is_constant_expression) {\n        function all(list) {\n            for (var i = list.length; --i >= 0;)\n                if (!list[i].is_constant_expression())\n                    return false;\n            return true;\n        }\n\n        function all_refs_local(scope) {\n            var self = this;\n            var result = true;\n            self.walk(new TreeWalker(function(node) {\n                if (!result) return true;\n                if (node instanceof AST_SymbolRef) {\n                    if (self.inlined) {\n                        result = false;\n                        return true;\n                    }\n                    var def = node.definition();\n                    if (member(def, self.enclosed)\n                        && !self.variables.has(def.name)) {\n                        if (scope) {\n                            var scope_def = scope.find_variable(node);\n                            if (def.undeclared ? !scope_def : scope_def === def) {\n                                result = \"f\";\n                                return true;\n                            }\n                        }\n                        result = false;\n                    }\n                    return true;\n                }\n                if (node instanceof AST_This && self instanceof AST_Arrow) {\n                    result = false;\n                    return true;\n                }\n            }));\n            return result;\n        }\n\n        def_is_constant_expression(AST_Node, return_false);\n        def_is_constant_expression(AST_Constant, return_true);\n        def_is_constant_expression(AST_Class, function(scope) {\n            var self = this;\n            if (self.extends && !self.extends.is_constant_expression(scope)) {\n                return false;\n            }\n            return all_refs_local.call(self, scope);\n        });\n        def_is_constant_expression(AST_Lambda, all_refs_local);\n        def_is_constant_expression(AST_Unary, function() {\n            return this.expression.is_constant_expression();\n        });\n        def_is_constant_expression(AST_Binary, function() {\n            return this.left.is_constant_expression() && this.right.is_constant_expression();\n        });\n        def_is_constant_expression(AST_Array, function() {\n            return all(this.elements);\n        });\n        def_is_constant_expression(AST_Object, function() {\n            return all(this.properties);\n        });\n        def_is_constant_expression(AST_ObjectProperty, function() {\n            return !(this.key instanceof AST_Node) && this.value.is_constant_expression();\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"is_constant_expression\", func);\n    });\n\n    // tell me if a statement aborts\n    function aborts(thing) {\n        return thing && thing.aborts();\n    }\n    (function(def) {\n        def(AST_Statement, return_null);\n        def(AST_Jump, return_this);\n        function block_aborts() {\n            for (var i = 0; i < this.body.length; i++) {\n                if (aborts(this.body[i])) {\n                    return this.body[i];\n                }\n            }\n            return null;\n        }\n        def(AST_Import, function() { return null; });\n        def(AST_BlockStatement, block_aborts);\n        def(AST_SwitchBranch, block_aborts);\n        def(AST_If, function() {\n            return this.alternative && aborts(this.body) && aborts(this.alternative) && this;\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"aborts\", func);\n    });\n\n    /* -----[ optimizers ]----- */\n\n    var directives = [\"use asm\", \"use strict\"];\n    def_optimize(AST_Directive, function(self, compressor) {\n        if (compressor.option(\"directives\")\n            && (!member(self.value, directives) || compressor.has_directive(self.value) !== self)) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Debugger, function(self, compressor) {\n        if (compressor.option(\"drop_debugger\"))\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    def_optimize(AST_LabeledStatement, function(self, compressor) {\n        if (self.body instanceof AST_Break\n            && compressor.loopcontrol_target(self.body) === self.body) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        return self.label.references.length == 0 ? self.body : self;\n    });\n\n    def_optimize(AST_Block, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        return self;\n    });\n\n    function can_be_extracted_from_if_block(node) {\n        return !(\n            node instanceof AST_Const ||\n            node instanceof AST_Let ||\n            node instanceof AST_Class\n        );\n    }\n\n    def_optimize(AST_BlockStatement, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        switch (self.body.length) {\n          case 1:\n            if (!compressor.has_directive(\"use strict\")\n                && compressor.parent() instanceof AST_If\n                && can_be_extracted_from_if_block(self.body[0])\n                || can_be_evicted_from_block(self.body[0])) {\n                return self.body[0];\n            }\n            break;\n          case 0: return make_node(AST_EmptyStatement, self);\n        }\n        return self;\n    });\n\n    function opt_AST_Lambda(self, compressor) {\n        tighten_body(self.body, compressor);\n        if (compressor.option(\"side_effects\")\n            && self.body.length == 1\n            && self.body[0] === compressor.has_directive(\"use strict\")) {\n            self.body.length = 0;\n        }\n        return self;\n    }\n    def_optimize(AST_Lambda, opt_AST_Lambda);\n\n    AST_Scope.DEFMETHOD(\"drop_unused\", function(compressor) {\n        if (!compressor.option(\"unused\")) return;\n        if (compressor.has_directive(\"use asm\")) return;\n        var self = this;\n        if (self.pinned()) return;\n        var drop_funcs = !(self instanceof AST_Toplevel) || compressor.toplevel.funcs;\n        var drop_vars = !(self instanceof AST_Toplevel) || compressor.toplevel.vars;\n        var assign_as_unused = /keep_assign/.test(compressor.option(\"unused\")) ? return_false : function(node) {\n            if (node instanceof AST_Assign && (node.write_only || node.operator == \"=\")) {\n                return node.left;\n            }\n            if (node instanceof AST_Unary && node.write_only) return node.expression;\n        };\n        var in_use_ids = new Map();\n        var fixed_ids = new Map();\n        if (self instanceof AST_Toplevel && compressor.top_retain) {\n            self.variables.forEach(function(def) {\n                if (compressor.top_retain(def) && !in_use_ids.has(def.id)) {\n                    in_use_ids.set(def.id, def);\n                }\n            });\n        }\n        var var_defs_by_id = new Map();\n        var initializations = new Map();\n        var destructuring_value = null;\n        // pass 1: find out which symbols are directly used in\n        // this scope (not in nested scopes).\n        var scope = this;\n        var tw = new TreeWalker(function(node, descend) {\n            if (node instanceof AST_Lambda && node.uses_arguments && !tw.has_directive(\"use strict\")) {\n                node.argnames.forEach(function(argname) {\n                    if (!(argname instanceof AST_SymbolDeclaration)) return;\n                    var def = argname.definition();\n                    if (!in_use_ids.has(def.id)) {\n                        in_use_ids.set(def.id, def);\n                    }\n                });\n            }\n            if (node === self) return;\n            if (node instanceof AST_Defun || node instanceof AST_DefClass) {\n                var node_def = node.name.definition();\n                var in_export = tw.parent() instanceof AST_Export;\n                if (in_export || !drop_funcs && scope === self) {\n                    if (node_def.global && !in_use_ids.has(node_def.id)) {\n                        in_use_ids.set(node_def.id, node_def);\n                    }\n                }\n                map_add(initializations, node_def.id, node);\n                return true; // don't go in nested scopes\n            }\n            if (node instanceof AST_SymbolFunarg && scope === self) {\n                map_add(var_defs_by_id, node.definition().id, node);\n            }\n            if (node instanceof AST_Definitions && scope === self) {\n                var in_export = tw.parent() instanceof AST_Export;\n                node.definitions.forEach(function(def) {\n                    if (def.name instanceof AST_SymbolVar) {\n                        map_add(var_defs_by_id, def.name.definition().id, def);\n                    }\n                    if (in_export || !drop_vars) {\n                        def.name.walk(new TreeWalker(function(node) {\n                            if (node instanceof AST_SymbolDeclaration) {\n                                var def = node.definition();\n                                if ((in_export || def.global) && !in_use_ids.has(def.id)) {\n                                    in_use_ids.set(def.id, def);\n                                }\n                            }\n                        }));\n                    }\n                    if (def.value) {\n                        if (def.name instanceof AST_Destructuring) {\n                            var destructuring_cache = destructuring_value;\n                            destructuring_value = def.value;\n                            def.walk(tw);\n                            destructuring_value = destructuring_cache;\n                        } else {\n                            var node_def = def.name.definition();\n                            map_add(initializations, node_def.id, def.value);\n                            if (!node_def.chained && def.name.fixed_value() === def.value) {\n                                fixed_ids.set(node_def.id, def);\n                            }\n                        }\n                        if (def.value.has_side_effects(compressor)) {\n                            def.value.walk(tw);\n                        }\n                    }\n                });\n                return true;\n            }\n            if (node.destructuring && destructuring_value) {\n                map_add(initializations, node.name, destructuring_value);\n            }\n            return scan_ref_scoped(node, descend);\n        });\n        self.walk(tw);\n        // pass 2: for every used symbol we need to walk its\n        // initialization code to figure out if it uses other\n        // symbols (that may not be in_use).\n        tw = new TreeWalker(scan_ref_scoped);\n        in_use_ids.forEach(function (def) {\n            var init = initializations.get(def.id);\n            if (init) init.forEach(function(init) {\n                init.walk(tw);\n            });\n        });\n        // pass 3: we should drop declarations not in_use\n        var tt = new TreeTransformer(\n            function before(node, descend, in_list) {\n                var parent = tt.parent();\n                if (drop_vars) {\n                    var sym = assign_as_unused(node);\n                    if (sym instanceof AST_SymbolRef) {\n                        var def = sym.definition();\n                        var in_use = in_use_ids.has(def.id);\n                        if (node instanceof AST_Assign) {\n                            if (!in_use || fixed_ids.has(def.id) && fixed_ids.get(def.id) !== node) {\n                                return maintain_this_binding(parent, node, node.right.transform(tt));\n                            }\n                        } else if (!in_use) return make_node(AST_Number, node, {\n                            value: 0\n                        });\n                    }\n                }\n                if (scope !== self) return;\n                var def;\n                if (node.name\n                    && (node instanceof AST_ClassExpression\n                        && !keep_name(compressor.option(\"keep_classnames\"), (def = node.name.definition()).name)\n                    || node instanceof AST_Function\n                        && !keep_name(compressor.option(\"keep_fnames\"), (def = node.name.definition()).name))) {\n                    // any declarations with same name will overshadow\n                    // name of this anonymous function and can therefore\n                    // never be used anywhere\n                    if (!in_use_ids.has(def.id) || def.orig.length > 1) node.name = null;\n                }\n                if (node instanceof AST_Lambda && !(node instanceof AST_Accessor)) {\n                    var trim = !compressor.option(\"keep_fargs\");\n                    for (var a = node.argnames, i = a.length; --i >= 0;) {\n                        var sym = a[i];\n                        if (sym instanceof AST_Expansion) {\n                            sym = sym.expression;\n                        }\n                        if (sym instanceof AST_DefaultAssign) {\n                            sym = sym.left;\n                        }\n                        // Do not drop destructuring arguments.\n                        // They constitute a type assertion, so dropping\n                        // them would stop that TypeError which would happen\n                        // if someone called it with an incorrectly formatted\n                        // parameter.\n                        if (!(sym instanceof AST_Destructuring) && !in_use_ids.has(sym.definition().id)) {\n                            sym.__unused = true;\n                            if (trim) {\n                                a.pop();\n                                compressor[sym.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function argument {name} [{file}:{line},{col}]\", template(sym));\n                            }\n                        } else {\n                            trim = false;\n                        }\n                    }\n                }\n                if ((node instanceof AST_Defun || node instanceof AST_DefClass) && node !== self) {\n                    var def = node.name.definition();\n                    var keep = in_use_ids.has(def.id) || !drop_funcs && def.global;\n                    if (!keep) {\n                        compressor[node.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused function {name} [{file}:{line},{col}]\", template(node.name));\n                        def.eliminated++;\n                        return make_node(AST_EmptyStatement, node);\n                    }\n                }\n                if (node instanceof AST_Definitions && !(parent instanceof AST_ForIn && parent.init === node)) {\n                    var drop_block = !(parent instanceof AST_Toplevel) && !(node instanceof AST_Var);\n                    // place uninitialized names at the start\n                    var body = [], head = [], tail = [];\n                    // for unused names whose initialization has\n                    // side effects, we can cascade the init. code\n                    // into the next one, or next statement.\n                    var side_effects = [];\n                    node.definitions.forEach(function(def) {\n                        if (def.value) def.value = def.value.transform(tt);\n                        var is_destructure = def.name instanceof AST_Destructuring;\n                        var sym = is_destructure\n                            ? new SymbolDef(null, { name: \"<destructure>\" }) /* fake SymbolDef */\n                            : def.name.definition();\n                        if (drop_block && sym.global) return tail.push(def);\n                        if (!(drop_vars || drop_block)\n                            || is_destructure\n                                && (def.name.names.length\n                                    || def.name.is_array\n                                    || compressor.option(\"pure_getters\") != true)\n                            || in_use_ids.has(sym.id)) {\n                            if (def.value && fixed_ids.has(sym.id) && fixed_ids.get(sym.id) !== def) {\n                                def.value = def.value.drop_side_effect_free(compressor);\n                            }\n                            if (def.name instanceof AST_SymbolVar) {\n                                var var_defs = var_defs_by_id.get(sym.id);\n                                if (var_defs.length > 1 && (!def.value || sym.orig.indexOf(def.name) > sym.eliminated)) {\n                                    compressor.warn(\"Dropping duplicated definition of variable {name} [{file}:{line},{col}]\", template(def.name));\n                                    if (def.value) {\n                                        var ref = make_node(AST_SymbolRef, def.name, def.name);\n                                        sym.references.push(ref);\n                                        var assign = make_node(AST_Assign, def, {\n                                            operator: \"=\",\n                                            left: ref,\n                                            right: def.value\n                                        });\n                                        if (fixed_ids.get(sym.id) === def) {\n                                            fixed_ids.set(sym.id, assign);\n                                        }\n                                        side_effects.push(assign.transform(tt));\n                                    }\n                                    remove(var_defs, def);\n                                    sym.eliminated++;\n                                    return;\n                                }\n                            }\n                            if (def.value) {\n                                if (side_effects.length > 0) {\n                                    if (tail.length > 0) {\n                                        side_effects.push(def.value);\n                                        def.value = make_sequence(def.value, side_effects);\n                                    } else {\n                                        body.push(make_node(AST_SimpleStatement, node, {\n                                            body: make_sequence(node, side_effects)\n                                        }));\n                                    }\n                                    side_effects = [];\n                                }\n                                tail.push(def);\n                            } else {\n                                head.push(def);\n                            }\n                        } else if (sym.orig[0] instanceof AST_SymbolCatch) {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) side_effects.push(value);\n                            def.value = null;\n                            head.push(def);\n                        } else {\n                            var value = def.value && def.value.drop_side_effect_free(compressor);\n                            if (value) {\n                                if (!is_destructure) compressor.warn(\"Side effects in initialization of unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                                side_effects.push(value);\n                            } else {\n                                if (!is_destructure) compressor[def.name.unreferenced() ? \"warn\" : \"info\"](\"Dropping unused variable {name} [{file}:{line},{col}]\", template(def.name));\n                            }\n                            sym.eliminated++;\n                        }\n                    });\n                    if (head.length > 0 || tail.length > 0) {\n                        node.definitions = head.concat(tail);\n                        body.push(node);\n                    }\n                    if (side_effects.length > 0) {\n                        body.push(make_node(AST_SimpleStatement, node, {\n                            body: make_sequence(node, side_effects)\n                        }));\n                    }\n                    switch (body.length) {\n                      case 0:\n                        return in_list ? MAP.skip : make_node(AST_EmptyStatement, node);\n                      case 1:\n                        return body[0];\n                      default:\n                        return in_list ? MAP.splice(body) : make_node(AST_BlockStatement, node, {\n                            body: body\n                        });\n                    }\n                }\n                // certain combination of unused name + side effect leads to:\n                //    https://github.com/mishoo/UglifyJS2/issues/44\n                //    https://github.com/mishoo/UglifyJS2/issues/1830\n                //    https://github.com/mishoo/UglifyJS2/issues/1838\n                // that's an invalid AST.\n                // We fix it at this stage by moving the `var` outside the `for`.\n                if (node instanceof AST_For) {\n                    descend(node, this);\n                    var block;\n                    if (node.init instanceof AST_BlockStatement) {\n                        block = node.init;\n                        node.init = block.body.pop();\n                        block.body.push(node);\n                    }\n                    if (node.init instanceof AST_SimpleStatement) {\n                        node.init = node.init.body;\n                    } else if (is_empty(node.init)) {\n                        node.init = null;\n                    }\n                    return !block ? node : in_list ? MAP.splice(block.body) : block;\n                }\n                if (node instanceof AST_LabeledStatement && node.body instanceof AST_For) {\n                    descend(node, this);\n                    if (node.body instanceof AST_BlockStatement) {\n                        var block = node.body;\n                        node.body = block.body.pop();\n                        block.body.push(node);\n                        return in_list ? MAP.splice(block.body) : block;\n                    }\n                    return node;\n                }\n                if (node instanceof AST_BlockStatement) {\n                    descend(node, this);\n                    if (in_list && all(node.body, can_be_evicted_from_block)) {\n                        return MAP.splice(node.body);\n                    }\n                    return node;\n                }\n                if (node instanceof AST_Scope) {\n                    var save_scope = scope;\n                    scope = node;\n                    descend(node, this);\n                    scope = save_scope;\n                    return node;\n                }\n\n                function template(sym) {\n                    return {\n                        name : sym.name,\n                        file : sym.start.file,\n                        line : sym.start.line,\n                        col  : sym.start.col\n                    };\n                }\n            }\n        );\n        self.transform(tt);\n\n        function scan_ref_scoped(node, descend) {\n            var node_def, sym = assign_as_unused(node);\n            if (sym instanceof AST_SymbolRef\n                && !is_ref_of(node.left, AST_SymbolBlockDeclaration)\n                && self.variables.get(sym.name) === (node_def = sym.definition())) {\n                if (node instanceof AST_Assign) {\n                    node.right.walk(tw);\n                    if (!node_def.chained && node.left.fixed_value() === node.right) {\n                        fixed_ids.set(node_def.id, node);\n                    }\n                }\n                return true;\n            }\n            if (node instanceof AST_SymbolRef) {\n                node_def = node.definition();\n                if (!in_use_ids.has(node_def.id)) {\n                    in_use_ids.set(node_def.id, node_def);\n                    if (node_def = node_def.redefined()) {\n                        in_use_ids.set(node_def.id, node_def);\n                    }\n                }\n                return true;\n            }\n            if (node instanceof AST_Scope) {\n                var save_scope = scope;\n                scope = node;\n                descend();\n                scope = save_scope;\n                return true;\n            }\n        }\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_declarations\", function(compressor) {\n        var self = this;\n        if (compressor.has_directive(\"use asm\")) return self;\n        // Hoisting makes no sense in an arrow func\n        if (!Array.isArray(self.body)) return self;\n\n        var hoist_funs = compressor.option(\"hoist_funs\");\n        var hoist_vars = compressor.option(\"hoist_vars\");\n\n        if (hoist_funs || hoist_vars) {\n            var dirs = [];\n            var hoisted = [];\n            var vars = new Map(), vars_found = 0, var_decl = 0;\n            // let's count var_decl first, we seem to waste a lot of\n            // space if we hoist `var` when there's only one.\n            self.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_Scope && node !== self)\n                    return true;\n                if (node instanceof AST_Var) {\n                    ++var_decl;\n                    return true;\n                }\n            }));\n            hoist_vars = hoist_vars && var_decl > 1;\n            var tt = new TreeTransformer(\n                function before(node) {\n                    if (node !== self) {\n                        if (node instanceof AST_Directive) {\n                            dirs.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_funs && node instanceof AST_Defun\n                            && !(tt.parent() instanceof AST_Export)\n                            && tt.parent() === self) {\n                            hoisted.push(node);\n                            return make_node(AST_EmptyStatement, node);\n                        }\n                        if (hoist_vars && node instanceof AST_Var) {\n                            node.definitions.forEach(function(def) {\n                                if (def.name instanceof AST_Destructuring) return;\n                                vars.set(def.name.name, def);\n                                ++vars_found;\n                            });\n                            var seq = node.to_assignments(compressor);\n                            var p = tt.parent();\n                            if (p instanceof AST_ForIn && p.init === node) {\n                                if (seq == null) {\n                                    var def = node.definitions[0].name;\n                                    return make_node(AST_SymbolRef, def, def);\n                                }\n                                return seq;\n                            }\n                            if (p instanceof AST_For && p.init === node) {\n                                return seq;\n                            }\n                            if (!seq) return make_node(AST_EmptyStatement, node);\n                            return make_node(AST_SimpleStatement, node, {\n                                body: seq\n                            });\n                        }\n                        if (node instanceof AST_Scope)\n                            return node; // to avoid descending in nested scopes\n                    }\n                }\n            );\n            self = self.transform(tt);\n            if (vars_found > 0) {\n                // collect only vars which don't show up in self's arguments list\n                var defs = [];\n                vars.forEach(function(def, name) {\n                    if (self instanceof AST_Lambda\n                        && find_if(function(x) { return x.name == def.name.name; },\n                                   self.args_as_names())) {\n                        vars.delete(name);\n                    } else {\n                        def = def.clone();\n                        def.value = null;\n                        defs.push(def);\n                        vars.set(name, def);\n                    }\n                });\n                if (defs.length > 0) {\n                    // try to merge in assignments\n                    for (var i = 0; i < self.body.length;) {\n                        if (self.body[i] instanceof AST_SimpleStatement) {\n                            var expr = self.body[i].body, sym, assign;\n                            if (expr instanceof AST_Assign\n                                && expr.operator == \"=\"\n                                && (sym = expr.left) instanceof AST_Symbol\n                                && vars.has(sym.name)\n                            ) {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = expr.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body.splice(i, 1);\n                                continue;\n                            }\n                            if (expr instanceof AST_Sequence\n                                && (assign = expr.expressions[0]) instanceof AST_Assign\n                                && assign.operator == \"=\"\n                                && (sym = assign.left) instanceof AST_Symbol\n                                && vars.has(sym.name)\n                            ) {\n                                var def = vars.get(sym.name);\n                                if (def.value) break;\n                                def.value = assign.right;\n                                remove(defs, def);\n                                defs.push(def);\n                                self.body[i].body = make_sequence(expr, expr.expressions.slice(1));\n                                continue;\n                            }\n                        }\n                        if (self.body[i] instanceof AST_EmptyStatement) {\n                            self.body.splice(i, 1);\n                            continue;\n                        }\n                        if (self.body[i] instanceof AST_BlockStatement) {\n                            var tmp = [ i, 1 ].concat(self.body[i].body);\n                            self.body.splice.apply(self.body, tmp);\n                            continue;\n                        }\n                        break;\n                    }\n                    defs = make_node(AST_Var, self, {\n                        definitions: defs\n                    });\n                    hoisted.push(defs);\n                }\n            }\n            self.body = dirs.concat(hoisted, self.body);\n        }\n        return self;\n    });\n\n    AST_Scope.DEFMETHOD(\"var_names\", function varNames() {\n        var var_names = this._var_names;\n        if (!var_names) {\n            this._var_names = var_names = new Set(this.parent_scope ? varNames.call(this.parent_scope) : null);\n            this.enclosed.forEach(function(def) {\n                var_names.add(def.name);\n            });\n            this.variables.forEach(function(def, name) {\n                var_names.add(name);\n            });\n        }\n        return var_names;\n    });\n\n    AST_Scope.DEFMETHOD(\"make_var_name\", function(prefix) {\n        var var_names = this.var_names();\n        prefix = prefix.replace(/(?:^[^a-z_$]|[^a-z0-9_$])/ig, \"_\");\n        var name = prefix;\n        for (var i = 0; var_names.has(name); i++) name = prefix + \"$\" + i;\n        var_names.add(name);\n        return name;\n    });\n\n    AST_Scope.DEFMETHOD(\"hoist_properties\", function(compressor) {\n        var self = this;\n        if (!compressor.option(\"hoist_props\") || compressor.has_directive(\"use asm\")) return self;\n        var top_retain = self instanceof AST_Toplevel && compressor.top_retain || return_false;\n        var defs_by_id = new Map();\n        var tt = new TreeTransformer(function(node, descend) {\n            if (node instanceof AST_Definitions && tt.parent() instanceof AST_Export) return node;\n            if (node instanceof AST_VarDef) {\n                var sym = node.name, def, value;\n                if (sym.scope === self\n                    && (def = sym.definition()).escaped != 1\n                    && !def.assignments\n                    && !def.direct_access\n                    && !def.single_use\n                    && !compressor.exposed(def)\n                    && !top_retain(def)\n                    && (value = sym.fixed_value()) === node.value\n                    && value instanceof AST_Object) {\n                    descend(node, this);\n                    var defs = new Map();\n                    var assignments = [];\n                    value.properties.forEach(function(prop) {\n                        assignments.push(make_node(AST_VarDef, node, {\n                            name: make_sym(prop.key),\n                            value: prop.value\n                        }));\n                    });\n                    defs_by_id.set(def.id, defs);\n                    return MAP.splice(assignments);\n                }\n            }\n            if (node instanceof AST_PropAccess && node.expression instanceof AST_SymbolRef) {\n                var defs = defs_by_id.get(node.expression.definition().id);\n                if (defs) {\n                    var def = defs.get(String(get_value(node.property)));\n                    var sym = make_node(AST_SymbolRef, node, {\n                        name: def.name,\n                        scope: node.expression.scope,\n                        thedef: def\n                    });\n                    sym.reference({});\n                    return sym;\n                }\n            }\n\n            function make_sym(key) {\n                var new_var = make_node(sym.CTOR, sym, {\n                    name: self.make_var_name(sym.name + \"_\" + key),\n                    scope: self\n                });\n                var def = self.def_variable(new_var);\n                defs.set(String(key), def);\n                self.enclosed.push(def);\n                return new_var;\n            }\n        });\n        return self.transform(tt);\n    });\n\n    // drop_side_effect_free()\n    // remove side-effect-free parts which only affects return value\n    (function(def_drop_side_effect_free) {\n        // Drop side-effect-free elements from an array of expressions.\n        // Returns an array of expressions with side-effects or null\n        // if all elements were dropped. Note: original array may be\n        // returned if nothing changed.\n        function trim(nodes, compressor, first_in_statement) {\n            var len = nodes.length;\n            if (!len) return null;\n            var ret = [], changed = false;\n            for (var i = 0; i < len; i++) {\n                var node = nodes[i].drop_side_effect_free(compressor, first_in_statement);\n                changed |= node !== nodes[i];\n                if (node) {\n                    ret.push(node);\n                    first_in_statement = false;\n                }\n            }\n            return changed ? ret.length ? ret : null : nodes;\n        }\n\n        def_drop_side_effect_free(AST_Node, return_this);\n        def_drop_side_effect_free(AST_Constant, return_null);\n        def_drop_side_effect_free(AST_This, return_null);\n        def_drop_side_effect_free(AST_Call, function(compressor, first_in_statement) {\n            if (!this.is_expr_pure(compressor)) {\n                if (this.expression.is_call_pure(compressor)) {\n                    var exprs = this.args.slice();\n                    exprs.unshift(this.expression.expression);\n                    exprs = trim(exprs, compressor, first_in_statement);\n                    return exprs && make_sequence(this, exprs);\n                }\n                if (is_func_expr(this.expression)\n                    && (!this.expression.name || !this.expression.name.definition().references.length)) {\n                    var node = this.clone();\n                    node.expression.process_expression(false, compressor);\n                    return node;\n                }\n                return this;\n            }\n            if (this.pure) {\n                compressor.warn(\"Dropping __PURE__ call [{file}:{line},{col}]\", this.start);\n            }\n            var args = trim(this.args, compressor, first_in_statement);\n            return args && make_sequence(this, args);\n        });\n        def_drop_side_effect_free(AST_Accessor, return_null);\n        def_drop_side_effect_free(AST_Function, return_null);\n        def_drop_side_effect_free(AST_Arrow, return_null);\n        def_drop_side_effect_free(AST_ClassExpression, return_null);\n        def_drop_side_effect_free(AST_Binary, function(compressor, first_in_statement) {\n            var right = this.right.drop_side_effect_free(compressor);\n            if (!right) return this.left.drop_side_effect_free(compressor, first_in_statement);\n            if (lazy_op.has(this.operator)) {\n                if (right === this.right) return this;\n                var node = this.clone();\n                node.right = right;\n                return node;\n            } else {\n                var left = this.left.drop_side_effect_free(compressor, first_in_statement);\n                if (!left) return this.right.drop_side_effect_free(compressor, first_in_statement);\n                return make_sequence(this, [ left, right ]);\n            }\n        });\n        def_drop_side_effect_free(AST_Assign, function(compressor) {\n            var left = this.left;\n            if (left.has_side_effects(compressor)\n                || compressor.has_directive(\"use strict\")\n                    && left instanceof AST_PropAccess\n                    && left.expression.is_constant()) {\n                return this;\n            }\n            this.write_only = true;\n            while (left instanceof AST_PropAccess) {\n                left = left.expression;\n            }\n            if (left.is_constant_expression(compressor.find_parent(AST_Scope))) {\n                return this.right.drop_side_effect_free(compressor);\n            }\n            return this;\n        });\n        def_drop_side_effect_free(AST_Conditional, function(compressor) {\n            var consequent = this.consequent.drop_side_effect_free(compressor);\n            var alternative = this.alternative.drop_side_effect_free(compressor);\n            if (consequent === this.consequent && alternative === this.alternative) return this;\n            if (!consequent) return alternative ? make_node(AST_Binary, this, {\n                operator: \"||\",\n                left: this.condition,\n                right: alternative\n            }) : this.condition.drop_side_effect_free(compressor);\n            if (!alternative) return make_node(AST_Binary, this, {\n                operator: \"&&\",\n                left: this.condition,\n                right: consequent\n            });\n            var node = this.clone();\n            node.consequent = consequent;\n            node.alternative = alternative;\n            return node;\n        });\n        def_drop_side_effect_free(AST_Unary, function(compressor, first_in_statement) {\n            if (unary_side_effects.has(this.operator)) {\n                this.write_only = !this.expression.has_side_effects(compressor);\n                return this;\n            }\n            if (this.operator == \"typeof\" && this.expression instanceof AST_SymbolRef) return null;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (first_in_statement && expression && is_iife_call(expression)) {\n                if (expression === this.expression && this.operator == \"!\") return this;\n                return expression.negate(compressor, first_in_statement);\n            }\n            return expression;\n        });\n        def_drop_side_effect_free(AST_SymbolRef, function(compressor) {\n            return this.is_declared(compressor) ? null : this;\n        });\n        def_drop_side_effect_free(AST_Object, function(compressor, first_in_statement) {\n            var values = trim(this.properties, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def_drop_side_effect_free(AST_ObjectProperty, function(compressor, first_in_statement) {\n            return this.value.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_Array, function(compressor, first_in_statement) {\n            var values = trim(this.elements, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n        def_drop_side_effect_free(AST_Dot, function(compressor, first_in_statement) {\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_Sub, function(compressor, first_in_statement) {\n            if (this.expression.may_throw_on_access(compressor)) return this;\n            var expression = this.expression.drop_side_effect_free(compressor, first_in_statement);\n            if (!expression) return this.property.drop_side_effect_free(compressor, first_in_statement);\n            var property = this.property.drop_side_effect_free(compressor);\n            if (!property) return expression;\n            return make_sequence(this, [ expression, property ]);\n        });\n        def_drop_side_effect_free(AST_Sequence, function(compressor) {\n            var last = this.tail_node();\n            var expr = last.drop_side_effect_free(compressor);\n            if (expr === last) return this;\n            var expressions = this.expressions.slice(0, -1);\n            if (expr) expressions.push(expr);\n            return make_sequence(this, expressions);\n        });\n        def_drop_side_effect_free(AST_Expansion, function(compressor, first_in_statement) {\n            return this.expression.drop_side_effect_free(compressor, first_in_statement);\n        });\n        def_drop_side_effect_free(AST_TemplateSegment, return_null);\n        def_drop_side_effect_free(AST_TemplateString, function(compressor) {\n            var values = trim(this.segments, compressor, first_in_statement);\n            return values && make_sequence(this, values);\n        });\n    })(function(node, func) {\n        node.DEFMETHOD(\"drop_side_effect_free\", func);\n    });\n\n    var pure_prop_access_globals = [\n        \"Number\",\n        \"String\",\n        \"Array\",\n        \"Object\",\n        \"Function\",\n        \"Promise\",\n        \"global\",\n        \"window\",\n        \"document\",\n        \"location\"\n    ];\n    def_optimize(AST_SimpleStatement, function(self, compressor) {\n        if (self.body instanceof AST_SymbolRef && pure_prop_access_globals.indexOf(self.body.name) !== -1) {\n            return make_node(AST_EmptyStatement, self);\n        }\n        if (compressor.option(\"side_effects\")) {\n            var body = self.body;\n            var node = body.drop_side_effect_free(compressor, true);\n            if (!node) {\n                compressor.warn(\"Dropping side-effect-free statement [{file}:{line},{col}]\", self.start);\n                return make_node(AST_EmptyStatement, self);\n            }\n            if (node !== body) {\n                return make_node(AST_SimpleStatement, self, { body: node });\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_While, function(self, compressor) {\n        return compressor.option(\"loops\") ? make_node(AST_For, self, self).optimize(compressor) : self;\n    });\n\n    function has_break_or_continue(loop, parent) {\n        var found = false;\n        var tw = new TreeWalker(function(node) {\n            if (found || node instanceof AST_Scope) return true;\n            if (node instanceof AST_LoopControl && tw.loopcontrol_target(node) === loop) {\n                return found = true;\n            }\n        });\n        if (parent instanceof AST_LabeledStatement) tw.push(parent);\n        tw.push(loop);\n        loop.body.walk(tw);\n        return found;\n    }\n\n    def_optimize(AST_Do, function(self, compressor) {\n        if (!compressor.option(\"loops\")) return self;\n        var cond = self.condition.tail_node().evaluate(compressor);\n        if (!(cond instanceof AST_Node)) {\n            if (cond) return make_node(AST_For, self, {\n                body: make_node(AST_BlockStatement, self.body, {\n                    body: [\n                        self.body,\n                        make_node(AST_SimpleStatement, self.condition, {\n                            body: self.condition\n                        })\n                    ]\n                })\n            }).optimize(compressor);\n            if (!has_break_or_continue(self, compressor.parent())) {\n                return make_node(AST_BlockStatement, self.body, {\n                    body: [\n                        self.body,\n                        make_node(AST_SimpleStatement, self.condition, {\n                            body: self.condition\n                        })\n                    ]\n                }).optimize(compressor);\n            }\n        }\n        return self;\n    });\n\n    function if_break_in_loop(self, compressor) {\n        var first = self.body instanceof AST_BlockStatement ? self.body.body[0] : self.body;\n        if (compressor.option(\"dead_code\") && is_break(first)) {\n            var body = [];\n            if (self.init instanceof AST_Statement) {\n                body.push(self.init);\n            } else if (self.init) {\n                body.push(make_node(AST_SimpleStatement, self.init, {\n                    body: self.init\n                }));\n            }\n            if (self.condition) {\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n            }\n            extract_declarations_from_unreachable_code(compressor, self.body, body);\n            return make_node(AST_BlockStatement, self, {\n                body: body\n            });\n        }\n        if (first instanceof AST_If) {\n            if (is_break(first.body)) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition.negate(compressor),\n                    });\n                } else {\n                    self.condition = first.condition.negate(compressor);\n                }\n                drop_it(first.alternative);\n            } else if (is_break(first.alternative)) {\n                if (self.condition) {\n                    self.condition = make_node(AST_Binary, self.condition, {\n                        left: self.condition,\n                        operator: \"&&\",\n                        right: first.condition,\n                    });\n                } else {\n                    self.condition = first.condition;\n                }\n                drop_it(first.body);\n            }\n        }\n        return self;\n\n        function is_break(node) {\n            return node instanceof AST_Break\n                && compressor.loopcontrol_target(node) === compressor.self();\n        }\n\n        function drop_it(rest) {\n            rest = as_statement_array(rest);\n            if (self.body instanceof AST_BlockStatement) {\n                self.body = self.body.clone();\n                self.body.body = rest.concat(self.body.body.slice(1));\n                self.body = self.body.transform(compressor);\n            } else {\n                self.body = make_node(AST_BlockStatement, self.body, {\n                    body: rest\n                }).transform(compressor);\n            }\n            self = if_break_in_loop(self, compressor);\n        }\n    }\n\n    def_optimize(AST_For, function(self, compressor) {\n        if (!compressor.option(\"loops\")) return self;\n        if (compressor.option(\"side_effects\") && self.init) {\n            self.init = self.init.drop_side_effect_free(compressor);\n        }\n        if (self.condition) {\n            var cond = self.condition.evaluate(compressor);\n            if (!(cond instanceof AST_Node)) {\n                if (cond) self.condition = null;\n                else if (!compressor.option(\"dead_code\")) {\n                    var orig = self.condition;\n                    self.condition = make_node_from_constant(cond, self.condition);\n                    self.condition = best_of_expression(self.condition.transform(compressor), orig);\n                }\n            }\n            if (compressor.option(\"dead_code\")) {\n                if (cond instanceof AST_Node) cond = self.condition.tail_node().evaluate(compressor);\n                if (!cond) {\n                    var body = [];\n                    extract_declarations_from_unreachable_code(compressor, self.body, body);\n                    if (self.init instanceof AST_Statement) {\n                        body.push(self.init);\n                    } else if (self.init) {\n                        body.push(make_node(AST_SimpleStatement, self.init, {\n                            body: self.init\n                        }));\n                    }\n                    body.push(make_node(AST_SimpleStatement, self.condition, {\n                        body: self.condition\n                    }));\n                    return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n                }\n            }\n        }\n        return if_break_in_loop(self, compressor);\n    });\n\n    def_optimize(AST_If, function(self, compressor) {\n        if (is_empty(self.alternative)) self.alternative = null;\n\n        if (!compressor.option(\"conditionals\")) return self;\n        // if condition can be statically determined, warn and drop\n        // one of the blocks.  note, statically determined implies\n        // “has no side effects”; also it doesn't work for cases like\n        // `x && true`, though it probably should.\n        var cond = self.condition.evaluate(compressor);\n        if (!compressor.option(\"dead_code\") && !(cond instanceof AST_Node)) {\n            var orig = self.condition;\n            self.condition = make_node_from_constant(cond, orig);\n            self.condition = best_of_expression(self.condition.transform(compressor), orig);\n        }\n        if (compressor.option(\"dead_code\")) {\n            if (cond instanceof AST_Node) cond = self.condition.tail_node().evaluate(compressor);\n            if (!cond) {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.condition.start);\n                var body = [];\n                extract_declarations_from_unreachable_code(compressor, self.body, body);\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n                if (self.alternative) body.push(self.alternative);\n                return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n            } else if (!(cond instanceof AST_Node)) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.condition.start);\n                var body = [];\n                if (self.alternative) {\n                    extract_declarations_from_unreachable_code(compressor, self.alternative, body);\n                }\n                body.push(make_node(AST_SimpleStatement, self.condition, {\n                    body: self.condition\n                }));\n                body.push(self.body);\n                return make_node(AST_BlockStatement, self, { body: body }).optimize(compressor);\n            }\n        }\n        var negated = self.condition.negate(compressor);\n        var self_condition_length = self.condition.print_to_string().length;\n        var negated_length = negated.print_to_string().length;\n        var negated_is_best = negated_length < self_condition_length;\n        if (self.alternative && negated_is_best) {\n            negated_is_best = false; // because we already do the switch here.\n            // no need to swap values of self_condition_length and negated_length\n            // here because they are only used in an equality comparison later on.\n            self.condition = negated;\n            var tmp = self.body;\n            self.body = self.alternative || make_node(AST_EmptyStatement, self);\n            self.alternative = tmp;\n        }\n        if (is_empty(self.body) && is_empty(self.alternative)) {\n            return make_node(AST_SimpleStatement, self.condition, {\n                body: self.condition.clone()\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_SimpleStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.body,\n                    alternative : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (is_empty(self.alternative) && self.body instanceof AST_SimpleStatement) {\n            if (self_condition_length === negated_length && !negated_is_best\n                && self.condition instanceof AST_Binary && self.condition.operator == \"||\") {\n                // although the code length of self.condition and negated are the same,\n                // negated does not require additional surrounding parentheses.\n                // see https://github.com/mishoo/UglifyJS2/issues/979\n                negated_is_best = true;\n            }\n            if (negated_is_best) return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : negated,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"&&\",\n                    left     : self.condition,\n                    right    : self.body.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_EmptyStatement\n            && self.alternative instanceof AST_SimpleStatement) {\n            return make_node(AST_SimpleStatement, self, {\n                body: make_node(AST_Binary, self, {\n                    operator : \"||\",\n                    left     : self.condition,\n                    right    : self.alternative.body\n                })\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_Exit\n            && self.alternative instanceof AST_Exit\n            && self.body.TYPE == self.alternative.TYPE) {\n            return make_node(self.body.CTOR, self, {\n                value: make_node(AST_Conditional, self, {\n                    condition   : self.condition,\n                    consequent  : self.body.value || make_node(AST_Undefined, self.body),\n                    alternative : self.alternative.value || make_node(AST_Undefined, self.alternative)\n                }).transform(compressor)\n            }).optimize(compressor);\n        }\n        if (self.body instanceof AST_If\n            && !self.body.alternative\n            && !self.alternative) {\n            self = make_node(AST_If, self, {\n                condition: make_node(AST_Binary, self.condition, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: self.body.condition\n                }),\n                body: self.body.body,\n                alternative: null\n            });\n        }\n        if (aborts(self.body)) {\n            if (self.alternative) {\n                var alt = self.alternative;\n                self.alternative = null;\n                return make_node(AST_BlockStatement, self, {\n                    body: [ self, alt ]\n                }).optimize(compressor);\n            }\n        }\n        if (aborts(self.alternative)) {\n            var body = self.body;\n            self.body = self.alternative;\n            self.condition = negated_is_best ? negated : self.condition.negate(compressor);\n            self.alternative = null;\n            return make_node(AST_BlockStatement, self, {\n                body: [ self, body ]\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Switch, function(self, compressor) {\n        if (!compressor.option(\"switches\")) return self;\n        var branch;\n        var value = self.expression.evaluate(compressor);\n        if (!(value instanceof AST_Node)) {\n            var orig = self.expression;\n            self.expression = make_node_from_constant(value, orig);\n            self.expression = best_of_expression(self.expression.transform(compressor), orig);\n        }\n        if (!compressor.option(\"dead_code\")) return self;\n        if (value instanceof AST_Node) {\n            value = self.expression.tail_node().evaluate(compressor);\n        }\n        var decl = [];\n        var body = [];\n        var default_branch;\n        var exact_match;\n        for (var i = 0, len = self.body.length; i < len && !exact_match; i++) {\n            branch = self.body[i];\n            if (branch instanceof AST_Default) {\n                if (!default_branch) {\n                    default_branch = branch;\n                } else {\n                    eliminate_branch(branch, body[body.length - 1]);\n                }\n            } else if (!(value instanceof AST_Node)) {\n                var exp = branch.expression.evaluate(compressor);\n                if (!(exp instanceof AST_Node) && exp !== value) {\n                    eliminate_branch(branch, body[body.length - 1]);\n                    continue;\n                }\n                if (exp instanceof AST_Node) exp = branch.expression.tail_node().evaluate(compressor);\n                if (exp === value) {\n                    exact_match = branch;\n                    if (default_branch) {\n                        var default_index = body.indexOf(default_branch);\n                        body.splice(default_index, 1);\n                        eliminate_branch(default_branch, body[default_index - 1]);\n                        default_branch = null;\n                    }\n                }\n            }\n            if (aborts(branch)) {\n                var prev = body[body.length - 1];\n                if (aborts(prev) && prev.body.length == branch.body.length\n                    && make_node(AST_BlockStatement, prev, prev).equivalent_to(make_node(AST_BlockStatement, branch, branch))) {\n                    prev.body = [];\n                }\n            }\n            body.push(branch);\n        }\n        while (i < len) eliminate_branch(self.body[i++], body[body.length - 1]);\n        if (body.length > 0) {\n            body[0].body = decl.concat(body[0].body);\n        }\n        self.body = body;\n        while (branch = body[body.length - 1]) {\n            var stat = branch.body[branch.body.length - 1];\n            if (stat instanceof AST_Break && compressor.loopcontrol_target(stat) === self)\n                branch.body.pop();\n            if (branch.body.length || branch instanceof AST_Case\n                && (default_branch || branch.expression.has_side_effects(compressor))) break;\n            if (body.pop() === default_branch) default_branch = null;\n        }\n        if (body.length == 0) {\n            return make_node(AST_BlockStatement, self, {\n                body: decl.concat(make_node(AST_SimpleStatement, self.expression, {\n                    body: self.expression\n                }))\n            }).optimize(compressor);\n        }\n        if (body.length == 1 && (body[0] === exact_match || body[0] === default_branch)) {\n            var has_break = false;\n            var tw = new TreeWalker(function(node) {\n                if (has_break\n                    || node instanceof AST_Lambda\n                    || node instanceof AST_SimpleStatement) return true;\n                if (node instanceof AST_Break && tw.loopcontrol_target(node) === self)\n                    has_break = true;\n            });\n            self.walk(tw);\n            if (!has_break) {\n                var statements = body[0].body.slice();\n                var exp = body[0].expression;\n                if (exp) statements.unshift(make_node(AST_SimpleStatement, exp, {\n                    body: exp\n                }));\n                statements.unshift(make_node(AST_SimpleStatement, self.expression, {\n                    body:self.expression\n                }));\n                return make_node(AST_BlockStatement, self, {\n                    body: statements\n                }).optimize(compressor);\n            }\n        }\n        return self;\n\n        function eliminate_branch(branch, prev) {\n            if (prev && !aborts(prev)) {\n                prev.body = prev.body.concat(branch.body);\n            } else {\n                extract_declarations_from_unreachable_code(compressor, branch, decl);\n            }\n        }\n    });\n\n    def_optimize(AST_Try, function(self, compressor) {\n        tighten_body(self.body, compressor);\n        if (self.bcatch && self.bfinally && all(self.bfinally.body, is_empty)) self.bfinally = null;\n        if (compressor.option(\"dead_code\") && all(self.body, is_empty)) {\n            var body = [];\n            if (self.bcatch) {\n                extract_declarations_from_unreachable_code(compressor, self.bcatch, body);\n                body.forEach(function(stat) {\n                    if (!(stat instanceof AST_Definitions)) return;\n                    stat.definitions.forEach(function(var_def) {\n                        var def = var_def.name.definition().redefined();\n                        if (!def) return;\n                        var_def.name = var_def.name.clone();\n                        var_def.name.thedef = def;\n                    });\n                });\n            }\n            if (self.bfinally) body = body.concat(self.bfinally.body);\n            return make_node(AST_BlockStatement, self, {\n                body: body\n            }).optimize(compressor);\n        }\n        return self;\n    });\n\n    AST_Definitions.DEFMETHOD(\"remove_initializers\", function() {\n        var decls = [];\n        this.definitions.forEach(function(def) {\n            if (def.name instanceof AST_SymbolDeclaration) {\n                def.value = null;\n                decls.push(def);\n            } else def.name.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_SymbolDeclaration) {\n                    decls.push(make_node(AST_VarDef, def, {\n                        name: node,\n                        value: null\n                    }));\n                }\n            }));\n        });\n        this.definitions = decls;\n    });\n\n    AST_Definitions.DEFMETHOD(\"to_assignments\", function(compressor) {\n        var reduce_vars = compressor.option(\"reduce_vars\");\n        var assignments = this.definitions.reduce(function(a, def) {\n            if (def.value && !(def.name instanceof AST_Destructuring)) {\n                var name = make_node(AST_SymbolRef, def.name, def.name);\n                a.push(make_node(AST_Assign, def, {\n                    operator : \"=\",\n                    left     : name,\n                    right    : def.value\n                }));\n                if (reduce_vars) name.definition().fixed = false;\n            } else if (def.value) {\n                // Because it's a destructuring, do not turn into an assignment.\n                var varDef = make_node(AST_VarDef, def, {\n                    name: def.name,\n                    value: def.value\n                });\n                var var_ = make_node(AST_Var, def, {\n                    definitions: [ varDef ]\n                });\n                a.push(var_);\n            }\n            def = def.name.definition();\n            def.eliminated++;\n            def.replaced--;\n            return a;\n        }, []);\n        if (assignments.length == 0) return null;\n        return make_sequence(this, assignments);\n    });\n\n    def_optimize(AST_Definitions, function(self, compressor) {\n        if (self.definitions.length == 0)\n            return make_node(AST_EmptyStatement, self);\n        return self;\n    });\n\n    def_optimize(AST_Import, function(self, compressor) {\n        return self;\n    });\n\n    function retain_top_func(fn, compressor) {\n        return compressor.top_retain\n            && fn instanceof AST_Defun\n            && fn._top\n            && fn.name\n            && compressor.top_retain(fn.name);\n    }\n\n    def_optimize(AST_Call, function(self, compressor) {\n        var exp = self.expression;\n        var fn = exp;\n        inline_array_like_spread(self, compressor, self.args);\n        var simple_args = all(self.args, function(arg) {\n            return !(arg instanceof AST_Expansion);\n        });\n        if (compressor.option(\"reduce_vars\") && fn instanceof AST_SymbolRef) {\n            fn = fn.fixed_value();\n            if (retain_top_func(fn, compressor)) fn = exp;\n        }\n        var is_func = fn instanceof AST_Lambda;\n        if (compressor.option(\"unused\")\n            && simple_args\n            && is_func\n            && !fn.uses_arguments\n            && !fn.pinned()) {\n            var pos = 0, last = 0;\n            for (var i = 0, len = self.args.length; i < len; i++) {\n                if (fn.argnames[i] instanceof AST_Expansion) {\n                    if (fn.argnames[i].expression.__unused) while (i < len) {\n                        var node = self.args[i++].drop_side_effect_free(compressor);\n                        if (node) {\n                            self.args[pos++] = node;\n                        }\n                    } else while (i < len) {\n                        self.args[pos++] = self.args[i++];\n                    }\n                    last = pos;\n                    break;\n                }\n                var trim = i >= fn.argnames.length;\n                if (trim || fn.argnames[i].__unused) {\n                    var node = self.args[i].drop_side_effect_free(compressor);\n                    if (node) {\n                        self.args[pos++] = node;\n                    } else if (!trim) {\n                        self.args[pos++] = make_node(AST_Number, self.args[i], {\n                            value: 0\n                        });\n                        continue;\n                    }\n                } else {\n                    self.args[pos++] = self.args[i];\n                }\n                last = pos;\n            }\n            self.args.length = last;\n        }\n        if (compressor.option(\"unsafe\")) {\n            if (is_undeclared_ref(exp)) switch (exp.name) {\n              case \"Array\":\n                if (self.args.length != 1) {\n                    return make_node(AST_Array, self, {\n                        elements: self.args\n                    }).optimize(compressor);\n                } else if (self.args[0] instanceof AST_Number && self.args[0].value <= 11) {\n                    const elements = [];\n                    for (let i = 0; i < self.args[0].value; i++) elements.push(new AST_Hole);\n                    return new AST_Array({ elements });\n                }\n                break;\n              case \"Object\":\n                if (self.args.length == 0) {\n                    return make_node(AST_Object, self, {\n                        properties: []\n                    });\n                }\n                break;\n              case \"String\":\n                if (self.args.length == 0) return make_node(AST_String, self, {\n                    value: \"\"\n                });\n                if (self.args.length <= 1) return make_node(AST_Binary, self, {\n                    left: self.args[0],\n                    operator: \"+\",\n                    right: make_node(AST_String, self, { value: \"\" })\n                }).optimize(compressor);\n                break;\n              case \"Number\":\n                if (self.args.length == 0) return make_node(AST_Number, self, {\n                    value: 0\n                });\n                if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                    expression: self.args[0],\n                    operator: \"+\"\n                }).optimize(compressor);\n              case \"Boolean\":\n                if (self.args.length == 0) return make_node(AST_False, self);\n                if (self.args.length == 1) return make_node(AST_UnaryPrefix, self, {\n                    expression: make_node(AST_UnaryPrefix, self, {\n                        expression: self.args[0],\n                        operator: \"!\"\n                    }),\n                    operator: \"!\"\n                }).optimize(compressor);\n                break;\n              case \"RegExp\":\n                var params = [];\n                if (all(self.args, function(arg) {\n                    var value = arg.evaluate(compressor);\n                    params.unshift(value);\n                    return arg !== value;\n                })) {\n                    try {\n                        return best_of(compressor, self, make_node(AST_RegExp, self, {\n                            value: RegExp.apply(RegExp, params),\n                        }));\n                    } catch (ex) {\n                        compressor.warn(\"Error converting {expr} [{file}:{line},{col}]\", {\n                            expr: self.print_to_string(),\n                            file: self.start.file,\n                            line: self.start.line,\n                            col: self.start.col\n                        });\n                    }\n                }\n                break;\n            } else if (exp instanceof AST_Dot) switch(exp.property) {\n              case \"toString\":\n                if (self.args.length == 0 && !exp.expression.may_throw_on_access(compressor)) {\n                    return make_node(AST_Binary, self, {\n                        left: make_node(AST_String, self, { value: \"\" }),\n                        operator: \"+\",\n                        right: exp.expression\n                    }).optimize(compressor);\n                }\n                break;\n              case \"join\":\n                if (exp.expression instanceof AST_Array) EXIT: {\n                    var separator;\n                    if (self.args.length > 0) {\n                        separator = self.args[0].evaluate(compressor);\n                        if (separator === self.args[0]) break EXIT; // not a constant\n                    }\n                    var elements = [];\n                    var consts = [];\n                    for (var i = 0, len = exp.expression.elements.length; i < len; i++) {\n                        var el = exp.expression.elements[i];\n                        if (el instanceof AST_Expansion) break EXIT;\n                        var value = el.evaluate(compressor);\n                        if (value !== el) {\n                            consts.push(value);\n                        } else {\n                            if (consts.length > 0) {\n                                elements.push(make_node(AST_String, self, {\n                                    value: consts.join(separator)\n                                }));\n                                consts.length = 0;\n                            }\n                            elements.push(el);\n                        }\n                    }\n                    if (consts.length > 0) {\n                        elements.push(make_node(AST_String, self, {\n                            value: consts.join(separator)\n                        }));\n                    }\n                    if (elements.length == 0) return make_node(AST_String, self, { value: \"\" });\n                    if (elements.length == 1) {\n                        if (elements[0].is_string(compressor)) {\n                            return elements[0];\n                        }\n                        return make_node(AST_Binary, elements[0], {\n                            operator : \"+\",\n                            left     : make_node(AST_String, self, { value: \"\" }),\n                            right    : elements[0]\n                        });\n                    }\n                    if (separator == \"\") {\n                        var first;\n                        if (elements[0].is_string(compressor)\n                            || elements[1].is_string(compressor)) {\n                            first = elements.shift();\n                        } else {\n                            first = make_node(AST_String, self, { value: \"\" });\n                        }\n                        return elements.reduce(function(prev, el) {\n                            return make_node(AST_Binary, el, {\n                                operator : \"+\",\n                                left     : prev,\n                                right    : el\n                            });\n                        }, first).optimize(compressor);\n                    }\n                    // need this awkward cloning to not affect original element\n                    // best_of will decide which one to get through.\n                    var node = self.clone();\n                    node.expression = node.expression.clone();\n                    node.expression.expression = node.expression.expression.clone();\n                    node.expression.expression.elements = elements;\n                    return best_of(compressor, self, node);\n                }\n                break;\n              case \"charAt\":\n                if (exp.expression.is_string(compressor)) {\n                    var arg = self.args[0];\n                    var index = arg ? arg.evaluate(compressor) : 0;\n                    if (index !== arg) {\n                        return make_node(AST_Sub, exp, {\n                            expression: exp.expression,\n                            property: make_node_from_constant(index | 0, arg || exp)\n                        }).optimize(compressor);\n                    }\n                }\n                break;\n              case \"apply\":\n                if (self.args.length == 2 && self.args[1] instanceof AST_Array) {\n                    var args = self.args[1].elements.slice();\n                    args.unshift(self.args[0]);\n                    return make_node(AST_Call, self, {\n                        expression: make_node(AST_Dot, exp, {\n                            expression: exp.expression,\n                            property: \"call\"\n                        }),\n                        args: args\n                    }).optimize(compressor);\n                }\n                break;\n              case \"call\":\n                var func = exp.expression;\n                if (func instanceof AST_SymbolRef) {\n                    func = func.fixed_value();\n                }\n                if (func instanceof AST_Lambda && !func.contains_this()) {\n                    return (self.args.length ? make_sequence(this, [\n                        self.args[0],\n                        make_node(AST_Call, self, {\n                            expression: exp.expression,\n                            args: self.args.slice(1)\n                        })\n                    ]) : make_node(AST_Call, self, {\n                        expression: exp.expression,\n                        args: []\n                    })).optimize(compressor);\n                }\n                break;\n            }\n        }\n        if (compressor.option(\"unsafe_Function\")\n            && is_undeclared_ref(exp)\n            && exp.name == \"Function\") {\n            // new Function() => function(){}\n            if (self.args.length == 0) return make_node(AST_Function, self, {\n                argnames: [],\n                body: []\n            }).optimize(compressor);\n            if (all(self.args, function(x) {\n                return x instanceof AST_String;\n            })) {\n                // quite a corner-case, but we can handle it:\n                //   https://github.com/mishoo/UglifyJS2/issues/203\n                // if the code argument is a constant, then we can minify it.\n                try {\n                    var code = \"n(function(\" + self.args.slice(0, -1).map(function(arg) {\n                        return arg.value;\n                    }).join(\",\") + \"){\" + self.args[self.args.length - 1].value + \"})\";\n                    var ast = parse(code);\n                    var mangle = { ie8: compressor.option(\"ie8\") };\n                    ast.figure_out_scope(mangle);\n                    var comp = new Compressor(compressor.options);\n                    ast = ast.transform(comp);\n                    ast.figure_out_scope(mangle);\n                    base54.reset();\n                    ast.compute_char_frequency(mangle);\n                    ast.mangle_names(mangle);\n                    var fun;\n                    ast.walk(new TreeWalker(function(node) {\n                        if (fun) return true;\n                        if (is_func_expr(node)) {\n                            fun = node;\n                            return true;\n                        }\n                    }));\n                    if (fun.body instanceof AST_Node) {\n                        fun.body = [\n                            make_node(AST_Return, fun.body, {\n                                value: fun.body\n                            })\n                        ];\n                    }\n                    var code = OutputStream();\n                    AST_BlockStatement.prototype._codegen.call(fun, fun, code);\n                    self.args = [\n                        make_node(AST_String, self, {\n                            value: fun.argnames.map(function(arg) {\n                                return arg.print_to_string();\n                            }).join(\",\")\n                        }),\n                        make_node(AST_String, self.args[self.args.length - 1], {\n                            value: code.get().replace(/^{|}$/g, \"\")\n                        })\n                    ];\n                    return self;\n                } catch (ex) {\n                    if (ex instanceof JS_Parse_Error) {\n                        compressor.warn(\"Error parsing code passed to new Function [{file}:{line},{col}]\", self.args[self.args.length - 1].start);\n                        compressor.warn(ex.toString());\n                    } else {\n                        throw ex;\n                    }\n                }\n            }\n        }\n        var stat = is_func && fn.body;\n        if (stat instanceof AST_Node) {\n            stat = make_node(AST_Return, stat, {\n                value: stat\n            });\n        } else if (stat) {\n            stat = stat[0];\n        }\n        var is_regular_func = is_func && !fn.is_generator && !fn.async;\n        var can_inline = compressor.option(\"inline\") && !self.is_expr_pure(compressor);\n        if (can_inline && stat instanceof AST_Return && is_regular_func) {\n            var value = stat.value;\n            if (!value || value.is_constant_expression()) {\n                if (value) {\n                    value = value.clone(true);\n                } else {\n                    value = make_node(AST_Undefined, self);\n                }\n                var args = self.args.concat(value);\n                return make_sequence(self, args).optimize(compressor);\n            }\n        }\n        if (is_regular_func) {\n            var def, value, scope, in_loop, level = -1;\n            if (can_inline\n                && simple_args\n                && !fn.uses_arguments\n                && !fn.pinned()\n                && !(compressor.parent() instanceof AST_Class)\n                && !(fn.name && fn instanceof AST_Function)\n                && (!(compressor.find_parent(AST_Lambda) instanceof AST_Arrow)\n                    || fn.argnames.length == 0\n                        && (fn.body instanceof AST_Node || fn.body.length == 1))\n                && (value = can_flatten_body(stat))\n                && (exp === fn\n                    || compressor.option(\"unused\")\n                        && (def = exp.definition()).references.length == 1\n                        && !recursive_ref(compressor, def)\n                        && fn.is_constant_expression(exp.scope))\n                && !self.pure\n                && !fn.contains_this()\n                && can_inject_symbols()\n                && !(scope instanceof AST_Class)) {\n                fn._squeezed = true;\n                return make_sequence(self, flatten_fn()).optimize(compressor);\n            }\n            if (compressor.option(\"side_effects\") && !(fn.body instanceof AST_Node) && all(fn.body, is_empty)) {\n                var args = self.args.concat(make_node(AST_Undefined, self));\n                return make_sequence(self, args).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"negate_iife\")\n            && compressor.parent() instanceof AST_SimpleStatement\n            && is_iife_call(self)) {\n            return self.negate(compressor, true);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n\n        function return_value(stat) {\n            if (!stat) return make_node(AST_Undefined, self);\n            if (stat instanceof AST_Return) {\n                if (!stat.value) return make_node(AST_Undefined, self);\n                return stat.value.clone(true);\n            }\n            if (stat instanceof AST_SimpleStatement) {\n                return make_node(AST_UnaryPrefix, stat, {\n                    operator: \"void\",\n                    expression: stat.body.clone(true)\n                });\n            }\n        }\n\n        function can_flatten_body(stat) {\n            var body = fn.body instanceof AST_Node ? [ fn.body ] : fn.body;\n            var len = body.length;\n            if (compressor.option(\"inline\") < 3) {\n                return len == 1 && return_value(stat);\n            }\n            stat = null;\n            for (var i = 0; i < len; i++) {\n                var line = body[i];\n                if (line instanceof AST_Var) {\n                    if (stat && !all(line.definitions, function(var_def) {\n                        return !var_def.value;\n                    })) {\n                        return false;\n                    }\n                } else if (stat) {\n                    return false;\n                } else {\n                    stat = line;\n                }\n            }\n            return return_value(stat);\n        }\n\n        function can_inject_args(block_scoped, safe_to_inject) {\n            for (var i = 0, len = fn.argnames.length; i < len; i++) {\n                var arg = fn.argnames[i];\n                if (arg instanceof AST_DefaultAssign) {\n                    if (arg.left.__unused) continue;\n                    return false;\n                }\n                if (arg instanceof AST_Destructuring) return false;\n                if (arg instanceof AST_Expansion) {\n                    if (arg.expression.__unused) continue;\n                    return false;\n                }\n                if (arg.__unused) continue;\n                if (!safe_to_inject\n                    || block_scoped.has(arg.name)\n                    || identifier_atom.has(arg.name)\n                    || scope.var_names().has(arg.name)) {\n                    return false;\n                }\n                if (in_loop) in_loop.push(arg.definition());\n            }\n            return true;\n        }\n\n        function can_inject_vars(block_scoped, safe_to_inject) {\n            var len = fn.body.length;\n            for (var i = 0; i < len; i++) {\n                var stat = fn.body[i];\n                if (!(stat instanceof AST_Var)) continue;\n                if (!safe_to_inject) return false;\n                for (var j = stat.definitions.length; --j >= 0;) {\n                    var name = stat.definitions[j].name;\n                    if (name instanceof AST_Destructuring\n                        || block_scoped.has(name.name)\n                        || identifier_atom.has(name.name)\n                        || scope.var_names().has(name.name)) {\n                        return false;\n                    }\n                    if (in_loop) in_loop.push(name.definition());\n                }\n            }\n            return true;\n        }\n\n        function can_inject_symbols() {\n            var block_scoped = new Set();\n            do {\n                scope = compressor.parent(++level);\n                if (scope.is_block_scope() && !(compressor.parent(level - 1) instanceof AST_Scope)) {\n                    if (scope.block_scope) {\n                        // TODO this is sometimes undefined during compression.\n                        // But it should always have a value!\n                        scope.block_scope.variables.forEach(function (variable) {\n                            block_scoped.add(variable.name);\n                        });\n                    }\n                }\n                if (scope instanceof AST_Catch) {\n                    if (scope.argname) {\n                        block_scoped.add(scope.argname.name);\n                    }\n                } else if (scope instanceof AST_IterationStatement) {\n                    in_loop = [];\n                } else if (scope instanceof AST_SymbolRef) {\n                    if (scope.fixed_value() instanceof AST_Scope) return false;\n                }\n            } while (!(scope instanceof AST_Scope) || scope instanceof AST_Arrow);\n            var safe_to_inject = !(scope instanceof AST_Toplevel) || compressor.toplevel.vars;\n            var inline = compressor.option(\"inline\");\n            if (!can_inject_vars(block_scoped, inline >= 3 && safe_to_inject)) return false;\n            if (!can_inject_args(block_scoped, inline >= 2 && safe_to_inject)) return false;\n            return !in_loop || in_loop.length == 0 || !is_reachable(fn, in_loop);\n        }\n\n        function append_var(decls, expressions, name, value) {\n            var def = name.definition();\n            scope.variables.set(name.name, def);\n            scope.enclosed.push(def);\n            if (!scope.var_names().has(name.name)) {\n                scope.var_names().add(name.name);\n                decls.push(make_node(AST_VarDef, name, {\n                    name: name,\n                    value: null\n                }));\n            }\n            var sym = make_node(AST_SymbolRef, name, name);\n            def.references.push(sym);\n            if (value) expressions.push(make_node(AST_Assign, self, {\n                operator: \"=\",\n                left: sym,\n                right: value.clone()\n            }));\n        }\n\n        function flatten_args(decls, expressions) {\n            var len = fn.argnames.length;\n            for (var i = self.args.length; --i >= len;) {\n                expressions.push(self.args[i]);\n            }\n            for (i = len; --i >= 0;) {\n                var name = fn.argnames[i];\n                var value = self.args[i];\n                if (name.__unused || !name.name || scope.var_names().has(name.name)) {\n                    if (value) expressions.push(value);\n                } else {\n                    var symbol = make_node(AST_SymbolVar, name, name);\n                    name.definition().orig.push(symbol);\n                    if (!value && in_loop) value = make_node(AST_Undefined, self);\n                    append_var(decls, expressions, symbol, value);\n                }\n            }\n            decls.reverse();\n            expressions.reverse();\n        }\n\n        function flatten_vars(decls, expressions) {\n            var pos = expressions.length;\n            for (var i = 0, lines = fn.body.length; i < lines; i++) {\n                var stat = fn.body[i];\n                if (!(stat instanceof AST_Var)) continue;\n                for (var j = 0, defs = stat.definitions.length; j < defs; j++) {\n                    var var_def = stat.definitions[j];\n                    var name = var_def.name;\n                    append_var(decls, expressions, name, var_def.value);\n                    if (in_loop && all(fn.argnames, function(argname) {\n                        return argname.name != name.name;\n                    })) {\n                        var def = fn.variables.get(name.name);\n                        var sym = make_node(AST_SymbolRef, name, name);\n                        def.references.push(sym);\n                        expressions.splice(pos++, 0, make_node(AST_Assign, var_def, {\n                            operator: \"=\",\n                            left: sym,\n                            right: make_node(AST_Undefined, name)\n                        }));\n                    }\n                }\n            }\n        }\n\n        function flatten_fn() {\n            var decls = [];\n            var expressions = [];\n            flatten_args(decls, expressions);\n            flatten_vars(decls, expressions);\n            expressions.push(value);\n            if (decls.length) {\n                i = scope.body.indexOf(compressor.parent(level - 1)) + 1;\n                scope.body.splice(i, 0, make_node(AST_Var, fn, {\n                    definitions: decls\n                }));\n            }\n            return expressions;\n        }\n    });\n\n    def_optimize(AST_New, function(self, compressor) {\n        if (\n            compressor.option(\"unsafe\") &&\n            is_undeclared_ref(self.expression) &&\n            [\"Object\", \"RegExp\", \"Function\", \"Error\", \"Array\"].includes(self.expression.name)\n        ) return make_node(AST_Call, self, self).transform(compressor);\n        return self;\n    });\n\n    def_optimize(AST_Sequence, function(self, compressor) {\n        if (!compressor.option(\"side_effects\")) return self;\n        var expressions = [];\n        filter_for_side_effects();\n        var end = expressions.length - 1;\n        trim_right_for_undefined();\n        if (end == 0) {\n            self = maintain_this_binding(compressor.parent(), compressor.self(), expressions[0]);\n            if (!(self instanceof AST_Sequence)) self = self.optimize(compressor);\n            return self;\n        }\n        self.expressions = expressions;\n        return self;\n\n        function filter_for_side_effects() {\n            var first = first_in_statement(compressor);\n            var last = self.expressions.length - 1;\n            self.expressions.forEach(function(expr, index) {\n                if (index < last) expr = expr.drop_side_effect_free(compressor, first);\n                if (expr) {\n                    merge_sequence(expressions, expr);\n                    first = false;\n                }\n            });\n        }\n\n        function trim_right_for_undefined() {\n            while (end > 0 && is_undefined(expressions[end], compressor)) end--;\n            if (end < expressions.length - 1) {\n                expressions[end] = make_node(AST_UnaryPrefix, self, {\n                    operator   : \"void\",\n                    expression : expressions[end]\n                });\n                expressions.length = end + 1;\n            }\n        }\n    });\n\n    AST_Unary.DEFMETHOD(\"lift_sequences\", function(compressor) {\n        if (compressor.option(\"sequences\")) {\n            if (this.expression instanceof AST_Sequence) {\n                var x = this.expression.expressions.slice();\n                var e = this.clone();\n                e.expression = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n        }\n        return this;\n    });\n\n    def_optimize(AST_UnaryPostfix, function(self, compressor) {\n        return self.lift_sequences(compressor);\n    });\n\n    def_optimize(AST_UnaryPrefix, function(self, compressor) {\n        var e = self.expression;\n        if (self.operator == \"delete\"\n            && !(e instanceof AST_SymbolRef\n                || e instanceof AST_PropAccess\n                || is_identifier_atom(e))) {\n            if (e instanceof AST_Sequence) {\n                e = e.expressions.slice();\n                e.push(make_node(AST_True, self));\n                return make_sequence(self, e).optimize(compressor);\n            }\n            return make_sequence(self, [ e, make_node(AST_True, self) ]).optimize(compressor);\n        }\n        var seq = self.lift_sequences(compressor);\n        if (seq !== self) {\n            return seq;\n        }\n        if (compressor.option(\"side_effects\") && self.operator == \"void\") {\n            e = e.drop_side_effect_free(compressor);\n            if (e) {\n                self.expression = e;\n                return self;\n            } else {\n                return make_node(AST_Undefined, self).optimize(compressor);\n            }\n        }\n        if (compressor.in_boolean_context()) {\n            switch (self.operator) {\n              case \"!\":\n                if (e instanceof AST_UnaryPrefix && e.operator == \"!\") {\n                    // !!foo ==> foo, if we're in boolean context\n                    return e.expression;\n                }\n                if (e instanceof AST_Binary) {\n                    self = best_of(compressor, self, e.negate(compressor, first_in_statement(compressor)));\n                }\n                break;\n              case \"typeof\":\n                // typeof always returns a non-empty string, thus it's\n                // always true in booleans\n                compressor.warn(\"Boolean expression always true [{file}:{line},{col}]\", self.start);\n                return (e instanceof AST_SymbolRef ? make_node(AST_True, self) : make_sequence(self, [\n                    e,\n                    make_node(AST_True, self)\n                ])).optimize(compressor);\n            }\n        }\n        if (self.operator == \"-\" && e instanceof AST_Infinity) {\n            e = e.transform(compressor);\n        }\n        if (e instanceof AST_Binary\n            && (self.operator == \"+\" || self.operator == \"-\")\n            && (e.operator == \"*\" || e.operator == \"/\" || e.operator == \"%\")) {\n            return make_node(AST_Binary, self, {\n                operator: e.operator,\n                left: make_node(AST_UnaryPrefix, e.left, {\n                    operator: self.operator,\n                    expression: e.left\n                }),\n                right: e.right\n            });\n        }\n        // avoids infinite recursion of numerals\n        if (self.operator != \"-\"\n            || !(e instanceof AST_Number || e instanceof AST_Infinity)) {\n            var ev = self.evaluate(compressor);\n            if (ev !== self) {\n                ev = make_node_from_constant(ev, self).optimize(compressor);\n                return best_of(compressor, ev, self);\n            }\n        }\n        return self;\n    });\n\n    AST_Binary.DEFMETHOD(\"lift_sequences\", function(compressor) {\n        if (compressor.option(\"sequences\")) {\n            if (this.left instanceof AST_Sequence) {\n                var x = this.left.expressions.slice();\n                var e = this.clone();\n                e.left = x.pop();\n                x.push(e);\n                return make_sequence(this, x).optimize(compressor);\n            }\n            if (this.right instanceof AST_Sequence && !this.left.has_side_effects(compressor)) {\n                var assign = this.operator == \"=\" && this.left instanceof AST_SymbolRef;\n                var x = this.right.expressions;\n                var last = x.length - 1;\n                for (var i = 0; i < last; i++) {\n                    if (!assign && x[i].has_side_effects(compressor)) break;\n                }\n                if (i == last) {\n                    x = x.slice();\n                    var e = this.clone();\n                    e.right = x.pop();\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                } else if (i > 0) {\n                    var e = this.clone();\n                    e.right = make_sequence(this.right, x.slice(i));\n                    x = x.slice(0, i);\n                    x.push(e);\n                    return make_sequence(this, x).optimize(compressor);\n                }\n            }\n        }\n        return this;\n    });\n\n    var commutativeOperators = makePredicate(\"== === != !== * & | ^\");\n    function is_object(node) {\n        return node instanceof AST_Array\n            || node instanceof AST_Lambda\n            || node instanceof AST_Object\n            || node instanceof AST_Class;\n    }\n\n    def_optimize(AST_Binary, function(self, compressor) {\n        function reversible() {\n            return self.left.is_constant()\n                || self.right.is_constant()\n                || !self.left.has_side_effects(compressor)\n                    && !self.right.has_side_effects(compressor);\n        }\n        function reverse(op) {\n            if (reversible()) {\n                if (op) self.operator = op;\n                var tmp = self.left;\n                self.left = self.right;\n                self.right = tmp;\n            }\n        }\n        if (commutativeOperators.has(self.operator)) {\n            if (self.right.is_constant()\n                && !self.left.is_constant()) {\n                // if right is a constant, whatever side effects the\n                // left side might have could not influence the\n                // result.  hence, force switch.\n\n                if (!(self.left instanceof AST_Binary\n                      && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    reverse();\n                }\n            }\n        }\n        self = self.lift_sequences(compressor);\n        if (compressor.option(\"comparisons\")) switch (self.operator) {\n          case \"===\":\n          case \"!==\":\n            var is_strict_comparison = true;\n            if ((self.left.is_string(compressor) && self.right.is_string(compressor)) ||\n                (self.left.is_number(compressor) && self.right.is_number(compressor)) ||\n                (self.left.is_boolean() && self.right.is_boolean()) ||\n                self.left.equivalent_to(self.right)) {\n                self.operator = self.operator.substr(0, 2);\n            }\n            // XXX: intentionally falling down to the next case\n          case \"==\":\n          case \"!=\":\n            // void 0 == x => null == x\n            if (!is_strict_comparison && is_undefined(self.left, compressor)) {\n                self.left = make_node(AST_Null, self.left);\n            } else if (compressor.option(\"typeofs\")\n                // \"undefined\" == typeof x => undefined === x\n                && self.left instanceof AST_String\n                && self.left.value == \"undefined\"\n                && self.right instanceof AST_UnaryPrefix\n                && self.right.operator == \"typeof\") {\n                var expr = self.right.expression;\n                if (expr instanceof AST_SymbolRef ? expr.is_declared(compressor)\n                    : !(expr instanceof AST_PropAccess && compressor.option(\"ie8\"))) {\n                    self.right = expr;\n                    self.left = make_node(AST_Undefined, self.left).optimize(compressor);\n                    if (self.operator.length == 2) self.operator += \"=\";\n                }\n            } else if (self.left instanceof AST_SymbolRef\n                // obj !== obj => false\n                && self.right instanceof AST_SymbolRef\n                && self.left.definition() === self.right.definition()\n                && is_object(self.left.fixed_value())) {\n                return make_node(self.operator[0] == \"=\" ? AST_True : AST_False, self);\n            }\n            break;\n          case \"&&\":\n          case \"||\":\n            var lhs = self.left;\n            if (lhs.operator == self.operator) {\n                lhs = lhs.right;\n            }\n            if (lhs instanceof AST_Binary\n                && lhs.operator == (self.operator == \"&&\" ? \"!==\" : \"===\")\n                && self.right instanceof AST_Binary\n                && lhs.operator == self.right.operator\n                && (is_undefined(lhs.left, compressor) && self.right.left instanceof AST_Null\n                    || lhs.left instanceof AST_Null && is_undefined(self.right.left, compressor))\n                && !lhs.right.has_side_effects(compressor)\n                && lhs.right.equivalent_to(self.right.right)) {\n                var combined = make_node(AST_Binary, self, {\n                    operator: lhs.operator.slice(0, -1),\n                    left: make_node(AST_Null, self),\n                    right: lhs.right\n                });\n                if (lhs !== self.left) {\n                    combined = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.left.left,\n                        right: combined\n                    });\n                }\n                return combined;\n            }\n            break;\n        }\n        if (self.operator == \"+\" && compressor.in_boolean_context()) {\n            var ll = self.left.evaluate(compressor);\n            var rr = self.right.evaluate(compressor);\n            if (ll && typeof ll == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.right,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n            if (rr && typeof rr == \"string\") {\n                compressor.warn(\"+ in boolean context always true [{file}:{line},{col}]\", self.start);\n                return make_sequence(self, [\n                    self.left,\n                    make_node(AST_True, self)\n                ]).optimize(compressor);\n            }\n        }\n        if (compressor.option(\"comparisons\") && self.is_boolean()) {\n            if (!(compressor.parent() instanceof AST_Binary)\n                || compressor.parent() instanceof AST_Assign) {\n                var negated = make_node(AST_UnaryPrefix, self, {\n                    operator: \"!\",\n                    expression: self.negate(compressor, first_in_statement(compressor))\n                });\n                self = best_of(compressor, self, negated);\n            }\n            if (compressor.option(\"unsafe_comps\")) {\n                switch (self.operator) {\n                  case \"<\": reverse(\">\"); break;\n                  case \"<=\": reverse(\">=\"); break;\n                }\n            }\n        }\n        if (self.operator == \"+\") {\n            if (self.right instanceof AST_String\n                && self.right.getValue() == \"\"\n                && self.left.is_string(compressor)) {\n                return self.left;\n            }\n            if (self.left instanceof AST_String\n                && self.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                return self.right;\n            }\n            if (self.left instanceof AST_Binary\n                && self.left.operator == \"+\"\n                && self.left.left instanceof AST_String\n                && self.left.left.getValue() == \"\"\n                && self.right.is_string(compressor)) {\n                self.left = self.left.right;\n                return self.transform(compressor);\n            }\n        }\n        if (compressor.option(\"evaluate\")) {\n            switch (self.operator) {\n              case \"&&\":\n                var ll = self.left.truthy ? true : self.left.falsy ? false : self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of && always false [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), compressor.self(), self.left).optimize(compressor);\n                } else if (!(ll instanceof AST_Node)) {\n                    compressor.warn(\"Condition left of && always true [{file}:{line},{col}]\", self.start);\n                    return make_sequence(self, [ self.left, self.right ]).optimize(compressor);\n                }\n                var rr = self.right.evaluate(compressor);\n                if (!rr) {\n                    if (compressor.in_boolean_context()) {\n                        compressor.warn(\"Boolean && always false [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_False, self)\n                        ]).optimize(compressor);\n                    } else self.falsy = true;\n                } else if (!(rr instanceof AST_Node)) {\n                    var parent = compressor.parent();\n                    if (parent.operator == \"&&\" && parent.left === compressor.self() || compressor.in_boolean_context()) {\n                        compressor.warn(\"Dropping side-effect-free && [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                }\n                // x || false && y ---> x ? y : false\n                if (self.left.operator == \"||\") {\n                    var lr = self.left.right.evaluate(compressor);\n                    if (!lr) return make_node(AST_Conditional, self, {\n                        condition: self.left.left,\n                        consequent: self.right,\n                        alternative: self.left.right\n                    }).optimize(compressor);\n                }\n                break;\n              case \"||\":\n                var ll = self.left.truthy ? true : self.left.falsy ? false : self.left.evaluate(compressor);\n                if (!ll) {\n                    compressor.warn(\"Condition left of || always false [{file}:{line},{col}]\", self.start);\n                    return make_sequence(self, [ self.left, self.right ]).optimize(compressor);\n                } else if (!(ll instanceof AST_Node)) {\n                    compressor.warn(\"Condition left of || always true [{file}:{line},{col}]\", self.start);\n                    return maintain_this_binding(compressor.parent(), compressor.self(), self.left).optimize(compressor);\n                }\n                var rr = self.right.evaluate(compressor);\n                if (!rr) {\n                    var parent = compressor.parent();\n                    if (parent.operator == \"||\" && parent.left === compressor.self() || compressor.in_boolean_context()) {\n                        compressor.warn(\"Dropping side-effect-free || [{file}:{line},{col}]\", self.start);\n                        return self.left.optimize(compressor);\n                    }\n                } else if (!(rr instanceof AST_Node)) {\n                    if (compressor.in_boolean_context()) {\n                        compressor.warn(\"Boolean || always true [{file}:{line},{col}]\", self.start);\n                        return make_sequence(self, [\n                            self.left,\n                            make_node(AST_True, self)\n                        ]).optimize(compressor);\n                    } else self.truthy = true;\n                }\n                if (self.left.operator == \"&&\") {\n                    var lr = self.left.right.evaluate(compressor);\n                    if (lr && !(lr instanceof AST_Node)) return make_node(AST_Conditional, self, {\n                        condition: self.left.left,\n                        consequent: self.left.right,\n                        alternative: self.right\n                    }).optimize(compressor);\n                }\n                break;\n            }\n            var associative = true;\n            switch (self.operator) {\n              case \"+\":\n                // \"foo\" + (\"bar\" + x) => \"foobar\" + x\n                if (self.left instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_String, self.left, {\n                            value: \"\" + self.left.getValue() + self.right.left.getValue(),\n                            start: self.left.start,\n                            end: self.right.left.end\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // (x + \"foo\") + \"bar\" => x + \"foobar\"\n                if (self.right instanceof AST_Constant\n                    && self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.right instanceof AST_Constant\n                    && self.left.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: self.left.left,\n                        right: make_node(AST_String, self.right, {\n                            value: \"\" + self.left.right.getValue() + self.right.getValue(),\n                            start: self.left.right.start,\n                            end: self.right.end\n                        })\n                    });\n                }\n                // (x + \"foo\") + (\"bar\" + y) => (x + \"foobar\") + y\n                if (self.left instanceof AST_Binary\n                    && self.left.operator == \"+\"\n                    && self.left.is_string(compressor)\n                    && self.left.right instanceof AST_Constant\n                    && self.right instanceof AST_Binary\n                    && self.right.operator == \"+\"\n                    && self.right.left instanceof AST_Constant\n                    && self.right.is_string(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"+\",\n                        left: make_node(AST_Binary, self.left, {\n                            operator: \"+\",\n                            left: self.left.left,\n                            right: make_node(AST_String, self.left.right, {\n                                value: \"\" + self.left.right.getValue() + self.right.left.getValue(),\n                                start: self.left.right.start,\n                                end: self.right.left.end\n                            })\n                        }),\n                        right: self.right.right\n                    });\n                }\n                // a + -b => a - b\n                if (self.right instanceof AST_UnaryPrefix\n                    && self.right.operator == \"-\"\n                    && self.left.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.left,\n                        right: self.right.expression\n                    });\n                    break;\n                }\n                // -a + b => b - a\n                if (self.left instanceof AST_UnaryPrefix\n                    && self.left.operator == \"-\"\n                    && reversible()\n                    && self.right.is_number(compressor)) {\n                    self = make_node(AST_Binary, self, {\n                        operator: \"-\",\n                        left: self.right,\n                        right: self.left.expression\n                    });\n                    break;\n                }\n              case \"*\":\n                associative = compressor.option(\"unsafe_math\");\n              case \"&\":\n              case \"|\":\n              case \"^\":\n                // a + +b => +b + a\n                if (self.left.is_number(compressor)\n                    && self.right.is_number(compressor)\n                    && reversible()\n                    && !(self.left instanceof AST_Binary\n                        && self.left.operator != self.operator\n                        && PRECEDENCE[self.left.operator] >= PRECEDENCE[self.operator])) {\n                    var reversed = make_node(AST_Binary, self, {\n                        operator: self.operator,\n                        left: self.right,\n                        right: self.left\n                    });\n                    if (self.right instanceof AST_Constant\n                        && !(self.left instanceof AST_Constant)) {\n                        self = best_of(compressor, reversed, self);\n                    } else {\n                        self = best_of(compressor, self, reversed);\n                    }\n                }\n                if (associative && self.is_number(compressor)) {\n                    // a + (b + c) => (a + b) + c\n                    if (self.right instanceof AST_Binary\n                        && self.right.operator == self.operator) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: self.left,\n                                right: self.right.left,\n                                start: self.left.start,\n                                end: self.right.left.end\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                    // (n + 2) + 3 => 5 + n\n                    // (2 * n) * 3 => 6 + n\n                    if (self.right instanceof AST_Constant\n                        && self.left instanceof AST_Binary\n                        && self.left.operator == self.operator) {\n                        if (self.left.left instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.left,\n                                    right: self.right,\n                                    start: self.left.left.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.right\n                            });\n                        } else if (self.left.right instanceof AST_Constant) {\n                            self = make_node(AST_Binary, self, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right,\n                                    start: self.left.right.start,\n                                    end: self.right.end\n                                }),\n                                right: self.left.left\n                            });\n                        }\n                    }\n                    // (a | 1) | (2 | d) => (3 | a) | b\n                    if (self.left instanceof AST_Binary\n                        && self.left.operator == self.operator\n                        && self.left.right instanceof AST_Constant\n                        && self.right instanceof AST_Binary\n                        && self.right.operator == self.operator\n                        && self.right.left instanceof AST_Constant) {\n                        self = make_node(AST_Binary, self, {\n                            operator: self.operator,\n                            left: make_node(AST_Binary, self.left, {\n                                operator: self.operator,\n                                left: make_node(AST_Binary, self.left.left, {\n                                    operator: self.operator,\n                                    left: self.left.right,\n                                    right: self.right.left,\n                                    start: self.left.right.start,\n                                    end: self.right.left.end\n                                }),\n                                right: self.left.left\n                            }),\n                            right: self.right.right\n                        });\n                    }\n                }\n            }\n        }\n        // x && (y && z)  ==>  x && y && z\n        // x || (y || z)  ==>  x || y || z\n        // x + (\"y\" + z)  ==>  x + \"y\" + z\n        // \"x\" + (y + \"z\")==>  \"x\" + y + \"z\"\n        if (self.right instanceof AST_Binary\n            && self.right.operator == self.operator\n            && (lazy_op.has(self.operator)\n                || (self.operator == \"+\"\n                    && (self.right.left.is_string(compressor)\n                        || (self.left.is_string(compressor)\n                            && self.right.right.is_string(compressor)))))\n        ) {\n            self.left = make_node(AST_Binary, self.left, {\n                operator : self.operator,\n                left     : self.left,\n                right    : self.right.left\n            });\n            self.right = self.right.right;\n            return self.transform(compressor);\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    def_optimize(AST_SymbolExport, function(self, compressor) {\n        return self;\n    });\n\n    function recursive_ref(compressor, def) {\n        var node;\n        for (var i = 0; node = compressor.parent(i); i++) {\n            if (node instanceof AST_Lambda) {\n                var name = node.name;\n                if (name && name.definition() === def) break;\n            }\n        }\n        return node;\n    }\n\n    function within_array_or_object_literal(compressor) {\n        var node, level = 0;\n        while (node = compressor.parent(level++)) {\n            if (node instanceof AST_Statement) return false;\n            if (node instanceof AST_Array\n                || node instanceof AST_ObjectKeyVal\n                || node instanceof AST_Object) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    def_optimize(AST_SymbolRef, function(self, compressor) {\n        if (!compressor.option(\"ie8\")\n            && is_undeclared_ref(self)\n            && (!self.scope.uses_with || !compressor.find_parent(AST_With))) {\n            switch (self.name) {\n              case \"undefined\":\n                return make_node(AST_Undefined, self).optimize(compressor);\n              case \"NaN\":\n                return make_node(AST_NaN, self).optimize(compressor);\n              case \"Infinity\":\n                return make_node(AST_Infinity, self).optimize(compressor);\n            }\n        }\n        var parent = compressor.parent();\n        if (compressor.option(\"reduce_vars\") && is_lhs(self, parent) !== self) {\n            var d = self.definition();\n            if (compressor.top_retain && d.global && compressor.top_retain(d)) {\n                d.fixed = false;\n                d.should_replace = false;\n                d.single_use = false;\n                return self;\n            }\n            var fixed = self.fixed_value();\n            var single_use = d.single_use\n                && !(parent instanceof AST_Call && parent.is_expr_pure(compressor));\n            if (single_use && (fixed instanceof AST_Lambda || fixed instanceof AST_Class)) {\n                if (retain_top_func(fixed, compressor)) {\n                    single_use = false;\n                } else if (d.scope !== self.scope\n                    && (!compressor.option(\"reduce_funcs\") && fixed instanceof AST_Lambda\n                        || d.escaped == 1\n                        || fixed.inlined\n                        || within_array_or_object_literal(compressor))) {\n                    single_use = false;\n                } else if (recursive_ref(compressor, d)) {\n                    single_use = false;\n                } else if (d.scope !== self.scope || d.orig[0] instanceof AST_SymbolFunarg) {\n                    single_use = fixed.is_constant_expression(self.scope);\n                    if (single_use == \"f\") {\n                        var scope = self.scope;\n                        do {\n                            if (scope instanceof AST_Defun || is_func_expr(scope)) {\n                                scope.inlined = true;\n                            }\n                        } while (scope = scope.parent_scope);\n                    }\n                }\n            }\n            if (single_use && fixed) {\n                if (fixed instanceof AST_DefClass) {\n                    fixed = make_node(AST_ClassExpression, fixed, fixed);\n                }\n                if (fixed instanceof AST_Defun) {\n                    fixed._squeezed = true;\n                    fixed = make_node(AST_Function, fixed, fixed);\n                }\n                var value;\n                if (d.recursive_refs > 0 && fixed.name instanceof AST_SymbolDefun) {\n                    value = fixed.clone(true);\n                    var defun_def = value.name.definition();\n                    var lambda_def = value.variables.get(value.name.name);\n                    var name = lambda_def && lambda_def.orig[0];\n                    if (!(name instanceof AST_SymbolLambda)) {\n                        name = make_node(AST_SymbolLambda, value.name, value.name);\n                        name.scope = value;\n                        value.name = name;\n                        lambda_def = value.def_function(name);\n                    }\n                    value.walk(new TreeWalker(function(node) {\n                        if (node instanceof AST_SymbolRef && node.definition() === defun_def) {\n                            node.thedef = lambda_def;\n                            lambda_def.references.push(node);\n                        }\n                    }));\n                } else {\n                    value = fixed.optimize(compressor);\n                    if (value === fixed) value = fixed.clone(true);\n                }\n                return value;\n            }\n            if (fixed && d.should_replace === undefined) {\n                var init;\n                if (fixed instanceof AST_This) {\n                    if (!(d.orig[0] instanceof AST_SymbolFunarg)\n                        && all(d.references, function(ref) {\n                            return d.scope === ref.scope;\n                        })) {\n                        init = fixed;\n                    }\n                } else {\n                    var ev = fixed.evaluate(compressor);\n                    if (ev !== fixed && (compressor.option(\"unsafe_regexp\") || !(ev instanceof RegExp))) {\n                        init = make_node_from_constant(ev, fixed);\n                    }\n                }\n                if (init) {\n                    var value_length = init.optimize(compressor).print_to_string().length;\n                    var fn;\n                    if (has_symbol_ref(fixed)) {\n                        fn = function() {\n                            var result = init.optimize(compressor);\n                            return result === init ? result.clone(true) : result;\n                        };\n                    } else {\n                        value_length = Math.min(value_length, fixed.print_to_string().length);\n                        fn = function() {\n                            var result = best_of_expression(init.optimize(compressor), fixed);\n                            return result === init || result === fixed ? result.clone(true) : result;\n                        };\n                    }\n                    var name_length = d.name.length;\n                    var overhead = 0;\n                    if (compressor.option(\"unused\") && !compressor.exposed(d)) {\n                        overhead = (name_length + 2 + value_length) / (d.references.length - d.assignments);\n                    }\n                    d.should_replace = value_length <= name_length + overhead ? fn : false;\n                } else {\n                    d.should_replace = false;\n                }\n            }\n            if (d.should_replace) {\n                return d.should_replace();\n            }\n        }\n        return self;\n\n        function has_symbol_ref(value) {\n            var found;\n            value.walk(new TreeWalker(function(node) {\n                if (node instanceof AST_SymbolRef) found = true;\n                if (found) return true;\n            }));\n            return found;\n        }\n    });\n\n    function is_atomic(lhs, self) {\n        return lhs instanceof AST_SymbolRef || lhs.TYPE === self.TYPE;\n    }\n\n    def_optimize(AST_Undefined, function(self, compressor) {\n        if (compressor.option(\"unsafe_undefined\")) {\n            var undef = find_variable(compressor, \"undefined\");\n            if (undef) {\n                var ref = make_node(AST_SymbolRef, self, {\n                    name   : \"undefined\",\n                    scope  : undef.scope,\n                    thedef : undef\n                });\n                ref.is_undefined = true;\n                return ref;\n            }\n        }\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        return make_node(AST_UnaryPrefix, self, {\n            operator: \"void\",\n            expression: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    def_optimize(AST_Infinity, function(self, compressor) {\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && is_atomic(lhs, self)) return self;\n        if (compressor.option(\"keep_infinity\")\n            && !(lhs && !is_atomic(lhs, self))\n            && !find_variable(compressor, \"Infinity\"))\n            return self;\n        return make_node(AST_Binary, self, {\n            operator: \"/\",\n            left: make_node(AST_Number, self, {\n                value: 1\n            }),\n            right: make_node(AST_Number, self, {\n                value: 0\n            })\n        });\n    });\n\n    def_optimize(AST_NaN, function(self, compressor) {\n        var lhs = is_lhs(compressor.self(), compressor.parent());\n        if (lhs && !is_atomic(lhs, self)\n            || find_variable(compressor, \"NaN\")) {\n            return make_node(AST_Binary, self, {\n                operator: \"/\",\n                left: make_node(AST_Number, self, {\n                    value: 0\n                }),\n                right: make_node(AST_Number, self, {\n                    value: 0\n                })\n            });\n        }\n        return self;\n    });\n\n    function is_reachable(self, defs) {\n        var reachable = false;\n        var find_ref = new TreeWalker(function(node) {\n            if (reachable) return true;\n            if (node instanceof AST_SymbolRef && member(node.definition(), defs)) {\n                return reachable = true;\n            }\n        });\n        var scan_scope = new TreeWalker(function(node) {\n            if (reachable) return true;\n            if (node instanceof AST_Scope && node !== self) {\n                var parent = scan_scope.parent();\n                if (parent instanceof AST_Call && parent.expression === node) return;\n                node.walk(find_ref);\n                return true;\n            }\n        });\n        self.walk(scan_scope);\n        return reachable;\n    }\n\n    const ASSIGN_OPS = makePredicate(\"+ - / * % >> << >>> | ^ &\");\n    const ASSIGN_OPS_COMMUTATIVE = makePredicate(\"* | ^ &\");\n    def_optimize(AST_Assign, function(self, compressor) {\n        var def;\n        if (compressor.option(\"dead_code\")\n            && self.left instanceof AST_SymbolRef\n            && (def = self.left.definition()).scope === compressor.find_parent(AST_Lambda)) {\n            var level = 0, node, parent = self;\n            do {\n                node = parent;\n                parent = compressor.parent(level++);\n                if (parent instanceof AST_Exit) {\n                    if (in_try(level, parent)) break;\n                    if (is_reachable(def.scope, [ def ])) break;\n                    if (self.operator == \"=\") return self.right;\n                    def.fixed = false;\n                    return make_node(AST_Binary, self, {\n                        operator: self.operator.slice(0, -1),\n                        left: self.left,\n                        right: self.right\n                    }).optimize(compressor);\n                }\n            } while (parent instanceof AST_Binary && parent.right === node\n                || parent instanceof AST_Sequence && parent.tail_node() === node);\n        }\n        self = self.lift_sequences(compressor);\n        if (self.operator == \"=\" && self.left instanceof AST_SymbolRef && self.right instanceof AST_Binary) {\n            // x = expr1 OP expr2\n            if (self.right.left instanceof AST_SymbolRef\n                && self.right.left.name == self.left.name\n                && ASSIGN_OPS.has(self.right.operator)) {\n                // x = x - 2  --->  x -= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.right;\n            } else if (self.right.right instanceof AST_SymbolRef\n                && self.right.right.name == self.left.name\n                && ASSIGN_OPS_COMMUTATIVE.has(self.right.operator)\n                && !self.right.left.has_side_effects(compressor)) {\n                // x = 2 & x  --->  x &= 2\n                self.operator = self.right.operator + \"=\";\n                self.right = self.right.left;\n            }\n        }\n        return self;\n\n        function in_try(level, node) {\n            var right = self.right;\n            self.right = make_node(AST_Null, right);\n            var may_throw = node.may_throw(compressor);\n            self.right = right;\n            var scope = self.left.definition().scope;\n            var parent;\n            while ((parent = compressor.parent(level++)) !== scope) {\n                if (parent instanceof AST_Try) {\n                    if (parent.bfinally) return true;\n                    if (may_throw && parent.bcatch) return true;\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_DefaultAssign, function(self, compressor) {\n        if (!compressor.option(\"evaluate\")) {\n            return self;\n        }\n        var evaluateRight = self.right.evaluate(compressor);\n\n        // `[x = undefined] = foo` ---> `[x] = foo`\n        if (evaluateRight === undefined) {\n            self = self.left;\n        } else if (evaluateRight !== self.right) {\n            evaluateRight = make_node_from_constant(evaluateRight, self.right);\n            self.right = best_of_expression(evaluateRight, self.right);\n        }\n\n        return self;\n    });\n\n    def_optimize(AST_Conditional, function(self, compressor) {\n        if (!compressor.option(\"conditionals\")) return self;\n        // This looks like lift_sequences(), should probably be under \"sequences\"\n        if (self.condition instanceof AST_Sequence) {\n            var expressions = self.condition.expressions.slice();\n            self.condition = expressions.pop();\n            expressions.push(self);\n            return make_sequence(self, expressions);\n        }\n        var cond = self.condition.evaluate(compressor);\n        if (cond !== self.condition) {\n            if (cond) {\n                compressor.warn(\"Condition always true [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), compressor.self(), self.consequent);\n            } else {\n                compressor.warn(\"Condition always false [{file}:{line},{col}]\", self.start);\n                return maintain_this_binding(compressor.parent(), compressor.self(), self.alternative);\n            }\n        }\n        var negated = cond.negate(compressor, first_in_statement(compressor));\n        if (best_of(compressor, cond, negated) === negated) {\n            self = make_node(AST_Conditional, self, {\n                condition: negated,\n                consequent: self.alternative,\n                alternative: self.consequent\n            });\n        }\n        var condition = self.condition;\n        var consequent = self.consequent;\n        var alternative = self.alternative;\n        // x?x:y --> x||y\n        if (condition instanceof AST_SymbolRef\n            && consequent instanceof AST_SymbolRef\n            && condition.definition() === consequent.definition()) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: condition,\n                right: alternative\n            });\n        }\n        // if (foo) exp = something; else exp = something_else;\n        //                   |\n        //                   v\n        // exp = foo ? something : something_else;\n        if (consequent instanceof AST_Assign\n            && alternative instanceof AST_Assign\n            && consequent.operator == alternative.operator\n            && consequent.left.equivalent_to(alternative.left)\n            && (!self.condition.has_side_effects(compressor)\n                || consequent.operator == \"=\"\n                    && !consequent.left.has_side_effects(compressor))) {\n            return make_node(AST_Assign, self, {\n                operator: consequent.operator,\n                left: consequent.left,\n                right: make_node(AST_Conditional, self, {\n                    condition: self.condition,\n                    consequent: consequent.right,\n                    alternative: alternative.right\n                })\n            });\n        }\n        // x ? y(a) : y(b) --> y(x ? a : b)\n        var arg_index;\n        if (consequent instanceof AST_Call\n            && alternative.TYPE === consequent.TYPE\n            && consequent.args.length > 0\n            && consequent.args.length == alternative.args.length\n            && consequent.expression.equivalent_to(alternative.expression)\n            && !self.condition.has_side_effects(compressor)\n            && !consequent.expression.has_side_effects(compressor)\n            && typeof (arg_index = single_arg_diff()) == \"number\") {\n            var node = consequent.clone();\n            node.args[arg_index] = make_node(AST_Conditional, self, {\n                condition: self.condition,\n                consequent: consequent.args[arg_index],\n                alternative: alternative.args[arg_index]\n            });\n            return node;\n        }\n        // x?y?z:a:a --> x&&y?z:a\n        if (consequent instanceof AST_Conditional\n            && consequent.alternative.equivalent_to(alternative)) {\n            return make_node(AST_Conditional, self, {\n                condition: make_node(AST_Binary, self, {\n                    left: self.condition,\n                    operator: \"&&\",\n                    right: consequent.condition\n                }),\n                consequent: consequent.consequent,\n                alternative: alternative\n            });\n        }\n        // x ? y : y --> x, y\n        if (consequent.equivalent_to(alternative)) {\n            return make_sequence(self, [\n                self.condition,\n                consequent\n            ]).optimize(compressor);\n        }\n        // x ? y || z : z --> x && y || z\n        if (consequent instanceof AST_Binary\n            && consequent.operator == \"||\"\n            && consequent.right.equivalent_to(alternative)) {\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: make_node(AST_Binary, self, {\n                    operator: \"&&\",\n                    left: self.condition,\n                    right: consequent.left\n                }),\n                right: alternative\n            }).optimize(compressor);\n        }\n        var in_bool = compressor.in_boolean_context();\n        if (is_true(self.consequent)) {\n            if (is_false(self.alternative)) {\n                // c ? true : false ---> !!c\n                return booleanize(self.condition);\n            }\n            // c ? true : x ---> !!c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition),\n                right: self.alternative\n            });\n        }\n        if (is_false(self.consequent)) {\n            if (is_true(self.alternative)) {\n                // c ? false : true ---> !c\n                return booleanize(self.condition.negate(compressor));\n            }\n            // c ? false : x ---> !c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.alternative\n            });\n        }\n        if (is_true(self.alternative)) {\n            // c ? x : true ---> !c || x\n            return make_node(AST_Binary, self, {\n                operator: \"||\",\n                left: booleanize(self.condition.negate(compressor)),\n                right: self.consequent\n            });\n        }\n        if (is_false(self.alternative)) {\n            // c ? x : false ---> !!c && x\n            return make_node(AST_Binary, self, {\n                operator: \"&&\",\n                left: booleanize(self.condition),\n                right: self.consequent\n            });\n        }\n\n        return self;\n\n        function booleanize(node) {\n            if (node.is_boolean()) return node;\n            // !!expression\n            return make_node(AST_UnaryPrefix, node, {\n                operator: \"!\",\n                expression: node.negate(compressor)\n            });\n        }\n\n        // AST_True or !0\n        function is_true(node) {\n            return node instanceof AST_True\n                || in_bool\n                    && node instanceof AST_Constant\n                    && node.getValue()\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && !node.expression.getValue());\n        }\n        // AST_False or !1\n        function is_false(node) {\n            return node instanceof AST_False\n                || in_bool\n                    && node instanceof AST_Constant\n                    && !node.getValue()\n                || (node instanceof AST_UnaryPrefix\n                    && node.operator == \"!\"\n                    && node.expression instanceof AST_Constant\n                    && node.expression.getValue());\n        }\n\n        function single_arg_diff() {\n            var a = consequent.args;\n            var b = alternative.args;\n            for (var i = 0, len = a.length; i < len; i++) {\n                if (a[i] instanceof AST_Expansion) return;\n                if (!a[i].equivalent_to(b[i])) {\n                    if (b[i] instanceof AST_Expansion) return;\n                    for (var j = i + 1; j < len; j++) {\n                        if (a[j] instanceof AST_Expansion) return;\n                        if (!a[j].equivalent_to(b[j])) return;\n                    }\n                    return i;\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_Boolean, function(self, compressor) {\n        if (compressor.in_boolean_context()) return make_node(AST_Number, self, {\n            value: +self.value\n        });\n        var p = compressor.parent();\n        if (compressor.option(\"booleans_as_integers\")) {\n            if (p instanceof AST_Binary && (p.operator == \"===\" || p.operator == \"!==\")) {\n                p.operator = p.operator.replace(/=$/, \"\");\n            }\n            return make_node(AST_Number, self, {\n                value: +self.value\n            });\n        }\n        if (compressor.option(\"booleans\")) {\n            if (p instanceof AST_Binary && (p.operator == \"==\"\n                                            || p.operator == \"!=\")) {\n                compressor.warn(\"Non-strict equality against boolean: {operator} {value} [{file}:{line},{col}]\", {\n                    operator : p.operator,\n                    value    : self.value,\n                    file     : p.start.file,\n                    line     : p.start.line,\n                    col      : p.start.col,\n                });\n                return make_node(AST_Number, self, {\n                    value: +self.value\n                });\n            }\n            return make_node(AST_UnaryPrefix, self, {\n                operator: \"!\",\n                expression: make_node(AST_Number, self, {\n                    value: 1 - self.value\n                })\n            });\n        }\n        return self;\n    });\n\n    function safe_to_flatten(value, compressor) {\n        if (value instanceof AST_SymbolRef) {\n            value = value.fixed_value();\n        }\n        if (!value) return false;\n        return !(value instanceof AST_Lambda || value instanceof AST_Class)\n            || compressor.parent() instanceof AST_New\n            || !value.contains_this();\n    }\n\n    def_optimize(AST_Sub, function(self, compressor) {\n        var expr = self.expression;\n        var prop = self.property;\n        if (compressor.option(\"properties\")) {\n            var key = prop.evaluate(compressor);\n            if (key !== prop) {\n                if (typeof key == \"string\") {\n                    if (key == \"undefined\") {\n                        key = undefined;\n                    } else {\n                        var value = parseFloat(key);\n                        if (value.toString() == key) {\n                            key = value;\n                        }\n                    }\n                }\n                prop = self.property = best_of_expression(prop, make_node_from_constant(key, prop).transform(compressor));\n                var property = \"\" + key;\n                if (is_identifier_string(property)\n                    && property.length <= prop.print_to_string().length + 1) {\n                    return make_node(AST_Dot, self, {\n                        expression: expr,\n                        property: property,\n                        quote: prop.quote,\n                    }).optimize(compressor);\n                }\n            }\n        }\n        var fn;\n        OPT_ARGUMENTS: if (compressor.option(\"arguments\")\n            && expr instanceof AST_SymbolRef\n            && expr.name == \"arguments\"\n            && expr.definition().orig.length == 1\n            && (fn = expr.scope) instanceof AST_Lambda\n            && fn.uses_arguments\n            && !(fn instanceof AST_Arrow)\n            && prop instanceof AST_Number) {\n            var index = prop.getValue();\n            var params = new Set();\n            var argnames = fn.argnames;\n            for (var n = 0; n < argnames.length; n++) {\n                if (!(argnames[n] instanceof AST_SymbolFunarg)) {\n                    break OPT_ARGUMENTS; // destructuring parameter - bail\n                }\n                var param = argnames[n].name;\n                if (params.has(param)) {\n                    break OPT_ARGUMENTS; // duplicate parameter - bail\n                }\n                params.add(param);\n            }\n            var argname = fn.argnames[index];\n            if (argname && compressor.has_directive(\"use strict\")) {\n                var def = argname.definition();\n                if (!compressor.option(\"reduce_vars\") || def.assignments || def.orig.length > 1) {\n                    argname = null;\n                }\n            } else if (!argname && !compressor.option(\"keep_fargs\") && index < fn.argnames.length + 5) {\n                while (index >= fn.argnames.length) {\n                    argname = make_node(AST_SymbolFunarg, fn, {\n                        name: fn.make_var_name(\"argument_\" + fn.argnames.length),\n                        scope: fn\n                    });\n                    fn.argnames.push(argname);\n                    fn.enclosed.push(fn.def_variable(argname));\n                }\n            }\n            if (argname) {\n                var sym = make_node(AST_SymbolRef, self, argname);\n                sym.reference({});\n                delete argname.__unused;\n                return sym;\n            }\n        }\n        if (is_lhs(self, compressor.parent())) return self;\n        if (key !== prop) {\n            var sub = self.flatten_object(property, compressor);\n            if (sub) {\n                expr = self.expression = sub.expression;\n                prop = self.property = sub.property;\n            }\n        }\n        if (compressor.option(\"properties\") && compressor.option(\"side_effects\")\n            && prop instanceof AST_Number && expr instanceof AST_Array) {\n            var index = prop.getValue();\n            var elements = expr.elements;\n            var retValue = elements[index];\n            FLATTEN: if (safe_to_flatten(retValue, compressor)) {\n                var flatten = true;\n                var values = [];\n                for (var i = elements.length; --i > index;) {\n                    var value = elements[i].drop_side_effect_free(compressor);\n                    if (value) {\n                        values.unshift(value);\n                        if (flatten && value.has_side_effects(compressor)) flatten = false;\n                    }\n                }\n                if (retValue instanceof AST_Expansion) break FLATTEN;\n                retValue = retValue instanceof AST_Hole ? make_node(AST_Undefined, retValue) : retValue;\n                if (!flatten) values.unshift(retValue);\n                while (--i >= 0) {\n                    var value = elements[i];\n                    if (value instanceof AST_Expansion) break FLATTEN;\n                    value = value.drop_side_effect_free(compressor);\n                    if (value) values.unshift(value);\n                    else index--;\n                }\n                if (flatten) {\n                    values.push(retValue);\n                    return make_sequence(self, values).optimize(compressor);\n                } else return make_node(AST_Sub, self, {\n                    expression: make_node(AST_Array, expr, {\n                        elements: values\n                    }),\n                    property: make_node(AST_Number, prop, {\n                        value: index\n                    })\n                });\n            }\n        }\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    AST_Lambda.DEFMETHOD(\"contains_this\", function() {\n        var result;\n        var self = this;\n        self.walk(new TreeWalker(function(node) {\n            if (result) return true;\n            if (node instanceof AST_This) return result = true;\n            if (node !== self && node instanceof AST_Scope && !(node instanceof AST_Arrow)) return true;\n        }));\n        return result;\n    });\n\n    AST_PropAccess.DEFMETHOD(\"flatten_object\", function(key, compressor) {\n        if (!compressor.option(\"properties\")) return;\n        var arrows = compressor.option(\"unsafe_arrows\") && compressor.option(\"ecma\") >= 6;\n        var expr = this.expression;\n        if (expr instanceof AST_Object) {\n            var props = expr.properties;\n            for (var i = props.length; --i >= 0;) {\n                var prop = props[i];\n                if (\"\" + (prop instanceof AST_ConciseMethod ? prop.key.name : prop.key) == key) {\n                    if (!all(props, function(prop) {\n                        return prop instanceof AST_ObjectKeyVal\n                            || arrows && prop instanceof AST_ConciseMethod && !prop.is_generator;\n                    })) break;\n                    if (!safe_to_flatten(prop.value, compressor)) break;\n                    return make_node(AST_Sub, this, {\n                        expression: make_node(AST_Array, expr, {\n                            elements: props.map(function(prop) {\n                                var v = prop.value;\n                                if (v instanceof AST_Accessor) v = make_node(AST_Function, v, v);\n                                var k = prop.key;\n                                if (k instanceof AST_Node && !(k instanceof AST_SymbolMethod)) {\n                                    return make_sequence(prop, [ k, v ]);\n                                }\n                                return v;\n                            })\n                        }),\n                        property: make_node(AST_Number, this, {\n                            value: i\n                        })\n                    });\n                }\n            }\n        }\n    });\n\n    def_optimize(AST_Dot, function(self, compressor) {\n        if (self.property == \"arguments\" || self.property == \"caller\") {\n            compressor.warn(\"Function.prototype.{prop} not supported [{file}:{line},{col}]\", {\n                prop: self.property,\n                file: self.start.file,\n                line: self.start.line,\n                col: self.start.col\n            });\n        }\n        if (is_lhs(self, compressor.parent())) return self;\n        if (compressor.option(\"unsafe_proto\")\n            && self.expression instanceof AST_Dot\n            && self.expression.property == \"prototype\") {\n            var exp = self.expression.expression;\n            if (is_undeclared_ref(exp)) switch (exp.name) {\n              case \"Array\":\n                self.expression = make_node(AST_Array, self.expression, {\n                    elements: []\n                });\n                break;\n              case \"Function\":\n                self.expression = make_node(AST_Function, self.expression, {\n                    argnames: [],\n                    body: []\n                });\n                break;\n              case \"Number\":\n                self.expression = make_node(AST_Number, self.expression, {\n                    value: 0\n                });\n                break;\n              case \"Object\":\n                self.expression = make_node(AST_Object, self.expression, {\n                    properties: []\n                });\n                break;\n              case \"RegExp\":\n                self.expression = make_node(AST_RegExp, self.expression, {\n                    value: /t/\n                });\n                break;\n              case \"String\":\n                self.expression = make_node(AST_String, self.expression, {\n                    value: \"\"\n                });\n                break;\n            }\n        }\n        var sub = self.flatten_object(self.property, compressor);\n        if (sub) return sub.optimize(compressor);\n        var ev = self.evaluate(compressor);\n        if (ev !== self) {\n            ev = make_node_from_constant(ev, self).optimize(compressor);\n            return best_of(compressor, ev, self);\n        }\n        return self;\n    });\n\n    function literals_in_boolean_context(self, compressor) {\n        if (compressor.in_boolean_context()) {\n            return best_of(compressor, self, make_sequence(self, [\n                self,\n                make_node(AST_True, self)\n            ]).optimize(compressor));\n        }\n        return self;\n    }\n\n    function inline_array_like_spread(self, compressor, elements) {\n        for (var i = 0; i < elements.length; i++) {\n            var el = elements[i];\n            if (el instanceof AST_Expansion) {\n                var expr = el.expression;\n                if ( expr instanceof AST_Array) {\n                    elements.splice.apply(elements, [i, 1].concat(expr.elements));\n                    // Step back one, as the element at i is now new.\n                    i--;\n                }\n                // In array-like spread, spreading a non-iterable value is TypeError.\n                // We therefore can’t optimize anything else, unlike with object spread.\n            }\n        }\n        return self;\n    }\n\n    def_optimize(AST_Array, function(self, compressor) {\n        var optimized = literals_in_boolean_context(self, compressor);\n        if (optimized !== self) {\n            return optimized;\n        }\n        return inline_array_like_spread(self, compressor, self.elements);\n    });\n\n    def_optimize(AST_Object, function(self, compressor) {\n        var optimized = literals_in_boolean_context(self, compressor);\n        if (optimized !== self) {\n            return optimized;\n        }\n        var props = self.properties;\n        for (var i = 0; i < props.length; i++) {\n            var prop = props[i];\n            if (prop instanceof AST_Expansion) {\n                var expr = prop.expression;\n                if (expr instanceof AST_Object) {\n                    props.splice.apply(props, [i, 1].concat(prop.expression.properties));\n                    // Step back one, as the property at i is now new.\n                    i--;\n                } else if (expr instanceof AST_Constant\n                    && !(expr instanceof AST_String)) {\n                    // Unlike array-like spread, in object spread, spreading a\n                    // non-iterable value silently does nothing; it is thus safe\n                    // to remove. AST_String is the only iterable AST_Constant.\n                    props.splice(i, 1);\n                }\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_RegExp, literals_in_boolean_context);\n\n    def_optimize(AST_Return, function(self, compressor) {\n        if (self.value && is_undefined(self.value, compressor)) {\n            self.value = null;\n        }\n        return self;\n    });\n\n    def_optimize(AST_Arrow, function(self, compressor) {\n        if (!(self.body instanceof AST_Node)) {\n            self = opt_AST_Lambda(self, compressor);\n        }\n        if (compressor.option(\"arrows\")\n            && self.body.length == 1\n            && self.body[0] instanceof AST_Return) {\n            var value = self.body[0].value;\n            self.body = value ? value : [];\n        }\n        return self;\n    });\n\n    def_optimize(AST_Function, function(self, compressor) {\n        self = opt_AST_Lambda(self, compressor);\n        if (compressor.option(\"unsafe_arrows\")\n            && compressor.option(\"ecma\") >= 6\n            && !self.name\n            && !self.is_generator\n            && !self.uses_arguments\n            && !self.pinned()) {\n            var has_special_symbol = false;\n            self.walk(new TreeWalker(function(node) {\n                if (has_special_symbol) return true;\n                if (node instanceof AST_This) {\n                    has_special_symbol = true;\n                    return true;\n                }\n            }));\n            if (!has_special_symbol) return make_node(AST_Arrow, self, self).optimize(compressor);\n        }\n        return self;\n    });\n\n    def_optimize(AST_Class, function(self, compressor) {\n        // HACK to avoid compress failure.\n        // AST_Class is not really an AST_Scope/AST_Block as it lacks a body.\n        return self;\n    });\n\n    def_optimize(AST_Yield, function(self, compressor) {\n        if (self.expression && !self.is_star && is_undefined(self.expression, compressor)) {\n            self.expression = null;\n        }\n        return self;\n    });\n\n    def_optimize(AST_TemplateString, function(self, compressor) {\n        if (!compressor.option(\"evaluate\")\n        || compressor.parent() instanceof AST_PrefixedTemplateString)\n            return self;\n\n        var segments = [];\n        for (var i = 0; i < self.segments.length; i++) {\n            var segment = self.segments[i];\n            if (segment instanceof AST_Node) {\n                var result = segment.evaluate(compressor);\n                // Evaluate to constant value\n                // Constant value shorter than ${segment}\n                if (result !== segment && (result + \"\").length <= segment.print_to_string().length + \"${}\".length) {\n                    // There should always be a previous and next segment if segment is a node\n                    segments[segments.length - 1].value = segments[segments.length - 1].value + result + self.segments[++i].value;\n                    continue;\n                }\n            }\n            segments.push(segment);\n        }\n        self.segments = segments;\n\n        return segments.length == 1 ? make_node(AST_String, self, segments[0]) : self;\n    });\n\n    def_optimize(AST_PrefixedTemplateString, function(self, compressor) {\n        return self;\n    });\n\n    // [\"p\"]:1 ---> p:1\n    // [42]:1 ---> 42:1\n    function lift_key(self, compressor) {\n        if (!compressor.option(\"computed_props\")) return self;\n        // save a comparison in the typical case\n        if (!(self.key instanceof AST_Constant)) return self;\n        // whitelist acceptable props as not all AST_Constants are true constants\n        if (self.key instanceof AST_String || self.key instanceof AST_Number) {\n            if (self.key.value === \"__proto__\") return self;\n            if (self.key.value == \"constructor\"\n                && compressor.parent() instanceof AST_Class) return self;\n            if (self instanceof AST_ObjectKeyVal) {\n                self.key = self.key.value;\n            } else {\n                self.key = make_node(AST_SymbolMethod, self.key, {\n                    name: self.key.value\n                });\n            }\n        }\n        return self;\n    }\n\n    def_optimize(AST_ObjectProperty, lift_key);\n\n    def_optimize(AST_ConciseMethod, function(self, compressor) {\n        lift_key(self, compressor);\n        // p(){return x;} ---> p:()=>x\n        if (compressor.option(\"arrows\")\n            && compressor.parent() instanceof AST_Object\n            && !self.is_generator\n            && !self.value.uses_arguments\n            && !self.value.pinned()\n            && self.value.body.length == 1\n            && self.value.body[0] instanceof AST_Return\n            && self.value.body[0].value\n            && !self.value.contains_this()) {\n            var arrow = make_node(AST_Arrow, self.value, self.value);\n            arrow.async = self.async;\n            arrow.is_generator = self.is_generator;\n            return make_node(AST_ObjectKeyVal, self, {\n                key: self.key instanceof AST_SymbolMethod ? self.key.name : self.key,\n                value: arrow,\n                quote: self.quote,\n            });\n        }\n        return self;\n    });\n\n    def_optimize(AST_ObjectKeyVal, function(self, compressor) {\n        lift_key(self, compressor);\n        // p:function(){} ---> p(){}\n        // p:function*(){} ---> *p(){}\n        // p:async function(){} ---> async p(){}\n        // p:()=>{} ---> p(){}\n        // p:async()=>{} ---> async p(){}\n        var unsafe_methods = compressor.option(\"unsafe_methods\");\n        if (unsafe_methods\n            && compressor.option(\"ecma\") >= 6\n            && (!(unsafe_methods instanceof RegExp) || unsafe_methods.test(self.key + \"\"))) {\n            var key = self.key;\n            var value = self.value;\n            var is_arrow_with_block = value instanceof AST_Arrow\n                && Array.isArray(value.body)\n                && !value.contains_this();\n            if ((is_arrow_with_block || value instanceof AST_Function) && !value.name) {\n                return make_node(AST_ConciseMethod, self, {\n                    async: value.async,\n                    is_generator: value.is_generator,\n                    key: key instanceof AST_Node ? key : make_node(AST_SymbolMethod, self, {\n                        name: key,\n                    }),\n                    value: make_node(AST_Accessor, value, value),\n                    quote: self.quote,\n                });\n            }\n        }\n        return self;\n    });\n\n    def_optimize(AST_Destructuring, function(self, compressor) {\n        if (compressor.option(\"pure_getters\") == true\n            && compressor.option(\"unused\")\n            && !self.is_array\n            && Array.isArray(self.names)\n            && !is_destructuring_export_decl(compressor)) {\n            var keep = [];\n            for (var i = 0; i < self.names.length; i++) {\n                var elem = self.names[i];\n                if (!(elem instanceof AST_ObjectKeyVal\n                    && typeof elem.key == \"string\"\n                    && elem.value instanceof AST_SymbolDeclaration\n                    && !should_retain(compressor, elem.value.definition()))) {\n                    keep.push(elem);\n                }\n            }\n            if (keep.length != self.names.length) {\n                self.names = keep;\n            }\n        }\n        return self;\n\n        function is_destructuring_export_decl(compressor) {\n            var ancestors = [/^VarDef$/, /^(Const|Let|Var)$/, /^Export$/];\n            for (var a = 0, p = 0, len = ancestors.length; a < len; p++) {\n                var parent = compressor.parent(p);\n                if (!parent) return false;\n                if (a === 0 && parent.TYPE == \"Destructuring\") continue;\n                if (!ancestors[a].test(parent.TYPE)) {\n                    return false;\n                }\n                a++;\n            }\n            return true;\n        }\n\n        function should_retain(compressor, def) {\n            if (def.references.length) return true;\n            if (!def.global) return false;\n            if (compressor.toplevel.vars) {\n                 if (compressor.top_retain) {\n                     return compressor.top_retain(def);\n                 }\n                 return false;\n            }\n            return true;\n        }\n    });\n})();\n\nexport {\n    Compressor,\n};\n","export var domprops = [\n    \"$&\",\n    \"$'\",\n    \"$*\",\n    \"$+\",\n    \"$1\",\n    \"$2\",\n    \"$3\",\n    \"$4\",\n    \"$5\",\n    \"$6\",\n    \"$7\",\n    \"$8\",\n    \"$9\",\n    \"$_\",\n    \"$`\",\n    \"$input\",\n    \"@@iterator\",\n    \"ABORT_ERR\",\n    \"ACTIVE\",\n    \"ACTIVE_ATTRIBUTES\",\n    \"ACTIVE_TEXTURE\",\n    \"ACTIVE_UNIFORMS\",\n    \"ADDITION\",\n    \"ALIASED_LINE_WIDTH_RANGE\",\n    \"ALIASED_POINT_SIZE_RANGE\",\n    \"ALLOW_KEYBOARD_INPUT\",\n    \"ALLPASS\",\n    \"ALPHA\",\n    \"ALPHA_BITS\",\n    \"ALT_MASK\",\n    \"ALWAYS\",\n    \"ANY_TYPE\",\n    \"ANY_UNORDERED_NODE_TYPE\",\n    \"ARRAY_BUFFER\",\n    \"ARRAY_BUFFER_BINDING\",\n    \"ATTACHED_SHADERS\",\n    \"ATTRIBUTE_NODE\",\n    \"AT_TARGET\",\n    \"AddSearchProvider\",\n    \"AnalyserNode\",\n    \"AnimationEvent\",\n    \"AnonXMLHttpRequest\",\n    \"ApplicationCache\",\n    \"ApplicationCacheErrorEvent\",\n    \"Array\",\n    \"ArrayBuffer\",\n    \"Attr\",\n    \"Audio\",\n    \"AudioBuffer\",\n    \"AudioBufferSourceNode\",\n    \"AudioContext\",\n    \"AudioDestinationNode\",\n    \"AudioListener\",\n    \"AudioNode\",\n    \"AudioParam\",\n    \"AudioProcessingEvent\",\n    \"AudioStreamTrack\",\n    \"AutocompleteErrorEvent\",\n    \"BACK\",\n    \"BAD_BOUNDARYPOINTS_ERR\",\n    \"BANDPASS\",\n    \"BLEND\",\n    \"BLEND_COLOR\",\n    \"BLEND_DST_ALPHA\",\n    \"BLEND_DST_RGB\",\n    \"BLEND_EQUATION\",\n    \"BLEND_EQUATION_ALPHA\",\n    \"BLEND_EQUATION_RGB\",\n    \"BLEND_SRC_ALPHA\",\n    \"BLEND_SRC_RGB\",\n    \"BLUE_BITS\",\n    \"BLUR\",\n    \"BOOL\",\n    \"BOOLEAN_TYPE\",\n    \"BOOL_VEC2\",\n    \"BOOL_VEC3\",\n    \"BOOL_VEC4\",\n    \"BOTH\",\n    \"BROWSER_DEFAULT_WEBGL\",\n    \"BUBBLING_PHASE\",\n    \"BUFFER_SIZE\",\n    \"BUFFER_USAGE\",\n    \"BYTE\",\n    \"BYTES_PER_ELEMENT\",\n    \"BarProp\",\n    \"BaseHref\",\n    \"BatteryManager\",\n    \"BeforeLoadEvent\",\n    \"BeforeUnloadEvent\",\n    \"BiquadFilterNode\",\n    \"Blob\",\n    \"BlobEvent\",\n    \"Boolean\",\n    \"CAPTURING_PHASE\",\n    \"CCW\",\n    \"CDATASection\",\n    \"CDATA_SECTION_NODE\",\n    \"CHANGE\",\n    \"CHARSET_RULE\",\n    \"CHECKING\",\n    \"CLAMP_TO_EDGE\",\n    \"CLICK\",\n    \"CLOSED\",\n    \"CLOSING\",\n    \"COLOR_ATTACHMENT0\",\n    \"COLOR_BUFFER_BIT\",\n    \"COLOR_CLEAR_VALUE\",\n    \"COLOR_WRITEMASK\",\n    \"COMMENT_NODE\",\n    \"COMPILE_STATUS\",\n    \"COMPRESSED_RGBA_S3TC_DXT1_EXT\",\n    \"COMPRESSED_RGBA_S3TC_DXT3_EXT\",\n    \"COMPRESSED_RGBA_S3TC_DXT5_EXT\",\n    \"COMPRESSED_RGB_S3TC_DXT1_EXT\",\n    \"COMPRESSED_TEXTURE_FORMATS\",\n    \"CONNECTING\",\n    \"CONSTANT_ALPHA\",\n    \"CONSTANT_COLOR\",\n    \"CONSTRAINT_ERR\",\n    \"CONTEXT_LOST_WEBGL\",\n    \"CONTROL_MASK\",\n    \"COUNTER_STYLE_RULE\",\n    \"CSS\",\n    \"CSS2Properties\",\n    \"CSSCharsetRule\",\n    \"CSSConditionRule\",\n    \"CSSCounterStyleRule\",\n    \"CSSFontFaceRule\",\n    \"CSSFontFeatureValuesRule\",\n    \"CSSGroupingRule\",\n    \"CSSImportRule\",\n    \"CSSKeyframeRule\",\n    \"CSSKeyframesRule\",\n    \"CSSMediaRule\",\n    \"CSSMozDocumentRule\",\n    \"CSSNameSpaceRule\",\n    \"CSSPageRule\",\n    \"CSSPrimitiveValue\",\n    \"CSSRule\",\n    \"CSSRuleList\",\n    \"CSSStyleDeclaration\",\n    \"CSSStyleRule\",\n    \"CSSStyleSheet\",\n    \"CSSSupportsRule\",\n    \"CSSUnknownRule\",\n    \"CSSValue\",\n    \"CSSValueList\",\n    \"CSSVariablesDeclaration\",\n    \"CSSVariablesRule\",\n    \"CSSViewportRule\",\n    \"CSS_ATTR\",\n    \"CSS_CM\",\n    \"CSS_COUNTER\",\n    \"CSS_CUSTOM\",\n    \"CSS_DEG\",\n    \"CSS_DIMENSION\",\n    \"CSS_EMS\",\n    \"CSS_EXS\",\n    \"CSS_FILTER_BLUR\",\n    \"CSS_FILTER_BRIGHTNESS\",\n    \"CSS_FILTER_CONTRAST\",\n    \"CSS_FILTER_CUSTOM\",\n    \"CSS_FILTER_DROP_SHADOW\",\n    \"CSS_FILTER_GRAYSCALE\",\n    \"CSS_FILTER_HUE_ROTATE\",\n    \"CSS_FILTER_INVERT\",\n    \"CSS_FILTER_OPACITY\",\n    \"CSS_FILTER_REFERENCE\",\n    \"CSS_FILTER_SATURATE\",\n    \"CSS_FILTER_SEPIA\",\n    \"CSS_GRAD\",\n    \"CSS_HZ\",\n    \"CSS_IDENT\",\n    \"CSS_IN\",\n    \"CSS_INHERIT\",\n    \"CSS_KHZ\",\n    \"CSS_MATRIX\",\n    \"CSS_MATRIX3D\",\n    \"CSS_MM\",\n    \"CSS_MS\",\n    \"CSS_NUMBER\",\n    \"CSS_PC\",\n    \"CSS_PERCENTAGE\",\n    \"CSS_PERSPECTIVE\",\n    \"CSS_PRIMITIVE_VALUE\",\n    \"CSS_PT\",\n    \"CSS_PX\",\n    \"CSS_RAD\",\n    \"CSS_RECT\",\n    \"CSS_RGBCOLOR\",\n    \"CSS_ROTATE\",\n    \"CSS_ROTATE3D\",\n    \"CSS_ROTATEX\",\n    \"CSS_ROTATEY\",\n    \"CSS_ROTATEZ\",\n    \"CSS_S\",\n    \"CSS_SCALE\",\n    \"CSS_SCALE3D\",\n    \"CSS_SCALEX\",\n    \"CSS_SCALEY\",\n    \"CSS_SCALEZ\",\n    \"CSS_SKEW\",\n    \"CSS_SKEWX\",\n    \"CSS_SKEWY\",\n    \"CSS_STRING\",\n    \"CSS_TRANSLATE\",\n    \"CSS_TRANSLATE3D\",\n    \"CSS_TRANSLATEX\",\n    \"CSS_TRANSLATEY\",\n    \"CSS_TRANSLATEZ\",\n    \"CSS_UNKNOWN\",\n    \"CSS_URI\",\n    \"CSS_VALUE_LIST\",\n    \"CSS_VH\",\n    \"CSS_VMAX\",\n    \"CSS_VMIN\",\n    \"CSS_VW\",\n    \"CULL_FACE\",\n    \"CULL_FACE_MODE\",\n    \"CURRENT_PROGRAM\",\n    \"CURRENT_VERTEX_ATTRIB\",\n    \"CUSTOM\",\n    \"CW\",\n    \"CanvasGradient\",\n    \"CanvasPattern\",\n    \"CanvasRenderingContext2D\",\n    \"CaretPosition\",\n    \"ChannelMergerNode\",\n    \"ChannelSplitterNode\",\n    \"CharacterData\",\n    \"ClientRect\",\n    \"ClientRectList\",\n    \"Clipboard\",\n    \"ClipboardEvent\",\n    \"CloseEvent\",\n    \"Collator\",\n    \"CommandEvent\",\n    \"Comment\",\n    \"CompositionEvent\",\n    \"Console\",\n    \"Controllers\",\n    \"ConvolverNode\",\n    \"Counter\",\n    \"Crypto\",\n    \"CryptoKey\",\n    \"CustomEvent\",\n    \"DATABASE_ERR\",\n    \"DATA_CLONE_ERR\",\n    \"DATA_ERR\",\n    \"DBLCLICK\",\n    \"DECR\",\n    \"DECR_WRAP\",\n    \"DELETE_STATUS\",\n    \"DEPTH_ATTACHMENT\",\n    \"DEPTH_BITS\",\n    \"DEPTH_BUFFER_BIT\",\n    \"DEPTH_CLEAR_VALUE\",\n    \"DEPTH_COMPONENT\",\n    \"DEPTH_COMPONENT16\",\n    \"DEPTH_FUNC\",\n    \"DEPTH_RANGE\",\n    \"DEPTH_STENCIL\",\n    \"DEPTH_STENCIL_ATTACHMENT\",\n    \"DEPTH_TEST\",\n    \"DEPTH_WRITEMASK\",\n    \"DIRECTION_DOWN\",\n    \"DIRECTION_LEFT\",\n    \"DIRECTION_RIGHT\",\n    \"DIRECTION_UP\",\n    \"DISABLED\",\n    \"DISPATCH_REQUEST_ERR\",\n    \"DITHER\",\n    \"DOCUMENT_FRAGMENT_NODE\",\n    \"DOCUMENT_NODE\",\n    \"DOCUMENT_POSITION_CONTAINED_BY\",\n    \"DOCUMENT_POSITION_CONTAINS\",\n    \"DOCUMENT_POSITION_DISCONNECTED\",\n    \"DOCUMENT_POSITION_FOLLOWING\",\n    \"DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC\",\n    \"DOCUMENT_POSITION_PRECEDING\",\n    \"DOCUMENT_TYPE_NODE\",\n    \"DOMCursor\",\n    \"DOMError\",\n    \"DOMException\",\n    \"DOMImplementation\",\n    \"DOMImplementationLS\",\n    \"DOMMatrix\",\n    \"DOMMatrixReadOnly\",\n    \"DOMParser\",\n    \"DOMPoint\",\n    \"DOMPointReadOnly\",\n    \"DOMQuad\",\n    \"DOMRect\",\n    \"DOMRectList\",\n    \"DOMRectReadOnly\",\n    \"DOMRequest\",\n    \"DOMSTRING_SIZE_ERR\",\n    \"DOMSettableTokenList\",\n    \"DOMStringList\",\n    \"DOMStringMap\",\n    \"DOMTokenList\",\n    \"DOMTransactionEvent\",\n    \"DOM_DELTA_LINE\",\n    \"DOM_DELTA_PAGE\",\n    \"DOM_DELTA_PIXEL\",\n    \"DOM_INPUT_METHOD_DROP\",\n    \"DOM_INPUT_METHOD_HANDWRITING\",\n    \"DOM_INPUT_METHOD_IME\",\n    \"DOM_INPUT_METHOD_KEYBOARD\",\n    \"DOM_INPUT_METHOD_MULTIMODAL\",\n    \"DOM_INPUT_METHOD_OPTION\",\n    \"DOM_INPUT_METHOD_PASTE\",\n    \"DOM_INPUT_METHOD_SCRIPT\",\n    \"DOM_INPUT_METHOD_UNKNOWN\",\n    \"DOM_INPUT_METHOD_VOICE\",\n    \"DOM_KEY_LOCATION_JOYSTICK\",\n    \"DOM_KEY_LOCATION_LEFT\",\n    \"DOM_KEY_LOCATION_MOBILE\",\n    \"DOM_KEY_LOCATION_NUMPAD\",\n    \"DOM_KEY_LOCATION_RIGHT\",\n    \"DOM_KEY_LOCATION_STANDARD\",\n    \"DOM_VK_0\",\n    \"DOM_VK_1\",\n    \"DOM_VK_2\",\n    \"DOM_VK_3\",\n    \"DOM_VK_4\",\n    \"DOM_VK_5\",\n    \"DOM_VK_6\",\n    \"DOM_VK_7\",\n    \"DOM_VK_8\",\n    \"DOM_VK_9\",\n    \"DOM_VK_A\",\n    \"DOM_VK_ACCEPT\",\n    \"DOM_VK_ADD\",\n    \"DOM_VK_ALT\",\n    \"DOM_VK_ALTGR\",\n    \"DOM_VK_AMPERSAND\",\n    \"DOM_VK_ASTERISK\",\n    \"DOM_VK_AT\",\n    \"DOM_VK_ATTN\",\n    \"DOM_VK_B\",\n    \"DOM_VK_BACKSPACE\",\n    \"DOM_VK_BACK_QUOTE\",\n    \"DOM_VK_BACK_SLASH\",\n    \"DOM_VK_BACK_SPACE\",\n    \"DOM_VK_C\",\n    \"DOM_VK_CANCEL\",\n    \"DOM_VK_CAPS_LOCK\",\n    \"DOM_VK_CIRCUMFLEX\",\n    \"DOM_VK_CLEAR\",\n    \"DOM_VK_CLOSE_BRACKET\",\n    \"DOM_VK_CLOSE_CURLY_BRACKET\",\n    \"DOM_VK_CLOSE_PAREN\",\n    \"DOM_VK_COLON\",\n    \"DOM_VK_COMMA\",\n    \"DOM_VK_CONTEXT_MENU\",\n    \"DOM_VK_CONTROL\",\n    \"DOM_VK_CONVERT\",\n    \"DOM_VK_CRSEL\",\n    \"DOM_VK_CTRL\",\n    \"DOM_VK_D\",\n    \"DOM_VK_DECIMAL\",\n    \"DOM_VK_DELETE\",\n    \"DOM_VK_DIVIDE\",\n    \"DOM_VK_DOLLAR\",\n    \"DOM_VK_DOUBLE_QUOTE\",\n    \"DOM_VK_DOWN\",\n    \"DOM_VK_E\",\n    \"DOM_VK_EISU\",\n    \"DOM_VK_END\",\n    \"DOM_VK_ENTER\",\n    \"DOM_VK_EQUALS\",\n    \"DOM_VK_EREOF\",\n    \"DOM_VK_ESCAPE\",\n    \"DOM_VK_EXCLAMATION\",\n    \"DOM_VK_EXECUTE\",\n    \"DOM_VK_EXSEL\",\n    \"DOM_VK_F\",\n    \"DOM_VK_F1\",\n    \"DOM_VK_F10\",\n    \"DOM_VK_F11\",\n    \"DOM_VK_F12\",\n    \"DOM_VK_F13\",\n    \"DOM_VK_F14\",\n    \"DOM_VK_F15\",\n    \"DOM_VK_F16\",\n    \"DOM_VK_F17\",\n    \"DOM_VK_F18\",\n    \"DOM_VK_F19\",\n    \"DOM_VK_F2\",\n    \"DOM_VK_F20\",\n    \"DOM_VK_F21\",\n    \"DOM_VK_F22\",\n    \"DOM_VK_F23\",\n    \"DOM_VK_F24\",\n    \"DOM_VK_F25\",\n    \"DOM_VK_F26\",\n    \"DOM_VK_F27\",\n    \"DOM_VK_F28\",\n    \"DOM_VK_F29\",\n    \"DOM_VK_F3\",\n    \"DOM_VK_F30\",\n    \"DOM_VK_F31\",\n    \"DOM_VK_F32\",\n    \"DOM_VK_F33\",\n    \"DOM_VK_F34\",\n    \"DOM_VK_F35\",\n    \"DOM_VK_F36\",\n    \"DOM_VK_F4\",\n    \"DOM_VK_F5\",\n    \"DOM_VK_F6\",\n    \"DOM_VK_F7\",\n    \"DOM_VK_F8\",\n    \"DOM_VK_F9\",\n    \"DOM_VK_FINAL\",\n    \"DOM_VK_FRONT\",\n    \"DOM_VK_G\",\n    \"DOM_VK_GREATER_THAN\",\n    \"DOM_VK_H\",\n    \"DOM_VK_HANGUL\",\n    \"DOM_VK_HANJA\",\n    \"DOM_VK_HASH\",\n    \"DOM_VK_HELP\",\n    \"DOM_VK_HK_TOGGLE\",\n    \"DOM_VK_HOME\",\n    \"DOM_VK_HYPHEN_MINUS\",\n    \"DOM_VK_I\",\n    \"DOM_VK_INSERT\",\n    \"DOM_VK_J\",\n    \"DOM_VK_JUNJA\",\n    \"DOM_VK_K\",\n    \"DOM_VK_KANA\",\n    \"DOM_VK_KANJI\",\n    \"DOM_VK_L\",\n    \"DOM_VK_LEFT\",\n    \"DOM_VK_LEFT_TAB\",\n    \"DOM_VK_LESS_THAN\",\n    \"DOM_VK_M\",\n    \"DOM_VK_META\",\n    \"DOM_VK_MODECHANGE\",\n    \"DOM_VK_MULTIPLY\",\n    \"DOM_VK_N\",\n    \"DOM_VK_NONCONVERT\",\n    \"DOM_VK_NUMPAD0\",\n    \"DOM_VK_NUMPAD1\",\n    \"DOM_VK_NUMPAD2\",\n    \"DOM_VK_NUMPAD3\",\n    \"DOM_VK_NUMPAD4\",\n    \"DOM_VK_NUMPAD5\",\n    \"DOM_VK_NUMPAD6\",\n    \"DOM_VK_NUMPAD7\",\n    \"DOM_VK_NUMPAD8\",\n    \"DOM_VK_NUMPAD9\",\n    \"DOM_VK_NUM_LOCK\",\n    \"DOM_VK_O\",\n    \"DOM_VK_OEM_1\",\n    \"DOM_VK_OEM_102\",\n    \"DOM_VK_OEM_2\",\n    \"DOM_VK_OEM_3\",\n    \"DOM_VK_OEM_4\",\n    \"DOM_VK_OEM_5\",\n    \"DOM_VK_OEM_6\",\n    \"DOM_VK_OEM_7\",\n    \"DOM_VK_OEM_8\",\n    \"DOM_VK_OEM_COMMA\",\n    \"DOM_VK_OEM_MINUS\",\n    \"DOM_VK_OEM_PERIOD\",\n    \"DOM_VK_OEM_PLUS\",\n    \"DOM_VK_OPEN_BRACKET\",\n    \"DOM_VK_OPEN_CURLY_BRACKET\",\n    \"DOM_VK_OPEN_PAREN\",\n    \"DOM_VK_P\",\n    \"DOM_VK_PA1\",\n    \"DOM_VK_PAGEDOWN\",\n    \"DOM_VK_PAGEUP\",\n    \"DOM_VK_PAGE_DOWN\",\n    \"DOM_VK_PAGE_UP\",\n    \"DOM_VK_PAUSE\",\n    \"DOM_VK_PERCENT\",\n    \"DOM_VK_PERIOD\",\n    \"DOM_VK_PIPE\",\n    \"DOM_VK_PLAY\",\n    \"DOM_VK_PLUS\",\n    \"DOM_VK_PRINT\",\n    \"DOM_VK_PRINTSCREEN\",\n    \"DOM_VK_PROCESSKEY\",\n    \"DOM_VK_PROPERITES\",\n    \"DOM_VK_Q\",\n    \"DOM_VK_QUESTION_MARK\",\n    \"DOM_VK_QUOTE\",\n    \"DOM_VK_R\",\n    \"DOM_VK_REDO\",\n    \"DOM_VK_RETURN\",\n    \"DOM_VK_RIGHT\",\n    \"DOM_VK_S\",\n    \"DOM_VK_SCROLL_LOCK\",\n    \"DOM_VK_SELECT\",\n    \"DOM_VK_SEMICOLON\",\n    \"DOM_VK_SEPARATOR\",\n    \"DOM_VK_SHIFT\",\n    \"DOM_VK_SLASH\",\n    \"DOM_VK_SLEEP\",\n    \"DOM_VK_SPACE\",\n    \"DOM_VK_SUBTRACT\",\n    \"DOM_VK_T\",\n    \"DOM_VK_TAB\",\n    \"DOM_VK_TILDE\",\n    \"DOM_VK_U\",\n    \"DOM_VK_UNDERSCORE\",\n    \"DOM_VK_UNDO\",\n    \"DOM_VK_UNICODE\",\n    \"DOM_VK_UP\",\n    \"DOM_VK_V\",\n    \"DOM_VK_VOLUME_DOWN\",\n    \"DOM_VK_VOLUME_MUTE\",\n    \"DOM_VK_VOLUME_UP\",\n    \"DOM_VK_W\",\n    \"DOM_VK_WIN\",\n    \"DOM_VK_WINDOW\",\n    \"DOM_VK_WIN_ICO_00\",\n    \"DOM_VK_WIN_ICO_CLEAR\",\n    \"DOM_VK_WIN_ICO_HELP\",\n    \"DOM_VK_WIN_OEM_ATTN\",\n    \"DOM_VK_WIN_OEM_AUTO\",\n    \"DOM_VK_WIN_OEM_BACKTAB\",\n    \"DOM_VK_WIN_OEM_CLEAR\",\n    \"DOM_VK_WIN_OEM_COPY\",\n    \"DOM_VK_WIN_OEM_CUSEL\",\n    \"DOM_VK_WIN_OEM_ENLW\",\n    \"DOM_VK_WIN_OEM_FINISH\",\n    \"DOM_VK_WIN_OEM_FJ_JISHO\",\n    \"DOM_VK_WIN_OEM_FJ_LOYA\",\n    \"DOM_VK_WIN_OEM_FJ_MASSHOU\",\n    \"DOM_VK_WIN_OEM_FJ_ROYA\",\n    \"DOM_VK_WIN_OEM_FJ_TOUROKU\",\n    \"DOM_VK_WIN_OEM_JUMP\",\n    \"DOM_VK_WIN_OEM_PA1\",\n    \"DOM_VK_WIN_OEM_PA2\",\n    \"DOM_VK_WIN_OEM_PA3\",\n    \"DOM_VK_WIN_OEM_RESET\",\n    \"DOM_VK_WIN_OEM_WSCTRL\",\n    \"DOM_VK_X\",\n    \"DOM_VK_XF86XK_ADD_FAVORITE\",\n    \"DOM_VK_XF86XK_APPLICATION_LEFT\",\n    \"DOM_VK_XF86XK_APPLICATION_RIGHT\",\n    \"DOM_VK_XF86XK_AUDIO_CYCLE_TRACK\",\n    \"DOM_VK_XF86XK_AUDIO_FORWARD\",\n    \"DOM_VK_XF86XK_AUDIO_LOWER_VOLUME\",\n    \"DOM_VK_XF86XK_AUDIO_MEDIA\",\n    \"DOM_VK_XF86XK_AUDIO_MUTE\",\n    \"DOM_VK_XF86XK_AUDIO_NEXT\",\n    \"DOM_VK_XF86XK_AUDIO_PAUSE\",\n    \"DOM_VK_XF86XK_AUDIO_PLAY\",\n    \"DOM_VK_XF86XK_AUDIO_PREV\",\n    \"DOM_VK_XF86XK_AUDIO_RAISE_VOLUME\",\n    \"DOM_VK_XF86XK_AUDIO_RANDOM_PLAY\",\n    \"DOM_VK_XF86XK_AUDIO_RECORD\",\n    \"DOM_VK_XF86XK_AUDIO_REPEAT\",\n    \"DOM_VK_XF86XK_AUDIO_REWIND\",\n    \"DOM_VK_XF86XK_AUDIO_STOP\",\n    \"DOM_VK_XF86XK_AWAY\",\n    \"DOM_VK_XF86XK_BACK\",\n    \"DOM_VK_XF86XK_BACK_FORWARD\",\n    \"DOM_VK_XF86XK_BATTERY\",\n    \"DOM_VK_XF86XK_BLUE\",\n    \"DOM_VK_XF86XK_BLUETOOTH\",\n    \"DOM_VK_XF86XK_BOOK\",\n    \"DOM_VK_XF86XK_BRIGHTNESS_ADJUST\",\n    \"DOM_VK_XF86XK_CALCULATOR\",\n    \"DOM_VK_XF86XK_CALENDAR\",\n    \"DOM_VK_XF86XK_CD\",\n    \"DOM_VK_XF86XK_CLOSE\",\n    \"DOM_VK_XF86XK_COMMUNITY\",\n    \"DOM_VK_XF86XK_CONTRAST_ADJUST\",\n    \"DOM_VK_XF86XK_COPY\",\n    \"DOM_VK_XF86XK_CUT\",\n    \"DOM_VK_XF86XK_CYCLE_ANGLE\",\n    \"DOM_VK_XF86XK_DISPLAY\",\n    \"DOM_VK_XF86XK_DOCUMENTS\",\n    \"DOM_VK_XF86XK_DOS\",\n    \"DOM_VK_XF86XK_EJECT\",\n    \"DOM_VK_XF86XK_EXCEL\",\n    \"DOM_VK_XF86XK_EXPLORER\",\n    \"DOM_VK_XF86XK_FAVORITES\",\n    \"DOM_VK_XF86XK_FINANCE\",\n    \"DOM_VK_XF86XK_FORWARD\",\n    \"DOM_VK_XF86XK_FRAME_BACK\",\n    \"DOM_VK_XF86XK_FRAME_FORWARD\",\n    \"DOM_VK_XF86XK_GAME\",\n    \"DOM_VK_XF86XK_GO\",\n    \"DOM_VK_XF86XK_GREEN\",\n    \"DOM_VK_XF86XK_HIBERNATE\",\n    \"DOM_VK_XF86XK_HISTORY\",\n    \"DOM_VK_XF86XK_HOME_PAGE\",\n    \"DOM_VK_XF86XK_HOT_LINKS\",\n    \"DOM_VK_XF86XK_I_TOUCH\",\n    \"DOM_VK_XF86XK_KBD_BRIGHTNESS_DOWN\",\n    \"DOM_VK_XF86XK_KBD_BRIGHTNESS_UP\",\n    \"DOM_VK_XF86XK_KBD_LIGHT_ON_OFF\",\n    \"DOM_VK_XF86XK_LAUNCH0\",\n    \"DOM_VK_XF86XK_LAUNCH1\",\n    \"DOM_VK_XF86XK_LAUNCH2\",\n    \"DOM_VK_XF86XK_LAUNCH3\",\n    \"DOM_VK_XF86XK_LAUNCH4\",\n    \"DOM_VK_XF86XK_LAUNCH5\",\n    \"DOM_VK_XF86XK_LAUNCH6\",\n    \"DOM_VK_XF86XK_LAUNCH7\",\n    \"DOM_VK_XF86XK_LAUNCH8\",\n    \"DOM_VK_XF86XK_LAUNCH9\",\n    \"DOM_VK_XF86XK_LAUNCH_A\",\n    \"DOM_VK_XF86XK_LAUNCH_B\",\n    \"DOM_VK_XF86XK_LAUNCH_C\",\n    \"DOM_VK_XF86XK_LAUNCH_D\",\n    \"DOM_VK_XF86XK_LAUNCH_E\",\n    \"DOM_VK_XF86XK_LAUNCH_F\",\n    \"DOM_VK_XF86XK_LIGHT_BULB\",\n    \"DOM_VK_XF86XK_LOG_OFF\",\n    \"DOM_VK_XF86XK_MAIL\",\n    \"DOM_VK_XF86XK_MAIL_FORWARD\",\n    \"DOM_VK_XF86XK_MARKET\",\n    \"DOM_VK_XF86XK_MEETING\",\n    \"DOM_VK_XF86XK_MEMO\",\n    \"DOM_VK_XF86XK_MENU_KB\",\n    \"DOM_VK_XF86XK_MENU_PB\",\n    \"DOM_VK_XF86XK_MESSENGER\",\n    \"DOM_VK_XF86XK_MON_BRIGHTNESS_DOWN\",\n    \"DOM_VK_XF86XK_MON_BRIGHTNESS_UP\",\n    \"DOM_VK_XF86XK_MUSIC\",\n    \"DOM_VK_XF86XK_MY_COMPUTER\",\n    \"DOM_VK_XF86XK_MY_SITES\",\n    \"DOM_VK_XF86XK_NEW\",\n    \"DOM_VK_XF86XK_NEWS\",\n    \"DOM_VK_XF86XK_OFFICE_HOME\",\n    \"DOM_VK_XF86XK_OPEN\",\n    \"DOM_VK_XF86XK_OPEN_URL\",\n    \"DOM_VK_XF86XK_OPTION\",\n    \"DOM_VK_XF86XK_PASTE\",\n    \"DOM_VK_XF86XK_PHONE\",\n    \"DOM_VK_XF86XK_PICTURES\",\n    \"DOM_VK_XF86XK_POWER_DOWN\",\n    \"DOM_VK_XF86XK_POWER_OFF\",\n    \"DOM_VK_XF86XK_RED\",\n    \"DOM_VK_XF86XK_REFRESH\",\n    \"DOM_VK_XF86XK_RELOAD\",\n    \"DOM_VK_XF86XK_REPLY\",\n    \"DOM_VK_XF86XK_ROCKER_DOWN\",\n    \"DOM_VK_XF86XK_ROCKER_ENTER\",\n    \"DOM_VK_XF86XK_ROCKER_UP\",\n    \"DOM_VK_XF86XK_ROTATE_WINDOWS\",\n    \"DOM_VK_XF86XK_ROTATION_KB\",\n    \"DOM_VK_XF86XK_ROTATION_PB\",\n    \"DOM_VK_XF86XK_SAVE\",\n    \"DOM_VK_XF86XK_SCREEN_SAVER\",\n    \"DOM_VK_XF86XK_SCROLL_CLICK\",\n    \"DOM_VK_XF86XK_SCROLL_DOWN\",\n    \"DOM_VK_XF86XK_SCROLL_UP\",\n    \"DOM_VK_XF86XK_SEARCH\",\n    \"DOM_VK_XF86XK_SEND\",\n    \"DOM_VK_XF86XK_SHOP\",\n    \"DOM_VK_XF86XK_SPELL\",\n    \"DOM_VK_XF86XK_SPLIT_SCREEN\",\n    \"DOM_VK_XF86XK_STANDBY\",\n    \"DOM_VK_XF86XK_START\",\n    \"DOM_VK_XF86XK_STOP\",\n    \"DOM_VK_XF86XK_SUBTITLE\",\n    \"DOM_VK_XF86XK_SUPPORT\",\n    \"DOM_VK_XF86XK_SUSPEND\",\n    \"DOM_VK_XF86XK_TASK_PANE\",\n    \"DOM_VK_XF86XK_TERMINAL\",\n    \"DOM_VK_XF86XK_TIME\",\n    \"DOM_VK_XF86XK_TOOLS\",\n    \"DOM_VK_XF86XK_TOP_MENU\",\n    \"DOM_VK_XF86XK_TO_DO_LIST\",\n    \"DOM_VK_XF86XK_TRAVEL\",\n    \"DOM_VK_XF86XK_USER1KB\",\n    \"DOM_VK_XF86XK_USER2KB\",\n    \"DOM_VK_XF86XK_USER_PB\",\n    \"DOM_VK_XF86XK_UWB\",\n    \"DOM_VK_XF86XK_VENDOR_HOME\",\n    \"DOM_VK_XF86XK_VIDEO\",\n    \"DOM_VK_XF86XK_VIEW\",\n    \"DOM_VK_XF86XK_WAKE_UP\",\n    \"DOM_VK_XF86XK_WEB_CAM\",\n    \"DOM_VK_XF86XK_WHEEL_BUTTON\",\n    \"DOM_VK_XF86XK_WLAN\",\n    \"DOM_VK_XF86XK_WORD\",\n    \"DOM_VK_XF86XK_WWW\",\n    \"DOM_VK_XF86XK_XFER\",\n    \"DOM_VK_XF86XK_YELLOW\",\n    \"DOM_VK_XF86XK_ZOOM_IN\",\n    \"DOM_VK_XF86XK_ZOOM_OUT\",\n    \"DOM_VK_Y\",\n    \"DOM_VK_Z\",\n    \"DOM_VK_ZOOM\",\n    \"DONE\",\n    \"DONT_CARE\",\n    \"DOWNLOADING\",\n    \"DRAGDROP\",\n    \"DST_ALPHA\",\n    \"DST_COLOR\",\n    \"DYNAMIC_DRAW\",\n    \"DataChannel\",\n    \"DataTransfer\",\n    \"DataTransferItem\",\n    \"DataTransferItemList\",\n    \"DataView\",\n    \"Date\",\n    \"DateTimeFormat\",\n    \"DelayNode\",\n    \"DesktopNotification\",\n    \"DesktopNotificationCenter\",\n    \"DeviceLightEvent\",\n    \"DeviceMotionEvent\",\n    \"DeviceOrientationEvent\",\n    \"DeviceProximityEvent\",\n    \"DeviceStorage\",\n    \"DeviceStorageChangeEvent\",\n    \"Document\",\n    \"DocumentFragment\",\n    \"DocumentType\",\n    \"DragEvent\",\n    \"DynamicsCompressorNode\",\n    \"E\",\n    \"ELEMENT_ARRAY_BUFFER\",\n    \"ELEMENT_ARRAY_BUFFER_BINDING\",\n    \"ELEMENT_NODE\",\n    \"EMPTY\",\n    \"ENCODING_ERR\",\n    \"ENDED\",\n    \"END_TO_END\",\n    \"END_TO_START\",\n    \"ENTITY_NODE\",\n    \"ENTITY_REFERENCE_NODE\",\n    \"EPSILON\",\n    \"EQUAL\",\n    \"EQUALPOWER\",\n    \"ERROR\",\n    \"EXPONENTIAL_DISTANCE\",\n    \"Element\",\n    \"ElementQuery\",\n    \"Entity\",\n    \"EntityReference\",\n    \"Error\",\n    \"ErrorEvent\",\n    \"EvalError\",\n    \"Event\",\n    \"EventException\",\n    \"EventSource\",\n    \"EventTarget\",\n    \"External\",\n    \"FASTEST\",\n    \"FIDOSDK\",\n    \"FILTER_ACCEPT\",\n    \"FILTER_INTERRUPT\",\n    \"FILTER_REJECT\",\n    \"FILTER_SKIP\",\n    \"FINISHED_STATE\",\n    \"FIRST_ORDERED_NODE_TYPE\",\n    \"FLOAT\",\n    \"FLOAT_MAT2\",\n    \"FLOAT_MAT3\",\n    \"FLOAT_MAT4\",\n    \"FLOAT_VEC2\",\n    \"FLOAT_VEC3\",\n    \"FLOAT_VEC4\",\n    \"FOCUS\",\n    \"FONT_FACE_RULE\",\n    \"FONT_FEATURE_VALUES_RULE\",\n    \"FRAGMENT_SHADER\",\n    \"FRAGMENT_SHADER_DERIVATIVE_HINT_OES\",\n    \"FRAMEBUFFER\",\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_NAME\",\n    \"FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE\",\n    \"FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL\",\n    \"FRAMEBUFFER_BINDING\",\n    \"FRAMEBUFFER_COMPLETE\",\n    \"FRAMEBUFFER_INCOMPLETE_ATTACHMENT\",\n    \"FRAMEBUFFER_INCOMPLETE_DIMENSIONS\",\n    \"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\",\n    \"FRAMEBUFFER_UNSUPPORTED\",\n    \"FRONT\",\n    \"FRONT_AND_BACK\",\n    \"FRONT_FACE\",\n    \"FUNC_ADD\",\n    \"FUNC_REVERSE_SUBTRACT\",\n    \"FUNC_SUBTRACT\",\n    \"Feed\",\n    \"FeedEntry\",\n    \"File\",\n    \"FileError\",\n    \"FileList\",\n    \"FileReader\",\n    \"FindInPage\",\n    \"Float32Array\",\n    \"Float64Array\",\n    \"FocusEvent\",\n    \"FontFace\",\n    \"FormData\",\n    \"Function\",\n    \"GENERATE_MIPMAP_HINT\",\n    \"GEQUAL\",\n    \"GREATER\",\n    \"GREEN_BITS\",\n    \"GainNode\",\n    \"Gamepad\",\n    \"GamepadButton\",\n    \"GamepadEvent\",\n    \"GestureEvent\",\n    \"HAVE_CURRENT_DATA\",\n    \"HAVE_ENOUGH_DATA\",\n    \"HAVE_FUTURE_DATA\",\n    \"HAVE_METADATA\",\n    \"HAVE_NOTHING\",\n    \"HEADERS_RECEIVED\",\n    \"HIDDEN\",\n    \"HIERARCHY_REQUEST_ERR\",\n    \"HIGHPASS\",\n    \"HIGHSHELF\",\n    \"HIGH_FLOAT\",\n    \"HIGH_INT\",\n    \"HORIZONTAL\",\n    \"HORIZONTAL_AXIS\",\n    \"HRTF\",\n    \"HTMLAllCollection\",\n    \"HTMLAnchorElement\",\n    \"HTMLAppletElement\",\n    \"HTMLAreaElement\",\n    \"HTMLAudioElement\",\n    \"HTMLBRElement\",\n    \"HTMLBaseElement\",\n    \"HTMLBaseFontElement\",\n    \"HTMLBlockquoteElement\",\n    \"HTMLBodyElement\",\n    \"HTMLButtonElement\",\n    \"HTMLCanvasElement\",\n    \"HTMLCollection\",\n    \"HTMLCommandElement\",\n    \"HTMLContentElement\",\n    \"HTMLDListElement\",\n    \"HTMLDataElement\",\n    \"HTMLDataListElement\",\n    \"HTMLDetailsElement\",\n    \"HTMLDialogElement\",\n    \"HTMLDirectoryElement\",\n    \"HTMLDivElement\",\n    \"HTMLDocument\",\n    \"HTMLElement\",\n    \"HTMLEmbedElement\",\n    \"HTMLFieldSetElement\",\n    \"HTMLFontElement\",\n    \"HTMLFormControlsCollection\",\n    \"HTMLFormElement\",\n    \"HTMLFrameElement\",\n    \"HTMLFrameSetElement\",\n    \"HTMLHRElement\",\n    \"HTMLHeadElement\",\n    \"HTMLHeadingElement\",\n    \"HTMLHtmlElement\",\n    \"HTMLIFrameElement\",\n    \"HTMLImageElement\",\n    \"HTMLInputElement\",\n    \"HTMLIsIndexElement\",\n    \"HTMLKeygenElement\",\n    \"HTMLLIElement\",\n    \"HTMLLabelElement\",\n    \"HTMLLegendElement\",\n    \"HTMLLinkElement\",\n    \"HTMLMapElement\",\n    \"HTMLMarqueeElement\",\n    \"HTMLMediaElement\",\n    \"HTMLMenuElement\",\n    \"HTMLMenuItemElement\",\n    \"HTMLMetaElement\",\n    \"HTMLMeterElement\",\n    \"HTMLModElement\",\n    \"HTMLOListElement\",\n    \"HTMLObjectElement\",\n    \"HTMLOptGroupElement\",\n    \"HTMLOptionElement\",\n    \"HTMLOptionsCollection\",\n    \"HTMLOutputElement\",\n    \"HTMLParagraphElement\",\n    \"HTMLParamElement\",\n    \"HTMLPictureElement\",\n    \"HTMLPreElement\",\n    \"HTMLProgressElement\",\n    \"HTMLPropertiesCollection\",\n    \"HTMLQuoteElement\",\n    \"HTMLScriptElement\",\n    \"HTMLSelectElement\",\n    \"HTMLShadowElement\",\n    \"HTMLSourceElement\",\n    \"HTMLSpanElement\",\n    \"HTMLStyleElement\",\n    \"HTMLTableCaptionElement\",\n    \"HTMLTableCellElement\",\n    \"HTMLTableColElement\",\n    \"HTMLTableElement\",\n    \"HTMLTableRowElement\",\n    \"HTMLTableSectionElement\",\n    \"HTMLTemplateElement\",\n    \"HTMLTextAreaElement\",\n    \"HTMLTimeElement\",\n    \"HTMLTitleElement\",\n    \"HTMLTrackElement\",\n    \"HTMLUListElement\",\n    \"HTMLUnknownElement\",\n    \"HTMLVideoElement\",\n    \"HashChangeEvent\",\n    \"Headers\",\n    \"History\",\n    \"ICE_CHECKING\",\n    \"ICE_CLOSED\",\n    \"ICE_COMPLETED\",\n    \"ICE_CONNECTED\",\n    \"ICE_FAILED\",\n    \"ICE_GATHERING\",\n    \"ICE_WAITING\",\n    \"IDBCursor\",\n    \"IDBCursorWithValue\",\n    \"IDBDatabase\",\n    \"IDBDatabaseException\",\n    \"IDBFactory\",\n    \"IDBFileHandle\",\n    \"IDBFileRequest\",\n    \"IDBIndex\",\n    \"IDBKeyRange\",\n    \"IDBMutableFile\",\n    \"IDBObjectStore\",\n    \"IDBOpenDBRequest\",\n    \"IDBRequest\",\n    \"IDBTransaction\",\n    \"IDBVersionChangeEvent\",\n    \"IDLE\",\n    \"IMPLEMENTATION_COLOR_READ_FORMAT\",\n    \"IMPLEMENTATION_COLOR_READ_TYPE\",\n    \"IMPORT_RULE\",\n    \"INCR\",\n    \"INCR_WRAP\",\n    \"INDEX_SIZE_ERR\",\n    \"INT\",\n    \"INT_VEC2\",\n    \"INT_VEC3\",\n    \"INT_VEC4\",\n    \"INUSE_ATTRIBUTE_ERR\",\n    \"INVALID_ACCESS_ERR\",\n    \"INVALID_CHARACTER_ERR\",\n    \"INVALID_ENUM\",\n    \"INVALID_EXPRESSION_ERR\",\n    \"INVALID_FRAMEBUFFER_OPERATION\",\n    \"INVALID_MODIFICATION_ERR\",\n    \"INVALID_NODE_TYPE_ERR\",\n    \"INVALID_OPERATION\",\n    \"INVALID_STATE_ERR\",\n    \"INVALID_VALUE\",\n    \"INVERSE_DISTANCE\",\n    \"INVERT\",\n    \"IceCandidate\",\n    \"Image\",\n    \"ImageBitmap\",\n    \"ImageData\",\n    \"Infinity\",\n    \"InputEvent\",\n    \"InputMethodContext\",\n    \"InstallTrigger\",\n    \"Int16Array\",\n    \"Int32Array\",\n    \"Int8Array\",\n    \"Intent\",\n    \"InternalError\",\n    \"Intl\",\n    \"IsSearchProviderInstalled\",\n    \"Iterator\",\n    \"JSON\",\n    \"KEEP\",\n    \"KEYDOWN\",\n    \"KEYFRAMES_RULE\",\n    \"KEYFRAME_RULE\",\n    \"KEYPRESS\",\n    \"KEYUP\",\n    \"KeyEvent\",\n    \"KeyboardEvent\",\n    \"LENGTHADJUST_SPACING\",\n    \"LENGTHADJUST_SPACINGANDGLYPHS\",\n    \"LENGTHADJUST_UNKNOWN\",\n    \"LEQUAL\",\n    \"LESS\",\n    \"LINEAR\",\n    \"LINEAR_DISTANCE\",\n    \"LINEAR_MIPMAP_LINEAR\",\n    \"LINEAR_MIPMAP_NEAREST\",\n    \"LINES\",\n    \"LINE_LOOP\",\n    \"LINE_STRIP\",\n    \"LINE_WIDTH\",\n    \"LINK_STATUS\",\n    \"LIVE\",\n    \"LN10\",\n    \"LN2\",\n    \"LOADED\",\n    \"LOADING\",\n    \"LOG10E\",\n    \"LOG2E\",\n    \"LOWPASS\",\n    \"LOWSHELF\",\n    \"LOW_FLOAT\",\n    \"LOW_INT\",\n    \"LSException\",\n    \"LSParserFilter\",\n    \"LUMINANCE\",\n    \"LUMINANCE_ALPHA\",\n    \"LocalMediaStream\",\n    \"Location\",\n    \"MAX_COMBINED_TEXTURE_IMAGE_UNITS\",\n    \"MAX_CUBE_MAP_TEXTURE_SIZE\",\n    \"MAX_FRAGMENT_UNIFORM_VECTORS\",\n    \"MAX_RENDERBUFFER_SIZE\",\n    \"MAX_SAFE_INTEGER\",\n    \"MAX_TEXTURE_IMAGE_UNITS\",\n    \"MAX_TEXTURE_MAX_ANISOTROPY_EXT\",\n    \"MAX_TEXTURE_SIZE\",\n    \"MAX_VALUE\",\n    \"MAX_VARYING_VECTORS\",\n    \"MAX_VERTEX_ATTRIBS\",\n    \"MAX_VERTEX_TEXTURE_IMAGE_UNITS\",\n    \"MAX_VERTEX_UNIFORM_VECTORS\",\n    \"MAX_VIEWPORT_DIMS\",\n    \"MEDIA_ERR_ABORTED\",\n    \"MEDIA_ERR_DECODE\",\n    \"MEDIA_ERR_ENCRYPTED\",\n    \"MEDIA_ERR_NETWORK\",\n    \"MEDIA_ERR_SRC_NOT_SUPPORTED\",\n    \"MEDIA_KEYERR_CLIENT\",\n    \"MEDIA_KEYERR_DOMAIN\",\n    \"MEDIA_KEYERR_HARDWARECHANGE\",\n    \"MEDIA_KEYERR_OUTPUT\",\n    \"MEDIA_KEYERR_SERVICE\",\n    \"MEDIA_KEYERR_UNKNOWN\",\n    \"MEDIA_RULE\",\n    \"MEDIUM_FLOAT\",\n    \"MEDIUM_INT\",\n    \"META_MASK\",\n    \"MIN_SAFE_INTEGER\",\n    \"MIN_VALUE\",\n    \"MIRRORED_REPEAT\",\n    \"MODE_ASYNCHRONOUS\",\n    \"MODE_SYNCHRONOUS\",\n    \"MODIFICATION\",\n    \"MOUSEDOWN\",\n    \"MOUSEDRAG\",\n    \"MOUSEMOVE\",\n    \"MOUSEOUT\",\n    \"MOUSEOVER\",\n    \"MOUSEUP\",\n    \"MOZ_KEYFRAMES_RULE\",\n    \"MOZ_KEYFRAME_RULE\",\n    \"MOZ_SOURCE_CURSOR\",\n    \"MOZ_SOURCE_ERASER\",\n    \"MOZ_SOURCE_KEYBOARD\",\n    \"MOZ_SOURCE_MOUSE\",\n    \"MOZ_SOURCE_PEN\",\n    \"MOZ_SOURCE_TOUCH\",\n    \"MOZ_SOURCE_UNKNOWN\",\n    \"MSGESTURE_FLAG_BEGIN\",\n    \"MSGESTURE_FLAG_CANCEL\",\n    \"MSGESTURE_FLAG_END\",\n    \"MSGESTURE_FLAG_INERTIA\",\n    \"MSGESTURE_FLAG_NONE\",\n    \"MSPOINTER_TYPE_MOUSE\",\n    \"MSPOINTER_TYPE_PEN\",\n    \"MSPOINTER_TYPE_TOUCH\",\n    \"MS_ASYNC_CALLBACK_STATUS_ASSIGN_DELEGATE\",\n    \"MS_ASYNC_CALLBACK_STATUS_CANCEL\",\n    \"MS_ASYNC_CALLBACK_STATUS_CHOOSEANY\",\n    \"MS_ASYNC_CALLBACK_STATUS_ERROR\",\n    \"MS_ASYNC_CALLBACK_STATUS_JOIN\",\n    \"MS_ASYNC_OP_STATUS_CANCELED\",\n    \"MS_ASYNC_OP_STATUS_ERROR\",\n    \"MS_ASYNC_OP_STATUS_SUCCESS\",\n    \"MS_MANIPULATION_STATE_ACTIVE\",\n    \"MS_MANIPULATION_STATE_CANCELLED\",\n    \"MS_MANIPULATION_STATE_COMMITTED\",\n    \"MS_MANIPULATION_STATE_DRAGGING\",\n    \"MS_MANIPULATION_STATE_INERTIA\",\n    \"MS_MANIPULATION_STATE_PRESELECT\",\n    \"MS_MANIPULATION_STATE_SELECTING\",\n    \"MS_MANIPULATION_STATE_STOPPED\",\n    \"MS_MEDIA_ERR_ENCRYPTED\",\n    \"MS_MEDIA_KEYERR_CLIENT\",\n    \"MS_MEDIA_KEYERR_DOMAIN\",\n    \"MS_MEDIA_KEYERR_HARDWARECHANGE\",\n    \"MS_MEDIA_KEYERR_OUTPUT\",\n    \"MS_MEDIA_KEYERR_SERVICE\",\n    \"MS_MEDIA_KEYERR_UNKNOWN\",\n    \"Map\",\n    \"Math\",\n    \"MediaController\",\n    \"MediaDevices\",\n    \"MediaElementAudioSourceNode\",\n    \"MediaEncryptedEvent\",\n    \"MediaError\",\n    \"MediaKeyError\",\n    \"MediaKeyEvent\",\n    \"MediaKeyMessageEvent\",\n    \"MediaKeyNeededEvent\",\n    \"MediaKeySession\",\n    \"MediaKeyStatusMap\",\n    \"MediaKeySystemAccess\",\n    \"MediaKeys\",\n    \"MediaList\",\n    \"MediaQueryList\",\n    \"MediaQueryListEvent\",\n    \"MediaRecorder\",\n    \"MediaSource\",\n    \"MediaStream\",\n    \"MediaStreamAudioDestinationNode\",\n    \"MediaStreamAudioSourceNode\",\n    \"MediaStreamEvent\",\n    \"MediaStreamTrack\",\n    \"MediaStreamTrackEvent\",\n    \"MessageChannel\",\n    \"MessageEvent\",\n    \"MessagePort\",\n    \"Methods\",\n    \"MimeType\",\n    \"MimeTypeArray\",\n    \"MouseEvent\",\n    \"MouseScrollEvent\",\n    \"MozAnimation\",\n    \"MozAnimationDelay\",\n    \"MozAnimationDirection\",\n    \"MozAnimationDuration\",\n    \"MozAnimationFillMode\",\n    \"MozAnimationIterationCount\",\n    \"MozAnimationName\",\n    \"MozAnimationPlayState\",\n    \"MozAnimationTimingFunction\",\n    \"MozAppearance\",\n    \"MozBackfaceVisibility\",\n    \"MozBinding\",\n    \"MozBorderBottomColors\",\n    \"MozBorderEnd\",\n    \"MozBorderEndColor\",\n    \"MozBorderEndStyle\",\n    \"MozBorderEndWidth\",\n    \"MozBorderImage\",\n    \"MozBorderLeftColors\",\n    \"MozBorderRightColors\",\n    \"MozBorderStart\",\n    \"MozBorderStartColor\",\n    \"MozBorderStartStyle\",\n    \"MozBorderStartWidth\",\n    \"MozBorderTopColors\",\n    \"MozBoxAlign\",\n    \"MozBoxDirection\",\n    \"MozBoxFlex\",\n    \"MozBoxOrdinalGroup\",\n    \"MozBoxOrient\",\n    \"MozBoxPack\",\n    \"MozBoxSizing\",\n    \"MozCSSKeyframeRule\",\n    \"MozCSSKeyframesRule\",\n    \"MozColumnCount\",\n    \"MozColumnFill\",\n    \"MozColumnGap\",\n    \"MozColumnRule\",\n    \"MozColumnRuleColor\",\n    \"MozColumnRuleStyle\",\n    \"MozColumnRuleWidth\",\n    \"MozColumnWidth\",\n    \"MozColumns\",\n    \"MozContactChangeEvent\",\n    \"MozFloatEdge\",\n    \"MozFontFeatureSettings\",\n    \"MozFontLanguageOverride\",\n    \"MozForceBrokenImageIcon\",\n    \"MozHyphens\",\n    \"MozImageRegion\",\n    \"MozMarginEnd\",\n    \"MozMarginStart\",\n    \"MozMmsEvent\",\n    \"MozMmsMessage\",\n    \"MozMobileMessageThread\",\n    \"MozOSXFontSmoothing\",\n    \"MozOrient\",\n    \"MozOutlineRadius\",\n    \"MozOutlineRadiusBottomleft\",\n    \"MozOutlineRadiusBottomright\",\n    \"MozOutlineRadiusTopleft\",\n    \"MozOutlineRadiusTopright\",\n    \"MozPaddingEnd\",\n    \"MozPaddingStart\",\n    \"MozPerspective\",\n    \"MozPerspectiveOrigin\",\n    \"MozPowerManager\",\n    \"MozSettingsEvent\",\n    \"MozSmsEvent\",\n    \"MozSmsMessage\",\n    \"MozStackSizing\",\n    \"MozTabSize\",\n    \"MozTextAlignLast\",\n    \"MozTextDecorationColor\",\n    \"MozTextDecorationLine\",\n    \"MozTextDecorationStyle\",\n    \"MozTextSizeAdjust\",\n    \"MozTransform\",\n    \"MozTransformOrigin\",\n    \"MozTransformStyle\",\n    \"MozTransition\",\n    \"MozTransitionDelay\",\n    \"MozTransitionDuration\",\n    \"MozTransitionProperty\",\n    \"MozTransitionTimingFunction\",\n    \"MozUserFocus\",\n    \"MozUserInput\",\n    \"MozUserModify\",\n    \"MozUserSelect\",\n    \"MozWindowDragging\",\n    \"MozWindowShadow\",\n    \"MutationEvent\",\n    \"MutationObserver\",\n    \"MutationRecord\",\n    \"NAMESPACE_ERR\",\n    \"NAMESPACE_RULE\",\n    \"NEAREST\",\n    \"NEAREST_MIPMAP_LINEAR\",\n    \"NEAREST_MIPMAP_NEAREST\",\n    \"NEGATIVE_INFINITY\",\n    \"NETWORK_EMPTY\",\n    \"NETWORK_ERR\",\n    \"NETWORK_IDLE\",\n    \"NETWORK_LOADED\",\n    \"NETWORK_LOADING\",\n    \"NETWORK_NO_SOURCE\",\n    \"NEVER\",\n    \"NEW\",\n    \"NEXT\",\n    \"NEXT_NO_DUPLICATE\",\n    \"NICEST\",\n    \"NODE_AFTER\",\n    \"NODE_BEFORE\",\n    \"NODE_BEFORE_AND_AFTER\",\n    \"NODE_INSIDE\",\n    \"NONE\",\n    \"NON_TRANSIENT_ERR\",\n    \"NOTATION_NODE\",\n    \"NOTCH\",\n    \"NOTEQUAL\",\n    \"NOT_ALLOWED_ERR\",\n    \"NOT_FOUND_ERR\",\n    \"NOT_READABLE_ERR\",\n    \"NOT_SUPPORTED_ERR\",\n    \"NO_DATA_ALLOWED_ERR\",\n    \"NO_ERR\",\n    \"NO_ERROR\",\n    \"NO_MODIFICATION_ALLOWED_ERR\",\n    \"NUMBER_TYPE\",\n    \"NUM_COMPRESSED_TEXTURE_FORMATS\",\n    \"NaN\",\n    \"NamedNodeMap\",\n    \"Navigator\",\n    \"NearbyLinks\",\n    \"NetworkInformation\",\n    \"Node\",\n    \"NodeFilter\",\n    \"NodeIterator\",\n    \"NodeList\",\n    \"Notation\",\n    \"Notification\",\n    \"NotifyPaintEvent\",\n    \"Number\",\n    \"NumberFormat\",\n    \"OBSOLETE\",\n    \"ONE\",\n    \"ONE_MINUS_CONSTANT_ALPHA\",\n    \"ONE_MINUS_CONSTANT_COLOR\",\n    \"ONE_MINUS_DST_ALPHA\",\n    \"ONE_MINUS_DST_COLOR\",\n    \"ONE_MINUS_SRC_ALPHA\",\n    \"ONE_MINUS_SRC_COLOR\",\n    \"OPEN\",\n    \"OPENED\",\n    \"OPENING\",\n    \"ORDERED_NODE_ITERATOR_TYPE\",\n    \"ORDERED_NODE_SNAPSHOT_TYPE\",\n    \"OUT_OF_MEMORY\",\n    \"Object\",\n    \"OfflineAudioCompletionEvent\",\n    \"OfflineAudioContext\",\n    \"OfflineResourceList\",\n    \"Option\",\n    \"OscillatorNode\",\n    \"OverflowEvent\",\n    \"PACK_ALIGNMENT\",\n    \"PAGE_RULE\",\n    \"PARSE_ERR\",\n    \"PATHSEG_ARC_ABS\",\n    \"PATHSEG_ARC_REL\",\n    \"PATHSEG_CLOSEPATH\",\n    \"PATHSEG_CURVETO_CUBIC_ABS\",\n    \"PATHSEG_CURVETO_CUBIC_REL\",\n    \"PATHSEG_CURVETO_CUBIC_SMOOTH_ABS\",\n    \"PATHSEG_CURVETO_CUBIC_SMOOTH_REL\",\n    \"PATHSEG_CURVETO_QUADRATIC_ABS\",\n    \"PATHSEG_CURVETO_QUADRATIC_REL\",\n    \"PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS\",\n    \"PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL\",\n    \"PATHSEG_LINETO_ABS\",\n    \"PATHSEG_LINETO_HORIZONTAL_ABS\",\n    \"PATHSEG_LINETO_HORIZONTAL_REL\",\n    \"PATHSEG_LINETO_REL\",\n    \"PATHSEG_LINETO_VERTICAL_ABS\",\n    \"PATHSEG_LINETO_VERTICAL_REL\",\n    \"PATHSEG_MOVETO_ABS\",\n    \"PATHSEG_MOVETO_REL\",\n    \"PATHSEG_UNKNOWN\",\n    \"PATH_EXISTS_ERR\",\n    \"PEAKING\",\n    \"PERMISSION_DENIED\",\n    \"PERSISTENT\",\n    \"PI\",\n    \"PLAYING_STATE\",\n    \"POINTS\",\n    \"POLYGON_OFFSET_FACTOR\",\n    \"POLYGON_OFFSET_FILL\",\n    \"POLYGON_OFFSET_UNITS\",\n    \"POSITION_UNAVAILABLE\",\n    \"POSITIVE_INFINITY\",\n    \"PREV\",\n    \"PREV_NO_DUPLICATE\",\n    \"PROCESSING_INSTRUCTION_NODE\",\n    \"PageChangeEvent\",\n    \"PageTransitionEvent\",\n    \"PaintRequest\",\n    \"PaintRequestList\",\n    \"PannerNode\",\n    \"Path2D\",\n    \"Performance\",\n    \"PerformanceEntry\",\n    \"PerformanceMark\",\n    \"PerformanceMeasure\",\n    \"PerformanceNavigation\",\n    \"PerformanceResourceTiming\",\n    \"PerformanceTiming\",\n    \"PeriodicWave\",\n    \"Plugin\",\n    \"PluginArray\",\n    \"PopStateEvent\",\n    \"PopupBlockedEvent\",\n    \"ProcessingInstruction\",\n    \"ProgressEvent\",\n    \"Promise\",\n    \"PropertyNodeList\",\n    \"Proxy\",\n    \"PushManager\",\n    \"PushSubscription\",\n    \"Q\",\n    \"QUOTA_ERR\",\n    \"QUOTA_EXCEEDED_ERR\",\n    \"QueryInterface\",\n    \"READ_ONLY\",\n    \"READ_ONLY_ERR\",\n    \"READ_WRITE\",\n    \"RED_BITS\",\n    \"REMOVAL\",\n    \"RENDERBUFFER\",\n    \"RENDERBUFFER_ALPHA_SIZE\",\n    \"RENDERBUFFER_BINDING\",\n    \"RENDERBUFFER_BLUE_SIZE\",\n    \"RENDERBUFFER_DEPTH_SIZE\",\n    \"RENDERBUFFER_GREEN_SIZE\",\n    \"RENDERBUFFER_HEIGHT\",\n    \"RENDERBUFFER_INTERNAL_FORMAT\",\n    \"RENDERBUFFER_RED_SIZE\",\n    \"RENDERBUFFER_STENCIL_SIZE\",\n    \"RENDERBUFFER_WIDTH\",\n    \"RENDERER\",\n    \"RENDERING_INTENT_ABSOLUTE_COLORIMETRIC\",\n    \"RENDERING_INTENT_AUTO\",\n    \"RENDERING_INTENT_PERCEPTUAL\",\n    \"RENDERING_INTENT_RELATIVE_COLORIMETRIC\",\n    \"RENDERING_INTENT_SATURATION\",\n    \"RENDERING_INTENT_UNKNOWN\",\n    \"REPEAT\",\n    \"REPLACE\",\n    \"RGB\",\n    \"RGB565\",\n    \"RGB5_A1\",\n    \"RGBA\",\n    \"RGBA4\",\n    \"RGBColor\",\n    \"ROTATION_CLOCKWISE\",\n    \"ROTATION_COUNTERCLOCKWISE\",\n    \"RTCDataChannelEvent\",\n    \"RTCIceCandidate\",\n    \"RTCPeerConnectionIceEvent\",\n    \"RTCRtpReceiver\",\n    \"RTCRtpSender\",\n    \"RTCSessionDescription\",\n    \"RTCStatsReport\",\n    \"RadioNodeList\",\n    \"Range\",\n    \"RangeError\",\n    \"RangeException\",\n    \"RecordErrorEvent\",\n    \"Rect\",\n    \"ReferenceError\",\n    \"RegExp\",\n    \"Request\",\n    \"Response\",\n    \"SAMPLER_2D\",\n    \"SAMPLER_CUBE\",\n    \"SAMPLES\",\n    \"SAMPLE_ALPHA_TO_COVERAGE\",\n    \"SAMPLE_BUFFERS\",\n    \"SAMPLE_COVERAGE\",\n    \"SAMPLE_COVERAGE_INVERT\",\n    \"SAMPLE_COVERAGE_VALUE\",\n    \"SAWTOOTH\",\n    \"SCHEDULED_STATE\",\n    \"SCISSOR_BOX\",\n    \"SCISSOR_TEST\",\n    \"SCROLL_PAGE_DOWN\",\n    \"SCROLL_PAGE_UP\",\n    \"SDP_ANSWER\",\n    \"SDP_OFFER\",\n    \"SDP_PRANSWER\",\n    \"SECURITY_ERR\",\n    \"SELECT\",\n    \"SERIALIZE_ERR\",\n    \"SEVERITY_ERROR\",\n    \"SEVERITY_FATAL_ERROR\",\n    \"SEVERITY_WARNING\",\n    \"SHADER_COMPILER\",\n    \"SHADER_TYPE\",\n    \"SHADING_LANGUAGE_VERSION\",\n    \"SHIFT_MASK\",\n    \"SHORT\",\n    \"SHOWING\",\n    \"SHOW_ALL\",\n    \"SHOW_ATTRIBUTE\",\n    \"SHOW_CDATA_SECTION\",\n    \"SHOW_COMMENT\",\n    \"SHOW_DOCUMENT\",\n    \"SHOW_DOCUMENT_FRAGMENT\",\n    \"SHOW_DOCUMENT_TYPE\",\n    \"SHOW_ELEMENT\",\n    \"SHOW_ENTITY\",\n    \"SHOW_ENTITY_REFERENCE\",\n    \"SHOW_NOTATION\",\n    \"SHOW_PROCESSING_INSTRUCTION\",\n    \"SHOW_TEXT\",\n    \"SINE\",\n    \"SOUNDFIELD\",\n    \"SQLException\",\n    \"SQRT1_2\",\n    \"SQRT2\",\n    \"SQUARE\",\n    \"SRC_ALPHA\",\n    \"SRC_ALPHA_SATURATE\",\n    \"SRC_COLOR\",\n    \"START_TO_END\",\n    \"START_TO_START\",\n    \"STATIC_DRAW\",\n    \"STENCIL_ATTACHMENT\",\n    \"STENCIL_BACK_FAIL\",\n    \"STENCIL_BACK_FUNC\",\n    \"STENCIL_BACK_PASS_DEPTH_FAIL\",\n    \"STENCIL_BACK_PASS_DEPTH_PASS\",\n    \"STENCIL_BACK_REF\",\n    \"STENCIL_BACK_VALUE_MASK\",\n    \"STENCIL_BACK_WRITEMASK\",\n    \"STENCIL_BITS\",\n    \"STENCIL_BUFFER_BIT\",\n    \"STENCIL_CLEAR_VALUE\",\n    \"STENCIL_FAIL\",\n    \"STENCIL_FUNC\",\n    \"STENCIL_INDEX\",\n    \"STENCIL_INDEX8\",\n    \"STENCIL_PASS_DEPTH_FAIL\",\n    \"STENCIL_PASS_DEPTH_PASS\",\n    \"STENCIL_REF\",\n    \"STENCIL_TEST\",\n    \"STENCIL_VALUE_MASK\",\n    \"STENCIL_WRITEMASK\",\n    \"STREAM_DRAW\",\n    \"STRING_TYPE\",\n    \"STYLE_RULE\",\n    \"SUBPIXEL_BITS\",\n    \"SUPPORTS_RULE\",\n    \"SVGAElement\",\n    \"SVGAltGlyphDefElement\",\n    \"SVGAltGlyphElement\",\n    \"SVGAltGlyphItemElement\",\n    \"SVGAngle\",\n    \"SVGAnimateColorElement\",\n    \"SVGAnimateElement\",\n    \"SVGAnimateMotionElement\",\n    \"SVGAnimateTransformElement\",\n    \"SVGAnimatedAngle\",\n    \"SVGAnimatedBoolean\",\n    \"SVGAnimatedEnumeration\",\n    \"SVGAnimatedInteger\",\n    \"SVGAnimatedLength\",\n    \"SVGAnimatedLengthList\",\n    \"SVGAnimatedNumber\",\n    \"SVGAnimatedNumberList\",\n    \"SVGAnimatedPreserveAspectRatio\",\n    \"SVGAnimatedRect\",\n    \"SVGAnimatedString\",\n    \"SVGAnimatedTransformList\",\n    \"SVGAnimationElement\",\n    \"SVGCircleElement\",\n    \"SVGClipPathElement\",\n    \"SVGColor\",\n    \"SVGComponentTransferFunctionElement\",\n    \"SVGCursorElement\",\n    \"SVGDefsElement\",\n    \"SVGDescElement\",\n    \"SVGDiscardElement\",\n    \"SVGDocument\",\n    \"SVGElement\",\n    \"SVGElementInstance\",\n    \"SVGElementInstanceList\",\n    \"SVGEllipseElement\",\n    \"SVGException\",\n    \"SVGFEBlendElement\",\n    \"SVGFEColorMatrixElement\",\n    \"SVGFEComponentTransferElement\",\n    \"SVGFECompositeElement\",\n    \"SVGFEConvolveMatrixElement\",\n    \"SVGFEDiffuseLightingElement\",\n    \"SVGFEDisplacementMapElement\",\n    \"SVGFEDistantLightElement\",\n    \"SVGFEDropShadowElement\",\n    \"SVGFEFloodElement\",\n    \"SVGFEFuncAElement\",\n    \"SVGFEFuncBElement\",\n    \"SVGFEFuncGElement\",\n    \"SVGFEFuncRElement\",\n    \"SVGFEGaussianBlurElement\",\n    \"SVGFEImageElement\",\n    \"SVGFEMergeElement\",\n    \"SVGFEMergeNodeElement\",\n    \"SVGFEMorphologyElement\",\n    \"SVGFEOffsetElement\",\n    \"SVGFEPointLightElement\",\n    \"SVGFESpecularLightingElement\",\n    \"SVGFESpotLightElement\",\n    \"SVGFETileElement\",\n    \"SVGFETurbulenceElement\",\n    \"SVGFilterElement\",\n    \"SVGFontElement\",\n    \"SVGFontFaceElement\",\n    \"SVGFontFaceFormatElement\",\n    \"SVGFontFaceNameElement\",\n    \"SVGFontFaceSrcElement\",\n    \"SVGFontFaceUriElement\",\n    \"SVGForeignObjectElement\",\n    \"SVGGElement\",\n    \"SVGGeometryElement\",\n    \"SVGGlyphElement\",\n    \"SVGGlyphRefElement\",\n    \"SVGGradientElement\",\n    \"SVGGraphicsElement\",\n    \"SVGHKernElement\",\n    \"SVGImageElement\",\n    \"SVGLength\",\n    \"SVGLengthList\",\n    \"SVGLineElement\",\n    \"SVGLinearGradientElement\",\n    \"SVGMPathElement\",\n    \"SVGMarkerElement\",\n    \"SVGMaskElement\",\n    \"SVGMatrix\",\n    \"SVGMetadataElement\",\n    \"SVGMissingGlyphElement\",\n    \"SVGNumber\",\n    \"SVGNumberList\",\n    \"SVGPaint\",\n    \"SVGPathElement\",\n    \"SVGPathSeg\",\n    \"SVGPathSegArcAbs\",\n    \"SVGPathSegArcRel\",\n    \"SVGPathSegClosePath\",\n    \"SVGPathSegCurvetoCubicAbs\",\n    \"SVGPathSegCurvetoCubicRel\",\n    \"SVGPathSegCurvetoCubicSmoothAbs\",\n    \"SVGPathSegCurvetoCubicSmoothRel\",\n    \"SVGPathSegCurvetoQuadraticAbs\",\n    \"SVGPathSegCurvetoQuadraticRel\",\n    \"SVGPathSegCurvetoQuadraticSmoothAbs\",\n    \"SVGPathSegCurvetoQuadraticSmoothRel\",\n    \"SVGPathSegLinetoAbs\",\n    \"SVGPathSegLinetoHorizontalAbs\",\n    \"SVGPathSegLinetoHorizontalRel\",\n    \"SVGPathSegLinetoRel\",\n    \"SVGPathSegLinetoVerticalAbs\",\n    \"SVGPathSegLinetoVerticalRel\",\n    \"SVGPathSegList\",\n    \"SVGPathSegMovetoAbs\",\n    \"SVGPathSegMovetoRel\",\n    \"SVGPatternElement\",\n    \"SVGPoint\",\n    \"SVGPointList\",\n    \"SVGPolygonElement\",\n    \"SVGPolylineElement\",\n    \"SVGPreserveAspectRatio\",\n    \"SVGRadialGradientElement\",\n    \"SVGRect\",\n    \"SVGRectElement\",\n    \"SVGRenderingIntent\",\n    \"SVGSVGElement\",\n    \"SVGScriptElement\",\n    \"SVGSetElement\",\n    \"SVGStopElement\",\n    \"SVGStringList\",\n    \"SVGStyleElement\",\n    \"SVGSwitchElement\",\n    \"SVGSymbolElement\",\n    \"SVGTRefElement\",\n    \"SVGTSpanElement\",\n    \"SVGTextContentElement\",\n    \"SVGTextElement\",\n    \"SVGTextPathElement\",\n    \"SVGTextPositioningElement\",\n    \"SVGTitleElement\",\n    \"SVGTransform\",\n    \"SVGTransformList\",\n    \"SVGUnitTypes\",\n    \"SVGUseElement\",\n    \"SVGVKernElement\",\n    \"SVGViewElement\",\n    \"SVGViewSpec\",\n    \"SVGZoomAndPan\",\n    \"SVGZoomEvent\",\n    \"SVG_ANGLETYPE_DEG\",\n    \"SVG_ANGLETYPE_GRAD\",\n    \"SVG_ANGLETYPE_RAD\",\n    \"SVG_ANGLETYPE_UNKNOWN\",\n    \"SVG_ANGLETYPE_UNSPECIFIED\",\n    \"SVG_CHANNEL_A\",\n    \"SVG_CHANNEL_B\",\n    \"SVG_CHANNEL_G\",\n    \"SVG_CHANNEL_R\",\n    \"SVG_CHANNEL_UNKNOWN\",\n    \"SVG_COLORTYPE_CURRENTCOLOR\",\n    \"SVG_COLORTYPE_RGBCOLOR\",\n    \"SVG_COLORTYPE_RGBCOLOR_ICCCOLOR\",\n    \"SVG_COLORTYPE_UNKNOWN\",\n    \"SVG_EDGEMODE_DUPLICATE\",\n    \"SVG_EDGEMODE_NONE\",\n    \"SVG_EDGEMODE_UNKNOWN\",\n    \"SVG_EDGEMODE_WRAP\",\n    \"SVG_FEBLEND_MODE_COLOR\",\n    \"SVG_FEBLEND_MODE_COLOR_BURN\",\n    \"SVG_FEBLEND_MODE_COLOR_DODGE\",\n    \"SVG_FEBLEND_MODE_DARKEN\",\n    \"SVG_FEBLEND_MODE_DIFFERENCE\",\n    \"SVG_FEBLEND_MODE_EXCLUSION\",\n    \"SVG_FEBLEND_MODE_HARD_LIGHT\",\n    \"SVG_FEBLEND_MODE_HUE\",\n    \"SVG_FEBLEND_MODE_LIGHTEN\",\n    \"SVG_FEBLEND_MODE_LUMINOSITY\",\n    \"SVG_FEBLEND_MODE_MULTIPLY\",\n    \"SVG_FEBLEND_MODE_NORMAL\",\n    \"SVG_FEBLEND_MODE_OVERLAY\",\n    \"SVG_FEBLEND_MODE_SATURATION\",\n    \"SVG_FEBLEND_MODE_SCREEN\",\n    \"SVG_FEBLEND_MODE_SOFT_LIGHT\",\n    \"SVG_FEBLEND_MODE_UNKNOWN\",\n    \"SVG_FECOLORMATRIX_TYPE_HUEROTATE\",\n    \"SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA\",\n    \"SVG_FECOLORMATRIX_TYPE_MATRIX\",\n    \"SVG_FECOLORMATRIX_TYPE_SATURATE\",\n    \"SVG_FECOLORMATRIX_TYPE_UNKNOWN\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_GAMMA\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_LINEAR\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_TABLE\",\n    \"SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN\",\n    \"SVG_FECOMPOSITE_OPERATOR_ARITHMETIC\",\n    \"SVG_FECOMPOSITE_OPERATOR_ATOP\",\n    \"SVG_FECOMPOSITE_OPERATOR_IN\",\n    \"SVG_FECOMPOSITE_OPERATOR_OUT\",\n    \"SVG_FECOMPOSITE_OPERATOR_OVER\",\n    \"SVG_FECOMPOSITE_OPERATOR_UNKNOWN\",\n    \"SVG_FECOMPOSITE_OPERATOR_XOR\",\n    \"SVG_INVALID_VALUE_ERR\",\n    \"SVG_LENGTHTYPE_CM\",\n    \"SVG_LENGTHTYPE_EMS\",\n    \"SVG_LENGTHTYPE_EXS\",\n    \"SVG_LENGTHTYPE_IN\",\n    \"SVG_LENGTHTYPE_MM\",\n    \"SVG_LENGTHTYPE_NUMBER\",\n    \"SVG_LENGTHTYPE_PC\",\n    \"SVG_LENGTHTYPE_PERCENTAGE\",\n    \"SVG_LENGTHTYPE_PT\",\n    \"SVG_LENGTHTYPE_PX\",\n    \"SVG_LENGTHTYPE_UNKNOWN\",\n    \"SVG_MARKERUNITS_STROKEWIDTH\",\n    \"SVG_MARKERUNITS_UNKNOWN\",\n    \"SVG_MARKERUNITS_USERSPACEONUSE\",\n    \"SVG_MARKER_ORIENT_ANGLE\",\n    \"SVG_MARKER_ORIENT_AUTO\",\n    \"SVG_MARKER_ORIENT_UNKNOWN\",\n    \"SVG_MASKTYPE_ALPHA\",\n    \"SVG_MASKTYPE_LUMINANCE\",\n    \"SVG_MATRIX_NOT_INVERTABLE\",\n    \"SVG_MEETORSLICE_MEET\",\n    \"SVG_MEETORSLICE_SLICE\",\n    \"SVG_MEETORSLICE_UNKNOWN\",\n    \"SVG_MORPHOLOGY_OPERATOR_DILATE\",\n    \"SVG_MORPHOLOGY_OPERATOR_ERODE\",\n    \"SVG_MORPHOLOGY_OPERATOR_UNKNOWN\",\n    \"SVG_PAINTTYPE_CURRENTCOLOR\",\n    \"SVG_PAINTTYPE_NONE\",\n    \"SVG_PAINTTYPE_RGBCOLOR\",\n    \"SVG_PAINTTYPE_RGBCOLOR_ICCCOLOR\",\n    \"SVG_PAINTTYPE_UNKNOWN\",\n    \"SVG_PAINTTYPE_URI\",\n    \"SVG_PAINTTYPE_URI_CURRENTCOLOR\",\n    \"SVG_PAINTTYPE_URI_NONE\",\n    \"SVG_PAINTTYPE_URI_RGBCOLOR\",\n    \"SVG_PAINTTYPE_URI_RGBCOLOR_ICCCOLOR\",\n    \"SVG_PRESERVEASPECTRATIO_NONE\",\n    \"SVG_PRESERVEASPECTRATIO_UNKNOWN\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMAXYMIN\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMIDYMIN\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMAX\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMID\",\n    \"SVG_PRESERVEASPECTRATIO_XMINYMIN\",\n    \"SVG_SPREADMETHOD_PAD\",\n    \"SVG_SPREADMETHOD_REFLECT\",\n    \"SVG_SPREADMETHOD_REPEAT\",\n    \"SVG_SPREADMETHOD_UNKNOWN\",\n    \"SVG_STITCHTYPE_NOSTITCH\",\n    \"SVG_STITCHTYPE_STITCH\",\n    \"SVG_STITCHTYPE_UNKNOWN\",\n    \"SVG_TRANSFORM_MATRIX\",\n    \"SVG_TRANSFORM_ROTATE\",\n    \"SVG_TRANSFORM_SCALE\",\n    \"SVG_TRANSFORM_SKEWX\",\n    \"SVG_TRANSFORM_SKEWY\",\n    \"SVG_TRANSFORM_TRANSLATE\",\n    \"SVG_TRANSFORM_UNKNOWN\",\n    \"SVG_TURBULENCE_TYPE_FRACTALNOISE\",\n    \"SVG_TURBULENCE_TYPE_TURBULENCE\",\n    \"SVG_TURBULENCE_TYPE_UNKNOWN\",\n    \"SVG_UNIT_TYPE_OBJECTBOUNDINGBOX\",\n    \"SVG_UNIT_TYPE_UNKNOWN\",\n    \"SVG_UNIT_TYPE_USERSPACEONUSE\",\n    \"SVG_WRONG_TYPE_ERR\",\n    \"SVG_ZOOMANDPAN_DISABLE\",\n    \"SVG_ZOOMANDPAN_MAGNIFY\",\n    \"SVG_ZOOMANDPAN_UNKNOWN\",\n    \"SYNTAX_ERR\",\n    \"SavedPages\",\n    \"Screen\",\n    \"ScreenOrientation\",\n    \"Script\",\n    \"ScriptProcessorNode\",\n    \"ScrollAreaEvent\",\n    \"SecurityPolicyViolationEvent\",\n    \"Selection\",\n    \"ServiceWorker\",\n    \"ServiceWorkerContainer\",\n    \"ServiceWorkerRegistration\",\n    \"SessionDescription\",\n    \"Set\",\n    \"ShadowRoot\",\n    \"SharedWorker\",\n    \"SimpleGestureEvent\",\n    \"SpeechSynthesisEvent\",\n    \"SpeechSynthesisUtterance\",\n    \"StopIteration\",\n    \"Storage\",\n    \"StorageEvent\",\n    \"String\",\n    \"StyleSheet\",\n    \"StyleSheetList\",\n    \"SubtleCrypto\",\n    \"Symbol\",\n    \"SyntaxError\",\n    \"TEMPORARY\",\n    \"TEXTPATH_METHODTYPE_ALIGN\",\n    \"TEXTPATH_METHODTYPE_STRETCH\",\n    \"TEXTPATH_METHODTYPE_UNKNOWN\",\n    \"TEXTPATH_SPACINGTYPE_AUTO\",\n    \"TEXTPATH_SPACINGTYPE_EXACT\",\n    \"TEXTPATH_SPACINGTYPE_UNKNOWN\",\n    \"TEXTURE\",\n    \"TEXTURE0\",\n    \"TEXTURE1\",\n    \"TEXTURE10\",\n    \"TEXTURE11\",\n    \"TEXTURE12\",\n    \"TEXTURE13\",\n    \"TEXTURE14\",\n    \"TEXTURE15\",\n    \"TEXTURE16\",\n    \"TEXTURE17\",\n    \"TEXTURE18\",\n    \"TEXTURE19\",\n    \"TEXTURE2\",\n    \"TEXTURE20\",\n    \"TEXTURE21\",\n    \"TEXTURE22\",\n    \"TEXTURE23\",\n    \"TEXTURE24\",\n    \"TEXTURE25\",\n    \"TEXTURE26\",\n    \"TEXTURE27\",\n    \"TEXTURE28\",\n    \"TEXTURE29\",\n    \"TEXTURE3\",\n    \"TEXTURE30\",\n    \"TEXTURE31\",\n    \"TEXTURE4\",\n    \"TEXTURE5\",\n    \"TEXTURE6\",\n    \"TEXTURE7\",\n    \"TEXTURE8\",\n    \"TEXTURE9\",\n    \"TEXTURE_2D\",\n    \"TEXTURE_BINDING_2D\",\n    \"TEXTURE_BINDING_CUBE_MAP\",\n    \"TEXTURE_CUBE_MAP\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_X\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Y\",\n    \"TEXTURE_CUBE_MAP_NEGATIVE_Z\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_X\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Y\",\n    \"TEXTURE_CUBE_MAP_POSITIVE_Z\",\n    \"TEXTURE_MAG_FILTER\",\n    \"TEXTURE_MAX_ANISOTROPY_EXT\",\n    \"TEXTURE_MIN_FILTER\",\n    \"TEXTURE_WRAP_S\",\n    \"TEXTURE_WRAP_T\",\n    \"TEXT_NODE\",\n    \"TIMEOUT\",\n    \"TIMEOUT_ERR\",\n    \"TOO_LARGE_ERR\",\n    \"TRANSACTION_INACTIVE_ERR\",\n    \"TRIANGLE\",\n    \"TRIANGLES\",\n    \"TRIANGLE_FAN\",\n    \"TRIANGLE_STRIP\",\n    \"TYPE_BACK_FORWARD\",\n    \"TYPE_ERR\",\n    \"TYPE_MISMATCH_ERR\",\n    \"TYPE_NAVIGATE\",\n    \"TYPE_RELOAD\",\n    \"TYPE_RESERVED\",\n    \"Text\",\n    \"TextDecoder\",\n    \"TextEncoder\",\n    \"TextEvent\",\n    \"TextMetrics\",\n    \"TextTrack\",\n    \"TextTrackCue\",\n    \"TextTrackCueList\",\n    \"TextTrackList\",\n    \"TimeEvent\",\n    \"TimeRanges\",\n    \"Touch\",\n    \"TouchEvent\",\n    \"TouchList\",\n    \"TrackEvent\",\n    \"TransitionEvent\",\n    \"TreeWalker\",\n    \"TypeError\",\n    \"UIEvent\",\n    \"UNCACHED\",\n    \"UNKNOWN_ERR\",\n    \"UNKNOWN_RULE\",\n    \"UNMASKED_RENDERER_WEBGL\",\n    \"UNMASKED_VENDOR_WEBGL\",\n    \"UNORDERED_NODE_ITERATOR_TYPE\",\n    \"UNORDERED_NODE_SNAPSHOT_TYPE\",\n    \"UNPACK_ALIGNMENT\",\n    \"UNPACK_COLORSPACE_CONVERSION_WEBGL\",\n    \"UNPACK_FLIP_Y_WEBGL\",\n    \"UNPACK_PREMULTIPLY_ALPHA_WEBGL\",\n    \"UNSCHEDULED_STATE\",\n    \"UNSENT\",\n    \"UNSIGNED_BYTE\",\n    \"UNSIGNED_INT\",\n    \"UNSIGNED_SHORT\",\n    \"UNSIGNED_SHORT_4_4_4_4\",\n    \"UNSIGNED_SHORT_5_5_5_1\",\n    \"UNSIGNED_SHORT_5_6_5\",\n    \"UNSPECIFIED_EVENT_TYPE_ERR\",\n    \"UPDATEREADY\",\n    \"URIError\",\n    \"URL\",\n    \"URLSearchParams\",\n    \"URLUnencoded\",\n    \"URL_MISMATCH_ERR\",\n    \"UTC\",\n    \"Uint16Array\",\n    \"Uint32Array\",\n    \"Uint8Array\",\n    \"Uint8ClampedArray\",\n    \"UserMessageHandler\",\n    \"UserMessageHandlersNamespace\",\n    \"UserProximityEvent\",\n    \"VALIDATE_STATUS\",\n    \"VALIDATION_ERR\",\n    \"VARIABLES_RULE\",\n    \"VENDOR\",\n    \"VERSION\",\n    \"VERSION_CHANGE\",\n    \"VERSION_ERR\",\n    \"VERTEX_ATTRIB_ARRAY_BUFFER_BINDING\",\n    \"VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE\",\n    \"VERTEX_ATTRIB_ARRAY_ENABLED\",\n    \"VERTEX_ATTRIB_ARRAY_NORMALIZED\",\n    \"VERTEX_ATTRIB_ARRAY_POINTER\",\n    \"VERTEX_ATTRIB_ARRAY_SIZE\",\n    \"VERTEX_ATTRIB_ARRAY_STRIDE\",\n    \"VERTEX_ATTRIB_ARRAY_TYPE\",\n    \"VERTEX_SHADER\",\n    \"VERTICAL\",\n    \"VERTICAL_AXIS\",\n    \"VER_ERR\",\n    \"VIEWPORT\",\n    \"VIEWPORT_RULE\",\n    \"VTTCue\",\n    \"VTTRegion\",\n    \"ValidityState\",\n    \"VideoStreamTrack\",\n    \"WEBKIT_FILTER_RULE\",\n    \"WEBKIT_KEYFRAMES_RULE\",\n    \"WEBKIT_KEYFRAME_RULE\",\n    \"WEBKIT_REGION_RULE\",\n    \"WRONG_DOCUMENT_ERR\",\n    \"WaveShaperNode\",\n    \"WeakMap\",\n    \"WeakSet\",\n    \"WebGLActiveInfo\",\n    \"WebGLBuffer\",\n    \"WebGLContextEvent\",\n    \"WebGLFramebuffer\",\n    \"WebGLProgram\",\n    \"WebGLRenderbuffer\",\n    \"WebGLRenderingContext\",\n    \"WebGLShader\",\n    \"WebGLShaderPrecisionFormat\",\n    \"WebGLTexture\",\n    \"WebGLUniformLocation\",\n    \"WebGLVertexArray\",\n    \"WebKitAnimationEvent\",\n    \"WebKitBlobBuilder\",\n    \"WebKitCSSFilterRule\",\n    \"WebKitCSSFilterValue\",\n    \"WebKitCSSKeyframeRule\",\n    \"WebKitCSSKeyframesRule\",\n    \"WebKitCSSMatrix\",\n    \"WebKitCSSRegionRule\",\n    \"WebKitCSSTransformValue\",\n    \"WebKitDataCue\",\n    \"WebKitGamepad\",\n    \"WebKitMediaKeyError\",\n    \"WebKitMediaKeyMessageEvent\",\n    \"WebKitMediaKeySession\",\n    \"WebKitMediaKeys\",\n    \"WebKitMediaSource\",\n    \"WebKitMutationObserver\",\n    \"WebKitNamespace\",\n    \"WebKitPlaybackTargetAvailabilityEvent\",\n    \"WebKitPoint\",\n    \"WebKitShadowRoot\",\n    \"WebKitSourceBuffer\",\n    \"WebKitSourceBufferList\",\n    \"WebKitTransitionEvent\",\n    \"WebSocket\",\n    \"WheelEvent\",\n    \"Window\",\n    \"Worker\",\n    \"XMLDocument\",\n    \"XMLHttpRequest\",\n    \"XMLHttpRequestEventTarget\",\n    \"XMLHttpRequestException\",\n    \"XMLHttpRequestProgressEvent\",\n    \"XMLHttpRequestUpload\",\n    \"XMLSerializer\",\n    \"XMLStylesheetProcessingInstruction\",\n    \"XPathEvaluator\",\n    \"XPathException\",\n    \"XPathExpression\",\n    \"XPathNSResolver\",\n    \"XPathResult\",\n    \"XSLTProcessor\",\n    \"ZERO\",\n    \"_XD0M_\",\n    \"_YD0M_\",\n    \"__defineGetter__\",\n    \"__defineSetter__\",\n    \"__lookupGetter__\",\n    \"__lookupSetter__\",\n    \"__opera\",\n    \"__proto__\",\n    \"_browserjsran\",\n    \"a\",\n    \"aLink\",\n    \"abbr\",\n    \"abort\",\n    \"abs\",\n    \"absolute\",\n    \"acceleration\",\n    \"accelerationIncludingGravity\",\n    \"accelerator\",\n    \"accept\",\n    \"acceptCharset\",\n    \"acceptNode\",\n    \"accessKey\",\n    \"accessKeyLabel\",\n    \"accuracy\",\n    \"acos\",\n    \"acosh\",\n    \"action\",\n    \"actionURL\",\n    \"active\",\n    \"activeCues\",\n    \"activeElement\",\n    \"activeSourceBuffers\",\n    \"activeSourceCount\",\n    \"activeTexture\",\n    \"add\",\n    \"addBehavior\",\n    \"addCandidate\",\n    \"addColorStop\",\n    \"addCue\",\n    \"addElement\",\n    \"addEventListener\",\n    \"addFilter\",\n    \"addFromString\",\n    \"addFromUri\",\n    \"addIceCandidate\",\n    \"addImport\",\n    \"addListener\",\n    \"addNamed\",\n    \"addPageRule\",\n    \"addPath\",\n    \"addPointer\",\n    \"addRange\",\n    \"addRegion\",\n    \"addRule\",\n    \"addSearchEngine\",\n    \"addSourceBuffer\",\n    \"addStream\",\n    \"addTextTrack\",\n    \"addTrack\",\n    \"addWakeLockListener\",\n    \"addedNodes\",\n    \"additionalName\",\n    \"additiveSymbols\",\n    \"addons\",\n    \"adoptNode\",\n    \"adr\",\n    \"advance\",\n    \"alert\",\n    \"algorithm\",\n    \"align\",\n    \"align-content\",\n    \"align-items\",\n    \"align-self\",\n    \"alignContent\",\n    \"alignItems\",\n    \"alignSelf\",\n    \"alignmentBaseline\",\n    \"alinkColor\",\n    \"all\",\n    \"allowFullscreen\",\n    \"allowedDirections\",\n    \"alpha\",\n    \"alt\",\n    \"altGraphKey\",\n    \"altHtml\",\n    \"altKey\",\n    \"altLeft\",\n    \"altitude\",\n    \"altitudeAccuracy\",\n    \"amplitude\",\n    \"ancestorOrigins\",\n    \"anchor\",\n    \"anchorNode\",\n    \"anchorOffset\",\n    \"anchors\",\n    \"angle\",\n    \"animVal\",\n    \"animate\",\n    \"animatedInstanceRoot\",\n    \"animatedNormalizedPathSegList\",\n    \"animatedPathSegList\",\n    \"animatedPoints\",\n    \"animation\",\n    \"animation-delay\",\n    \"animation-direction\",\n    \"animation-duration\",\n    \"animation-fill-mode\",\n    \"animation-iteration-count\",\n    \"animation-name\",\n    \"animation-play-state\",\n    \"animation-timing-function\",\n    \"animationDelay\",\n    \"animationDirection\",\n    \"animationDuration\",\n    \"animationFillMode\",\n    \"animationIterationCount\",\n    \"animationName\",\n    \"animationPlayState\",\n    \"animationStartTime\",\n    \"animationTimingFunction\",\n    \"animationsPaused\",\n    \"anniversary\",\n    \"app\",\n    \"appCodeName\",\n    \"appMinorVersion\",\n    \"appName\",\n    \"appNotifications\",\n    \"appVersion\",\n    \"append\",\n    \"appendBuffer\",\n    \"appendChild\",\n    \"appendData\",\n    \"appendItem\",\n    \"appendMedium\",\n    \"appendNamed\",\n    \"appendRule\",\n    \"appendStream\",\n    \"appendWindowEnd\",\n    \"appendWindowStart\",\n    \"applets\",\n    \"applicationCache\",\n    \"apply\",\n    \"applyElement\",\n    \"arc\",\n    \"arcTo\",\n    \"archive\",\n    \"areas\",\n    \"arguments\",\n    \"arrayBuffer\",\n    \"asin\",\n    \"asinh\",\n    \"assert\",\n    \"assign\",\n    \"async\",\n    \"atEnd\",\n    \"atan\",\n    \"atan2\",\n    \"atanh\",\n    \"atob\",\n    \"attachEvent\",\n    \"attachShader\",\n    \"attachments\",\n    \"attack\",\n    \"attrChange\",\n    \"attrName\",\n    \"attributeName\",\n    \"attributeNamespace\",\n    \"attributes\",\n    \"audioTracks\",\n    \"autoIncrement\",\n    \"autobuffer\",\n    \"autocapitalize\",\n    \"autocomplete\",\n    \"autocorrect\",\n    \"autofocus\",\n    \"autoplay\",\n    \"availHeight\",\n    \"availLeft\",\n    \"availTop\",\n    \"availWidth\",\n    \"availability\",\n    \"available\",\n    \"aversion\",\n    \"axes\",\n    \"axis\",\n    \"azimuth\",\n    \"b\",\n    \"back\",\n    \"backface-visibility\",\n    \"backfaceVisibility\",\n    \"background\",\n    \"background-attachment\",\n    \"background-blend-mode\",\n    \"background-clip\",\n    \"background-color\",\n    \"background-image\",\n    \"background-origin\",\n    \"background-position\",\n    \"background-repeat\",\n    \"background-size\",\n    \"backgroundAttachment\",\n    \"backgroundBlendMode\",\n    \"backgroundClip\",\n    \"backgroundColor\",\n    \"backgroundImage\",\n    \"backgroundOrigin\",\n    \"backgroundPosition\",\n    \"backgroundPositionX\",\n    \"backgroundPositionY\",\n    \"backgroundRepeat\",\n    \"backgroundSize\",\n    \"badInput\",\n    \"balance\",\n    \"baseFrequencyX\",\n    \"baseFrequencyY\",\n    \"baseNode\",\n    \"baseOffset\",\n    \"baseURI\",\n    \"baseVal\",\n    \"baselineShift\",\n    \"battery\",\n    \"bday\",\n    \"beginElement\",\n    \"beginElementAt\",\n    \"beginPath\",\n    \"behavior\",\n    \"behaviorCookie\",\n    \"behaviorPart\",\n    \"behaviorUrns\",\n    \"beta\",\n    \"bezierCurveTo\",\n    \"bgColor\",\n    \"bgProperties\",\n    \"bias\",\n    \"big\",\n    \"binaryType\",\n    \"bind\",\n    \"bindAttribLocation\",\n    \"bindBuffer\",\n    \"bindFramebuffer\",\n    \"bindRenderbuffer\",\n    \"bindTexture\",\n    \"blendColor\",\n    \"blendEquation\",\n    \"blendEquationSeparate\",\n    \"blendFunc\",\n    \"blendFuncSeparate\",\n    \"blink\",\n    \"blob\",\n    \"blockDirection\",\n    \"blue\",\n    \"blur\",\n    \"body\",\n    \"bodyUsed\",\n    \"bold\",\n    \"bookmarks\",\n    \"booleanValue\",\n    \"border\",\n    \"border-bottom\",\n    \"border-bottom-color\",\n    \"border-bottom-left-radius\",\n    \"border-bottom-right-radius\",\n    \"border-bottom-style\",\n    \"border-bottom-width\",\n    \"border-collapse\",\n    \"border-color\",\n    \"border-image\",\n    \"border-image-outset\",\n    \"border-image-repeat\",\n    \"border-image-slice\",\n    \"border-image-source\",\n    \"border-image-width\",\n    \"border-left\",\n    \"border-left-color\",\n    \"border-left-style\",\n    \"border-left-width\",\n    \"border-radius\",\n    \"border-right\",\n    \"border-right-color\",\n    \"border-right-style\",\n    \"border-right-width\",\n    \"border-spacing\",\n    \"border-style\",\n    \"border-top\",\n    \"border-top-color\",\n    \"border-top-left-radius\",\n    \"border-top-right-radius\",\n    \"border-top-style\",\n    \"border-top-width\",\n    \"border-width\",\n    \"borderBottom\",\n    \"borderBottomColor\",\n    \"borderBottomLeftRadius\",\n    \"borderBottomRightRadius\",\n    \"borderBottomStyle\",\n    \"borderBottomWidth\",\n    \"borderCollapse\",\n    \"borderColor\",\n    \"borderColorDark\",\n    \"borderColorLight\",\n    \"borderImage\",\n    \"borderImageOutset\",\n    \"borderImageRepeat\",\n    \"borderImageSlice\",\n    \"borderImageSource\",\n    \"borderImageWidth\",\n    \"borderLeft\",\n    \"borderLeftColor\",\n    \"borderLeftStyle\",\n    \"borderLeftWidth\",\n    \"borderRadius\",\n    \"borderRight\",\n    \"borderRightColor\",\n    \"borderRightStyle\",\n    \"borderRightWidth\",\n    \"borderSpacing\",\n    \"borderStyle\",\n    \"borderTop\",\n    \"borderTopColor\",\n    \"borderTopLeftRadius\",\n    \"borderTopRightRadius\",\n    \"borderTopStyle\",\n    \"borderTopWidth\",\n    \"borderWidth\",\n    \"bottom\",\n    \"bottomMargin\",\n    \"bound\",\n    \"boundElements\",\n    \"boundingClientRect\",\n    \"boundingHeight\",\n    \"boundingLeft\",\n    \"boundingTop\",\n    \"boundingWidth\",\n    \"bounds\",\n    \"box-decoration-break\",\n    \"box-shadow\",\n    \"box-sizing\",\n    \"boxDecorationBreak\",\n    \"boxShadow\",\n    \"boxSizing\",\n    \"breakAfter\",\n    \"breakBefore\",\n    \"breakInside\",\n    \"browserLanguage\",\n    \"btoa\",\n    \"bubbles\",\n    \"buffer\",\n    \"bufferData\",\n    \"bufferDepth\",\n    \"bufferSize\",\n    \"bufferSubData\",\n    \"buffered\",\n    \"bufferedAmount\",\n    \"buildID\",\n    \"buildNumber\",\n    \"button\",\n    \"buttonID\",\n    \"buttons\",\n    \"byteLength\",\n    \"byteOffset\",\n    \"c\",\n    \"call\",\n    \"caller\",\n    \"canBeFormatted\",\n    \"canBeMounted\",\n    \"canBeShared\",\n    \"canHaveChildren\",\n    \"canHaveHTML\",\n    \"canPlayType\",\n    \"cancel\",\n    \"cancelAnimationFrame\",\n    \"cancelBubble\",\n    \"cancelScheduledValues\",\n    \"cancelable\",\n    \"candidate\",\n    \"canvas\",\n    \"caption\",\n    \"caption-side\",\n    \"captionSide\",\n    \"captureEvents\",\n    \"captureStackTrace\",\n    \"caretPositionFromPoint\",\n    \"caretRangeFromPoint\",\n    \"cast\",\n    \"catch\",\n    \"category\",\n    \"cbrt\",\n    \"cd\",\n    \"ceil\",\n    \"cellIndex\",\n    \"cellPadding\",\n    \"cellSpacing\",\n    \"cells\",\n    \"ch\",\n    \"chOff\",\n    \"chain\",\n    \"challenge\",\n    \"changedTouches\",\n    \"channel\",\n    \"channelCount\",\n    \"channelCountMode\",\n    \"channelInterpretation\",\n    \"char\",\n    \"charAt\",\n    \"charCode\",\n    \"charCodeAt\",\n    \"charIndex\",\n    \"characterSet\",\n    \"charging\",\n    \"chargingTime\",\n    \"charset\",\n    \"checkEnclosure\",\n    \"checkFramebufferStatus\",\n    \"checkIntersection\",\n    \"checkValidity\",\n    \"checked\",\n    \"childElementCount\",\n    \"childNodes\",\n    \"children\",\n    \"chrome\",\n    \"ciphertext\",\n    \"cite\",\n    \"classList\",\n    \"className\",\n    \"classid\",\n    \"clear\",\n    \"clearAttributes\",\n    \"clearColor\",\n    \"clearData\",\n    \"clearDepth\",\n    \"clearImmediate\",\n    \"clearInterval\",\n    \"clearMarks\",\n    \"clearMeasures\",\n    \"clearParameters\",\n    \"clearRect\",\n    \"clearResourceTimings\",\n    \"clearShadow\",\n    \"clearStencil\",\n    \"clearTimeout\",\n    \"clearWatch\",\n    \"click\",\n    \"clickCount\",\n    \"clientHeight\",\n    \"clientInformation\",\n    \"clientLeft\",\n    \"clientRect\",\n    \"clientRects\",\n    \"clientTop\",\n    \"clientWidth\",\n    \"clientX\",\n    \"clientY\",\n    \"clip\",\n    \"clip-path\",\n    \"clip-rule\",\n    \"clipBottom\",\n    \"clipLeft\",\n    \"clipPath\",\n    \"clipPathUnits\",\n    \"clipRight\",\n    \"clipRule\",\n    \"clipTop\",\n    \"clipboardData\",\n    \"clone\",\n    \"cloneContents\",\n    \"cloneNode\",\n    \"cloneRange\",\n    \"close\",\n    \"closePath\",\n    \"closed\",\n    \"closest\",\n    \"clz\",\n    \"clz32\",\n    \"cmp\",\n    \"code\",\n    \"codeBase\",\n    \"codePointAt\",\n    \"codeType\",\n    \"colSpan\",\n    \"collapse\",\n    \"collapseToEnd\",\n    \"collapseToStart\",\n    \"collapsed\",\n    \"collect\",\n    \"colno\",\n    \"color\",\n    \"color-interpolation\",\n    \"color-interpolation-filters\",\n    \"colorDepth\",\n    \"colorInterpolation\",\n    \"colorInterpolationFilters\",\n    \"colorMask\",\n    \"colorType\",\n    \"cols\",\n    \"columnCount\",\n    \"columnFill\",\n    \"columnGap\",\n    \"columnNumber\",\n    \"columnRule\",\n    \"columnRuleColor\",\n    \"columnRuleStyle\",\n    \"columnRuleWidth\",\n    \"columnSpan\",\n    \"columnWidth\",\n    \"columns\",\n    \"command\",\n    \"commitPreferences\",\n    \"commonAncestorContainer\",\n    \"compact\",\n    \"compareBoundaryPoints\",\n    \"compareDocumentPosition\",\n    \"compareEndPoints\",\n    \"compareNode\",\n    \"comparePoint\",\n    \"compatMode\",\n    \"compatible\",\n    \"compile\",\n    \"compileShader\",\n    \"complete\",\n    \"componentFromPoint\",\n    \"compositionEndOffset\",\n    \"compositionStartOffset\",\n    \"compressedTexImage2D\",\n    \"compressedTexSubImage2D\",\n    \"concat\",\n    \"conditionText\",\n    \"coneInnerAngle\",\n    \"coneOuterAngle\",\n    \"coneOuterGain\",\n    \"confirm\",\n    \"confirmComposition\",\n    \"confirmSiteSpecificTrackingException\",\n    \"confirmWebWideTrackingException\",\n    \"connect\",\n    \"connectEnd\",\n    \"connectStart\",\n    \"connected\",\n    \"connection\",\n    \"connectionSpeed\",\n    \"console\",\n    \"consolidate\",\n    \"constrictionActive\",\n    \"constructor\",\n    \"contactID\",\n    \"contains\",\n    \"containsNode\",\n    \"content\",\n    \"contentDocument\",\n    \"contentEditable\",\n    \"contentOverflow\",\n    \"contentScriptType\",\n    \"contentStyleType\",\n    \"contentType\",\n    \"contentWindow\",\n    \"context\",\n    \"contextMenu\",\n    \"contextmenu\",\n    \"continue\",\n    \"continuous\",\n    \"control\",\n    \"controller\",\n    \"controls\",\n    \"convertToSpecifiedUnits\",\n    \"cookie\",\n    \"cookieEnabled\",\n    \"coords\",\n    \"copyFromChannel\",\n    \"copyTexImage2D\",\n    \"copyTexSubImage2D\",\n    \"copyToChannel\",\n    \"copyWithin\",\n    \"correspondingElement\",\n    \"correspondingUseElement\",\n    \"cos\",\n    \"cosh\",\n    \"count\",\n    \"counter-increment\",\n    \"counter-reset\",\n    \"counterIncrement\",\n    \"counterReset\",\n    \"cpuClass\",\n    \"cpuSleepAllowed\",\n    \"create\",\n    \"createAnalyser\",\n    \"createAnswer\",\n    \"createAttribute\",\n    \"createAttributeNS\",\n    \"createBiquadFilter\",\n    \"createBuffer\",\n    \"createBufferSource\",\n    \"createCDATASection\",\n    \"createCSSStyleSheet\",\n    \"createCaption\",\n    \"createChannelMerger\",\n    \"createChannelSplitter\",\n    \"createComment\",\n    \"createContextualFragment\",\n    \"createControlRange\",\n    \"createConvolver\",\n    \"createDTMFSender\",\n    \"createDataChannel\",\n    \"createDelay\",\n    \"createDelayNode\",\n    \"createDocument\",\n    \"createDocumentFragment\",\n    \"createDocumentType\",\n    \"createDynamicsCompressor\",\n    \"createElement\",\n    \"createElementNS\",\n    \"createEntityReference\",\n    \"createEvent\",\n    \"createEventObject\",\n    \"createExpression\",\n    \"createFramebuffer\",\n    \"createFunction\",\n    \"createGain\",\n    \"createGainNode\",\n    \"createHTMLDocument\",\n    \"createImageBitmap\",\n    \"createImageData\",\n    \"createIndex\",\n    \"createJavaScriptNode\",\n    \"createLinearGradient\",\n    \"createMediaElementSource\",\n    \"createMediaKeys\",\n    \"createMediaStreamDestination\",\n    \"createMediaStreamSource\",\n    \"createMutableFile\",\n    \"createNSResolver\",\n    \"createNodeIterator\",\n    \"createNotification\",\n    \"createObjectStore\",\n    \"createObjectURL\",\n    \"createOffer\",\n    \"createOscillator\",\n    \"createPanner\",\n    \"createPattern\",\n    \"createPeriodicWave\",\n    \"createPopup\",\n    \"createProcessingInstruction\",\n    \"createProgram\",\n    \"createRadialGradient\",\n    \"createRange\",\n    \"createRangeCollection\",\n    \"createRenderbuffer\",\n    \"createSVGAngle\",\n    \"createSVGLength\",\n    \"createSVGMatrix\",\n    \"createSVGNumber\",\n    \"createSVGPathSegArcAbs\",\n    \"createSVGPathSegArcRel\",\n    \"createSVGPathSegClosePath\",\n    \"createSVGPathSegCurvetoCubicAbs\",\n    \"createSVGPathSegCurvetoCubicRel\",\n    \"createSVGPathSegCurvetoCubicSmoothAbs\",\n    \"createSVGPathSegCurvetoCubicSmoothRel\",\n    \"createSVGPathSegCurvetoQuadraticAbs\",\n    \"createSVGPathSegCurvetoQuadraticRel\",\n    \"createSVGPathSegCurvetoQuadraticSmoothAbs\",\n    \"createSVGPathSegCurvetoQuadraticSmoothRel\",\n    \"createSVGPathSegLinetoAbs\",\n    \"createSVGPathSegLinetoHorizontalAbs\",\n    \"createSVGPathSegLinetoHorizontalRel\",\n    \"createSVGPathSegLinetoRel\",\n    \"createSVGPathSegLinetoVerticalAbs\",\n    \"createSVGPathSegLinetoVerticalRel\",\n    \"createSVGPathSegMovetoAbs\",\n    \"createSVGPathSegMovetoRel\",\n    \"createSVGPoint\",\n    \"createSVGRect\",\n    \"createSVGTransform\",\n    \"createSVGTransformFromMatrix\",\n    \"createScriptProcessor\",\n    \"createSession\",\n    \"createShader\",\n    \"createShadowRoot\",\n    \"createStereoPanner\",\n    \"createStyleSheet\",\n    \"createTBody\",\n    \"createTFoot\",\n    \"createTHead\",\n    \"createTextNode\",\n    \"createTextRange\",\n    \"createTexture\",\n    \"createTouch\",\n    \"createTouchList\",\n    \"createTreeWalker\",\n    \"createWaveShaper\",\n    \"creationTime\",\n    \"crossOrigin\",\n    \"crypto\",\n    \"csi\",\n    \"cssFloat\",\n    \"cssRules\",\n    \"cssText\",\n    \"cssValueType\",\n    \"ctrlKey\",\n    \"ctrlLeft\",\n    \"cues\",\n    \"cullFace\",\n    \"currentNode\",\n    \"currentPage\",\n    \"currentScale\",\n    \"currentScript\",\n    \"currentSrc\",\n    \"currentState\",\n    \"currentStyle\",\n    \"currentTarget\",\n    \"currentTime\",\n    \"currentTranslate\",\n    \"currentView\",\n    \"cursor\",\n    \"curve\",\n    \"customError\",\n    \"cx\",\n    \"cy\",\n    \"d\",\n    \"data\",\n    \"dataFld\",\n    \"dataFormatAs\",\n    \"dataPageSize\",\n    \"dataSrc\",\n    \"dataTransfer\",\n    \"database\",\n    \"dataset\",\n    \"dateTime\",\n    \"db\",\n    \"debug\",\n    \"debuggerEnabled\",\n    \"declare\",\n    \"decode\",\n    \"decodeAudioData\",\n    \"decodingInfo\",\n    \"decodeURI\",\n    \"decodeURIComponent\",\n    \"decrypt\",\n    \"default\",\n    \"defaultCharset\",\n    \"defaultChecked\",\n    \"defaultMuted\",\n    \"defaultPlaybackRate\",\n    \"defaultPrevented\",\n    \"defaultSelected\",\n    \"defaultStatus\",\n    \"defaultURL\",\n    \"defaultValue\",\n    \"defaultView\",\n    \"defaultstatus\",\n    \"defer\",\n    \"defineMagicFunction\",\n    \"defineMagicVariable\",\n    \"defineProperties\",\n    \"defineProperty\",\n    \"delayTime\",\n    \"delete\",\n    \"deleteBuffer\",\n    \"deleteCaption\",\n    \"deleteCell\",\n    \"deleteContents\",\n    \"deleteData\",\n    \"deleteDatabase\",\n    \"deleteFramebuffer\",\n    \"deleteFromDocument\",\n    \"deleteIndex\",\n    \"deleteMedium\",\n    \"deleteObjectStore\",\n    \"deleteProgram\",\n    \"deleteRenderbuffer\",\n    \"deleteRow\",\n    \"deleteRule\",\n    \"deleteShader\",\n    \"deleteTFoot\",\n    \"deleteTHead\",\n    \"deleteTexture\",\n    \"deliverChangeRecords\",\n    \"delivery\",\n    \"deliveryInfo\",\n    \"deliveryStatus\",\n    \"deliveryTimestamp\",\n    \"delta\",\n    \"deltaMode\",\n    \"deltaX\",\n    \"deltaY\",\n    \"deltaZ\",\n    \"depthFunc\",\n    \"depthMask\",\n    \"depthRange\",\n    \"deriveBits\",\n    \"deriveKey\",\n    \"description\",\n    \"deselectAll\",\n    \"designMode\",\n    \"destination\",\n    \"destinationURL\",\n    \"detach\",\n    \"detachEvent\",\n    \"detachShader\",\n    \"detail\",\n    \"detune\",\n    \"devicePixelRatio\",\n    \"deviceXDPI\",\n    \"deviceYDPI\",\n    \"diffuseConstant\",\n    \"digest\",\n    \"dimensions\",\n    \"dir\",\n    \"dirName\",\n    \"direction\",\n    \"dirxml\",\n    \"disable\",\n    \"disableVertexAttribArray\",\n    \"disabled\",\n    \"dischargingTime\",\n    \"disconnect\",\n    \"dispatchEvent\",\n    \"display\",\n    \"distanceModel\",\n    \"divisor\",\n    \"djsapi\",\n    \"djsproxy\",\n    \"doImport\",\n    \"doNotTrack\",\n    \"doScroll\",\n    \"doctype\",\n    \"document\",\n    \"documentElement\",\n    \"documentMode\",\n    \"documentURI\",\n    \"dolphin\",\n    \"dolphinGameCenter\",\n    \"dolphininfo\",\n    \"dolphinmeta\",\n    \"domComplete\",\n    \"domContentLoadedEventEnd\",\n    \"domContentLoadedEventStart\",\n    \"domInteractive\",\n    \"domLoading\",\n    \"domain\",\n    \"domainLookupEnd\",\n    \"domainLookupStart\",\n    \"dominant-baseline\",\n    \"dominantBaseline\",\n    \"done\",\n    \"dopplerFactor\",\n    \"download\",\n    \"dragDrop\",\n    \"draggable\",\n    \"drawArrays\",\n    \"drawArraysInstancedANGLE\",\n    \"drawCustomFocusRing\",\n    \"drawElements\",\n    \"drawElementsInstancedANGLE\",\n    \"drawFocusIfNeeded\",\n    \"drawImage\",\n    \"drawImageFromRect\",\n    \"drawSystemFocusRing\",\n    \"drawingBufferHeight\",\n    \"drawingBufferWidth\",\n    \"dropEffect\",\n    \"droppedVideoFrames\",\n    \"dropzone\",\n    \"dump\",\n    \"duplicate\",\n    \"duration\",\n    \"dvname\",\n    \"dvnum\",\n    \"dx\",\n    \"dy\",\n    \"dynsrc\",\n    \"e\",\n    \"edgeMode\",\n    \"effectAllowed\",\n    \"elapsedTime\",\n    \"elementFromPoint\",\n    \"elements\",\n    \"elevation\",\n    \"ellipse\",\n    \"email\",\n    \"embeds\",\n    \"empty\",\n    \"empty-cells\",\n    \"emptyCells\",\n    \"enable\",\n    \"enableBackground\",\n    \"enableStyleSheetsForSet\",\n    \"enableVertexAttribArray\",\n    \"enabled\",\n    \"enabledPlugin\",\n    \"encode\",\n    \"encodeURI\",\n    \"encodeURIComponent\",\n    \"encoding\",\n    \"encrypt\",\n    \"enctype\",\n    \"end\",\n    \"endContainer\",\n    \"endElement\",\n    \"endElementAt\",\n    \"endOfStream\",\n    \"endOffset\",\n    \"endTime\",\n    \"ended\",\n    \"endsWith\",\n    \"entities\",\n    \"entries\",\n    \"entryType\",\n    \"enumerate\",\n    \"enumerateEditable\",\n    \"error\",\n    \"errorCode\",\n    \"escape\",\n    \"eval\",\n    \"evaluate\",\n    \"event\",\n    \"eventPhase\",\n    \"every\",\n    \"exception\",\n    \"exec\",\n    \"execCommand\",\n    \"execCommandShowHelp\",\n    \"execScript\",\n    \"exitFullscreen\",\n    \"exitPointerLock\",\n    \"exp\",\n    \"expand\",\n    \"expandEntityReferences\",\n    \"expando\",\n    \"expansion\",\n    \"expiryDate\",\n    \"explicitOriginalTarget\",\n    \"expm1\",\n    \"exponent\",\n    \"exponentialRampToValueAtTime\",\n    \"exportKey\",\n    \"extend\",\n    \"extensions\",\n    \"extentNode\",\n    \"extentOffset\",\n    \"external\",\n    \"externalResourcesRequired\",\n    \"extractContents\",\n    \"extractable\",\n    \"f\",\n    \"face\",\n    \"factoryReset\",\n    \"fallback\",\n    \"familyName\",\n    \"farthestViewportElement\",\n    \"fastSeek\",\n    \"fatal\",\n    \"fetch\",\n    \"fetchStart\",\n    \"fftSize\",\n    \"fgColor\",\n    \"fileCreatedDate\",\n    \"fileHandle\",\n    \"fileModifiedDate\",\n    \"fileName\",\n    \"fileSize\",\n    \"fileUpdatedDate\",\n    \"filename\",\n    \"files\",\n    \"fill\",\n    \"fill-opacity\",\n    \"fill-rule\",\n    \"fillOpacity\",\n    \"fillRect\",\n    \"fillRule\",\n    \"fillStyle\",\n    \"fillText\",\n    \"filter\",\n    \"filterResX\",\n    \"filterResY\",\n    \"filterUnits\",\n    \"filters\",\n    \"finally\",\n    \"find\",\n    \"findIndex\",\n    \"findRule\",\n    \"findText\",\n    \"finish\",\n    \"fireEvent\",\n    \"firstChild\",\n    \"firstElementChild\",\n    \"firstPage\",\n    \"fixed\",\n    \"flex\",\n    \"flex-basis\",\n    \"flex-direction\",\n    \"flex-flow\",\n    \"flex-grow\",\n    \"flex-shrink\",\n    \"flex-wrap\",\n    \"flexBasis\",\n    \"flexDirection\",\n    \"flexFlow\",\n    \"flexGrow\",\n    \"flexShrink\",\n    \"flexWrap\",\n    \"flipX\",\n    \"flipY\",\n    \"float\",\n    \"flood-color\",\n    \"flood-opacity\",\n    \"floodColor\",\n    \"floodOpacity\",\n    \"floor\",\n    \"flush\",\n    \"focus\",\n    \"focusNode\",\n    \"focusOffset\",\n    \"font\",\n    \"font-family\",\n    \"font-feature-settings\",\n    \"font-kerning\",\n    \"font-language-override\",\n    \"font-size\",\n    \"font-size-adjust\",\n    \"font-stretch\",\n    \"font-style\",\n    \"font-synthesis\",\n    \"font-variant\",\n    \"font-variant-alternates\",\n    \"font-variant-caps\",\n    \"font-variant-east-asian\",\n    \"font-variant-ligatures\",\n    \"font-variant-numeric\",\n    \"font-variant-position\",\n    \"font-weight\",\n    \"fontFamily\",\n    \"fontFeatureSettings\",\n    \"fontKerning\",\n    \"fontLanguageOverride\",\n    \"fontSize\",\n    \"fontSizeAdjust\",\n    \"fontSmoothingEnabled\",\n    \"fontStretch\",\n    \"fontStyle\",\n    \"fontSynthesis\",\n    \"fontVariant\",\n    \"fontVariantAlternates\",\n    \"fontVariantCaps\",\n    \"fontVariantEastAsian\",\n    \"fontVariantLigatures\",\n    \"fontVariantNumeric\",\n    \"fontVariantPosition\",\n    \"fontWeight\",\n    \"fontcolor\",\n    \"fonts\",\n    \"fontsize\",\n    \"for\",\n    \"forEach\",\n    \"forceRedraw\",\n    \"form\",\n    \"formAction\",\n    \"formEnctype\",\n    \"formMethod\",\n    \"formNoValidate\",\n    \"formTarget\",\n    \"format\",\n    \"forms\",\n    \"forward\",\n    \"fr\",\n    \"frame\",\n    \"frameBorder\",\n    \"frameElement\",\n    \"frameSpacing\",\n    \"framebufferRenderbuffer\",\n    \"framebufferTexture2D\",\n    \"frames\",\n    \"freeSpace\",\n    \"freeze\",\n    \"frequency\",\n    \"frequencyBinCount\",\n    \"from\",\n    \"fromCharCode\",\n    \"fromCodePoint\",\n    \"fromElement\",\n    \"frontFace\",\n    \"fround\",\n    \"fullScreen\",\n    \"fullscreenElement\",\n    \"fullscreenEnabled\",\n    \"fx\",\n    \"fy\",\n    \"gain\",\n    \"gamepad\",\n    \"gamma\",\n    \"genderIdentity\",\n    \"generateKey\",\n    \"generateMipmap\",\n    \"generateRequest\",\n    \"geolocation\",\n    \"gestureObject\",\n    \"get\",\n    \"getActiveAttrib\",\n    \"getActiveUniform\",\n    \"getAdjacentText\",\n    \"getAll\",\n    \"getAllResponseHeaders\",\n    \"getAsFile\",\n    \"getAsString\",\n    \"getAttachedShaders\",\n    \"getAttribLocation\",\n    \"getAttribute\",\n    \"getAttributeNS\",\n    \"getAttributeNode\",\n    \"getAttributeNodeNS\",\n    \"getAudioTracks\",\n    \"getBBox\",\n    \"getBattery\",\n    \"getBlob\",\n    \"getBookmark\",\n    \"getBoundingClientRect\",\n    \"getBufferParameter\",\n    \"getByteFrequencyData\",\n    \"getByteTimeDomainData\",\n    \"getCSSCanvasContext\",\n    \"getCTM\",\n    \"getCandidateWindowClientRect\",\n    \"getChannelData\",\n    \"getCharNumAtPosition\",\n    \"getClientRect\",\n    \"getClientRects\",\n    \"getCompositionAlternatives\",\n    \"getComputedStyle\",\n    \"getComputedTextLength\",\n    \"getConfiguration\",\n    \"getContext\",\n    \"getContextAttributes\",\n    \"getCounterValue\",\n    \"getCueAsHTML\",\n    \"getCueById\",\n    \"getCurrentPosition\",\n    \"getCurrentTime\",\n    \"getData\",\n    \"getDatabaseNames\",\n    \"getDate\",\n    \"getDay\",\n    \"getDefaultComputedStyle\",\n    \"getDestinationInsertionPoints\",\n    \"getDistributedNodes\",\n    \"getEditable\",\n    \"getElementById\",\n    \"getElementsByClassName\",\n    \"getElementsByName\",\n    \"getElementsByTagName\",\n    \"getElementsByTagNameNS\",\n    \"getEnclosureList\",\n    \"getEndPositionOfChar\",\n    \"getEntries\",\n    \"getEntriesByName\",\n    \"getEntriesByType\",\n    \"getError\",\n    \"getExtension\",\n    \"getExtentOfChar\",\n    \"getFeature\",\n    \"getFile\",\n    \"getFloat32\",\n    \"getFloat64\",\n    \"getFloatFrequencyData\",\n    \"getFloatTimeDomainData\",\n    \"getFloatValue\",\n    \"getFramebufferAttachmentParameter\",\n    \"getFrequencyResponse\",\n    \"getFullYear\",\n    \"getGamepads\",\n    \"getHours\",\n    \"getImageData\",\n    \"getInt16\",\n    \"getInt32\",\n    \"getInt8\",\n    \"getIntersectionList\",\n    \"getItem\",\n    \"getItems\",\n    \"getKey\",\n    \"getLineDash\",\n    \"getLocalStreams\",\n    \"getMarks\",\n    \"getMatchedCSSRules\",\n    \"getMeasures\",\n    \"getMetadata\",\n    \"getMilliseconds\",\n    \"getMinutes\",\n    \"getModifierState\",\n    \"getMonth\",\n    \"getNamedItem\",\n    \"getNamedItemNS\",\n    \"getNotifier\",\n    \"getNumberOfChars\",\n    \"getOverrideHistoryNavigationMode\",\n    \"getOverrideStyle\",\n    \"getOwnPropertyDescriptor\",\n    \"getOwnPropertyNames\",\n    \"getOwnPropertySymbols\",\n    \"getParameter\",\n    \"getPathSegAtLength\",\n    \"getPointAtLength\",\n    \"getPreference\",\n    \"getPreferenceDefault\",\n    \"getPresentationAttribute\",\n    \"getPreventDefault\",\n    \"getProgramInfoLog\",\n    \"getProgramParameter\",\n    \"getPropertyCSSValue\",\n    \"getPropertyPriority\",\n    \"getPropertyShorthand\",\n    \"getPropertyValue\",\n    \"getPrototypeOf\",\n    \"getRGBColorValue\",\n    \"getRandomValues\",\n    \"getRangeAt\",\n    \"getReceivers\",\n    \"getRectValue\",\n    \"getRegistration\",\n    \"getRemoteStreams\",\n    \"getRenderbufferParameter\",\n    \"getResponseHeader\",\n    \"getRoot\",\n    \"getRotationOfChar\",\n    \"getSVGDocument\",\n    \"getScreenCTM\",\n    \"getSeconds\",\n    \"getSelection\",\n    \"getSenders\",\n    \"getShaderInfoLog\",\n    \"getShaderParameter\",\n    \"getShaderPrecisionFormat\",\n    \"getShaderSource\",\n    \"getSimpleDuration\",\n    \"getSiteIcons\",\n    \"getSources\",\n    \"getSpeculativeParserUrls\",\n    \"getStartPositionOfChar\",\n    \"getStartTime\",\n    \"getStats\",\n    \"getStorageUpdates\",\n    \"getStreamById\",\n    \"getStringValue\",\n    \"getSubStringLength\",\n    \"getSubscription\",\n    \"getSupportedExtensions\",\n    \"getTexParameter\",\n    \"getTime\",\n    \"getTimezoneOffset\",\n    \"getTotalLength\",\n    \"getTrackById\",\n    \"getTracks\",\n    \"getTransformToElement\",\n    \"getUTCDate\",\n    \"getUTCDay\",\n    \"getUTCFullYear\",\n    \"getUTCHours\",\n    \"getUTCMilliseconds\",\n    \"getUTCMinutes\",\n    \"getUTCMonth\",\n    \"getUTCSeconds\",\n    \"getUint16\",\n    \"getUint32\",\n    \"getUint8\",\n    \"getUniform\",\n    \"getUniformLocation\",\n    \"getUserMedia\",\n    \"getValues\",\n    \"getVarDate\",\n    \"getVariableValue\",\n    \"getVertexAttrib\",\n    \"getVertexAttribOffset\",\n    \"getVideoPlaybackQuality\",\n    \"getVideoTracks\",\n    \"getWakeLockState\",\n    \"getYear\",\n    \"givenName\",\n    \"global\",\n    \"globalAlpha\",\n    \"globalCompositeOperation\",\n    \"glyphOrientationHorizontal\",\n    \"glyphOrientationVertical\",\n    \"glyphRef\",\n    \"go\",\n    \"gradientTransform\",\n    \"gradientUnits\",\n    \"grammars\",\n    \"green\",\n    \"group\",\n    \"groupCollapsed\",\n    \"groupEnd\",\n    \"hardwareConcurrency\",\n    \"has\",\n    \"hasAttribute\",\n    \"hasAttributeNS\",\n    \"hasAttributes\",\n    \"hasChildNodes\",\n    \"hasComposition\",\n    \"hasExtension\",\n    \"hasFeature\",\n    \"hasFocus\",\n    \"hasLayout\",\n    \"hasOwnProperty\",\n    \"hash\",\n    \"head\",\n    \"headers\",\n    \"heading\",\n    \"height\",\n    \"hidden\",\n    \"hide\",\n    \"hideFocus\",\n    \"high\",\n    \"hint\",\n    \"history\",\n    \"honorificPrefix\",\n    \"honorificSuffix\",\n    \"horizontalOverflow\",\n    \"host\",\n    \"hostname\",\n    \"href\",\n    \"hreflang\",\n    \"hspace\",\n    \"html5TagCheckInerface\",\n    \"htmlFor\",\n    \"htmlText\",\n    \"httpEquiv\",\n    \"hwTimestamp\",\n    \"hypot\",\n    \"iccId\",\n    \"iceConnectionState\",\n    \"iceGatheringState\",\n    \"icon\",\n    \"id\",\n    \"identifier\",\n    \"identity\",\n    \"ignoreBOM\",\n    \"ignoreCase\",\n    \"image-orientation\",\n    \"image-rendering\",\n    \"imageOrientation\",\n    \"imageRendering\",\n    \"images\",\n    \"ime-mode\",\n    \"imeMode\",\n    \"implementation\",\n    \"importKey\",\n    \"importNode\",\n    \"importStylesheet\",\n    \"imports\",\n    \"impp\",\n    \"imul\",\n    \"in1\",\n    \"in2\",\n    \"inBandMetadataTrackDispatchType\",\n    \"inRange\",\n    \"includes\",\n    \"incremental\",\n    \"indeterminate\",\n    \"index\",\n    \"indexNames\",\n    \"indexOf\",\n    \"indexedDB\",\n    \"inertiaDestinationX\",\n    \"inertiaDestinationY\",\n    \"info\",\n    \"init\",\n    \"initAnimationEvent\",\n    \"initBeforeLoadEvent\",\n    \"initClipboardEvent\",\n    \"initCloseEvent\",\n    \"initCommandEvent\",\n    \"initCompositionEvent\",\n    \"initCustomEvent\",\n    \"initData\",\n    \"initDeviceMotionEvent\",\n    \"initDeviceOrientationEvent\",\n    \"initDragEvent\",\n    \"initErrorEvent\",\n    \"initEvent\",\n    \"initFocusEvent\",\n    \"initGestureEvent\",\n    \"initHashChangeEvent\",\n    \"initKeyEvent\",\n    \"initKeyboardEvent\",\n    \"initMSManipulationEvent\",\n    \"initMessageEvent\",\n    \"initMouseEvent\",\n    \"initMouseScrollEvent\",\n    \"initMouseWheelEvent\",\n    \"initMutationEvent\",\n    \"initNSMouseEvent\",\n    \"initOverflowEvent\",\n    \"initPageEvent\",\n    \"initPageTransitionEvent\",\n    \"initPointerEvent\",\n    \"initPopStateEvent\",\n    \"initProgressEvent\",\n    \"initScrollAreaEvent\",\n    \"initSimpleGestureEvent\",\n    \"initStorageEvent\",\n    \"initTextEvent\",\n    \"initTimeEvent\",\n    \"initTouchEvent\",\n    \"initTransitionEvent\",\n    \"initUIEvent\",\n    \"initWebKitAnimationEvent\",\n    \"initWebKitTransitionEvent\",\n    \"initWebKitWheelEvent\",\n    \"initWheelEvent\",\n    \"initialTime\",\n    \"initialize\",\n    \"initiatorType\",\n    \"inner\",\n    \"innerHTML\",\n    \"innerHeight\",\n    \"innerText\",\n    \"innerWidth\",\n    \"input\",\n    \"inputBuffer\",\n    \"inputEncoding\",\n    \"inputMethod\",\n    \"insertAdjacentElement\",\n    \"insertAdjacentHTML\",\n    \"insertAdjacentText\",\n    \"insertBefore\",\n    \"insertCell\",\n    \"insertData\",\n    \"insertItemBefore\",\n    \"insertNode\",\n    \"insertRow\",\n    \"insertRule\",\n    \"instanceRoot\",\n    \"intercept\",\n    \"interimResults\",\n    \"internalSubset\",\n    \"intersectsNode\",\n    \"interval\",\n    \"invalidIteratorState\",\n    \"inverse\",\n    \"invertSelf\",\n    \"is\",\n    \"is2D\",\n    \"isAlternate\",\n    \"isArray\",\n    \"isBingCurrentSearchDefault\",\n    \"isBuffer\",\n    \"isCandidateWindowVisible\",\n    \"isChar\",\n    \"isCollapsed\",\n    \"isComposing\",\n    \"isContentEditable\",\n    \"isContentHandlerRegistered\",\n    \"isContextLost\",\n    \"isDefaultNamespace\",\n    \"isDisabled\",\n    \"isEnabled\",\n    \"isEqual\",\n    \"isEqualNode\",\n    \"isExtensible\",\n    \"isFinite\",\n    \"isFramebuffer\",\n    \"isFrozen\",\n    \"isGenerator\",\n    \"isId\",\n    \"isInjected\",\n    \"isInteger\",\n    \"isMap\",\n    \"isMultiLine\",\n    \"isNaN\",\n    \"isOpen\",\n    \"isPointInFill\",\n    \"isPointInPath\",\n    \"isPointInRange\",\n    \"isPointInStroke\",\n    \"isPrefAlternate\",\n    \"isPrimary\",\n    \"isProgram\",\n    \"isPropertyImplicit\",\n    \"isProtocolHandlerRegistered\",\n    \"isPrototypeOf\",\n    \"isRenderbuffer\",\n    \"isSafeInteger\",\n    \"isSameNode\",\n    \"isSealed\",\n    \"isShader\",\n    \"isSupported\",\n    \"isTextEdit\",\n    \"isTexture\",\n    \"isTrusted\",\n    \"isTypeSupported\",\n    \"isView\",\n    \"isolation\",\n    \"italics\",\n    \"item\",\n    \"itemId\",\n    \"itemProp\",\n    \"itemRef\",\n    \"itemScope\",\n    \"itemType\",\n    \"itemValue\",\n    \"iterateNext\",\n    \"iterator\",\n    \"javaEnabled\",\n    \"jobTitle\",\n    \"join\",\n    \"json\",\n    \"justify-content\",\n    \"justifyContent\",\n    \"k1\",\n    \"k2\",\n    \"k3\",\n    \"k4\",\n    \"kernelMatrix\",\n    \"kernelUnitLengthX\",\n    \"kernelUnitLengthY\",\n    \"kerning\",\n    \"key\",\n    \"keyCode\",\n    \"keyFor\",\n    \"keyIdentifier\",\n    \"keyLightEnabled\",\n    \"keyLocation\",\n    \"keyPath\",\n    \"keySystem\",\n    \"keyText\",\n    \"keyUsage\",\n    \"keys\",\n    \"keytype\",\n    \"kind\",\n    \"knee\",\n    \"label\",\n    \"labels\",\n    \"lang\",\n    \"language\",\n    \"languages\",\n    \"largeArcFlag\",\n    \"lastChild\",\n    \"lastElementChild\",\n    \"lastEventId\",\n    \"lastIndex\",\n    \"lastIndexOf\",\n    \"lastMatch\",\n    \"lastMessageSubject\",\n    \"lastMessageType\",\n    \"lastModified\",\n    \"lastModifiedDate\",\n    \"lastPage\",\n    \"lastParen\",\n    \"lastState\",\n    \"lastStyleSheetSet\",\n    \"latitude\",\n    \"layerX\",\n    \"layerY\",\n    \"layoutFlow\",\n    \"layoutGrid\",\n    \"layoutGridChar\",\n    \"layoutGridLine\",\n    \"layoutGridMode\",\n    \"layoutGridType\",\n    \"lbound\",\n    \"left\",\n    \"leftContext\",\n    \"leftMargin\",\n    \"length\",\n    \"lengthAdjust\",\n    \"lengthComputable\",\n    \"letter-spacing\",\n    \"letterSpacing\",\n    \"level\",\n    \"lighting-color\",\n    \"lightingColor\",\n    \"limitingConeAngle\",\n    \"line\",\n    \"line-height\",\n    \"lineAlign\",\n    \"lineBreak\",\n    \"lineCap\",\n    \"lineDashOffset\",\n    \"lineHeight\",\n    \"lineJoin\",\n    \"lineNumber\",\n    \"lineTo\",\n    \"lineWidth\",\n    \"linearRampToValueAtTime\",\n    \"lineno\",\n    \"link\",\n    \"linkColor\",\n    \"linkProgram\",\n    \"links\",\n    \"list\",\n    \"list-style\",\n    \"list-style-image\",\n    \"list-style-position\",\n    \"list-style-type\",\n    \"listStyle\",\n    \"listStyleImage\",\n    \"listStylePosition\",\n    \"listStyleType\",\n    \"listener\",\n    \"load\",\n    \"loadEventEnd\",\n    \"loadEventStart\",\n    \"loadTimes\",\n    \"loaded\",\n    \"localDescription\",\n    \"localName\",\n    \"localStorage\",\n    \"locale\",\n    \"localeCompare\",\n    \"location\",\n    \"locationbar\",\n    \"lock\",\n    \"lockedFile\",\n    \"log\",\n    \"log10\",\n    \"log1p\",\n    \"log2\",\n    \"logicalXDPI\",\n    \"logicalYDPI\",\n    \"longDesc\",\n    \"longitude\",\n    \"lookupNamespaceURI\",\n    \"lookupPrefix\",\n    \"loop\",\n    \"loopEnd\",\n    \"loopStart\",\n    \"looping\",\n    \"low\",\n    \"lower\",\n    \"lowerBound\",\n    \"lowerOpen\",\n    \"lowsrc\",\n    \"m11\",\n    \"m12\",\n    \"m13\",\n    \"m14\",\n    \"m21\",\n    \"m22\",\n    \"m23\",\n    \"m24\",\n    \"m31\",\n    \"m32\",\n    \"m33\",\n    \"m34\",\n    \"m41\",\n    \"m42\",\n    \"m43\",\n    \"m44\",\n    \"manifest\",\n    \"map\",\n    \"mapping\",\n    \"margin\",\n    \"margin-bottom\",\n    \"margin-left\",\n    \"margin-right\",\n    \"margin-top\",\n    \"marginBottom\",\n    \"marginHeight\",\n    \"marginLeft\",\n    \"marginRight\",\n    \"marginTop\",\n    \"marginWidth\",\n    \"mark\",\n    \"marker\",\n    \"marker-end\",\n    \"marker-mid\",\n    \"marker-offset\",\n    \"marker-start\",\n    \"markerEnd\",\n    \"markerHeight\",\n    \"markerMid\",\n    \"markerOffset\",\n    \"markerStart\",\n    \"markerUnits\",\n    \"markerWidth\",\n    \"marks\",\n    \"mask\",\n    \"mask-type\",\n    \"maskContentUnits\",\n    \"maskType\",\n    \"maskUnits\",\n    \"match\",\n    \"matchMedia\",\n    \"matchMedium\",\n    \"matches\",\n    \"matrix\",\n    \"matrixTransform\",\n    \"max\",\n    \"max-height\",\n    \"max-width\",\n    \"maxAlternatives\",\n    \"maxChannelCount\",\n    \"maxConnectionsPerServer\",\n    \"maxDecibels\",\n    \"maxDistance\",\n    \"maxHeight\",\n    \"maxLength\",\n    \"maxTouchPoints\",\n    \"maxValue\",\n    \"maxWidth\",\n    \"measure\",\n    \"measureText\",\n    \"media\",\n    \"mediaCapabilities\",\n    \"mediaDevices\",\n    \"mediaElement\",\n    \"mediaGroup\",\n    \"mediaKeys\",\n    \"mediaText\",\n    \"meetOrSlice\",\n    \"memory\",\n    \"menubar\",\n    \"mergeAttributes\",\n    \"message\",\n    \"messageClass\",\n    \"messageHandlers\",\n    \"metaKey\",\n    \"method\",\n    \"mimeType\",\n    \"mimeTypes\",\n    \"min\",\n    \"min-height\",\n    \"min-width\",\n    \"minDecibels\",\n    \"minHeight\",\n    \"minValue\",\n    \"minWidth\",\n    \"miterLimit\",\n    \"mix-blend-mode\",\n    \"mixBlendMode\",\n    \"mode\",\n    \"modify\",\n    \"mount\",\n    \"move\",\n    \"moveBy\",\n    \"moveEnd\",\n    \"moveFirst\",\n    \"moveFocusDown\",\n    \"moveFocusLeft\",\n    \"moveFocusRight\",\n    \"moveFocusUp\",\n    \"moveNext\",\n    \"moveRow\",\n    \"moveStart\",\n    \"moveTo\",\n    \"moveToBookmark\",\n    \"moveToElementText\",\n    \"moveToPoint\",\n    \"mozAdd\",\n    \"mozAnimationStartTime\",\n    \"mozAnon\",\n    \"mozApps\",\n    \"mozAudioCaptured\",\n    \"mozAudioChannelType\",\n    \"mozAutoplayEnabled\",\n    \"mozCancelAnimationFrame\",\n    \"mozCancelFullScreen\",\n    \"mozCancelRequestAnimationFrame\",\n    \"mozCaptureStream\",\n    \"mozCaptureStreamUntilEnded\",\n    \"mozClearDataAt\",\n    \"mozContact\",\n    \"mozContacts\",\n    \"mozCreateFileHandle\",\n    \"mozCurrentTransform\",\n    \"mozCurrentTransformInverse\",\n    \"mozCursor\",\n    \"mozDash\",\n    \"mozDashOffset\",\n    \"mozDecodedFrames\",\n    \"mozExitPointerLock\",\n    \"mozFillRule\",\n    \"mozFragmentEnd\",\n    \"mozFrameDelay\",\n    \"mozFullScreen\",\n    \"mozFullScreenElement\",\n    \"mozFullScreenEnabled\",\n    \"mozGetAll\",\n    \"mozGetAllKeys\",\n    \"mozGetAsFile\",\n    \"mozGetDataAt\",\n    \"mozGetMetadata\",\n    \"mozGetUserMedia\",\n    \"mozHasAudio\",\n    \"mozHasItem\",\n    \"mozHidden\",\n    \"mozImageSmoothingEnabled\",\n    \"mozIndexedDB\",\n    \"mozInnerScreenX\",\n    \"mozInnerScreenY\",\n    \"mozInputSource\",\n    \"mozIsTextField\",\n    \"mozItem\",\n    \"mozItemCount\",\n    \"mozItems\",\n    \"mozLength\",\n    \"mozLockOrientation\",\n    \"mozMatchesSelector\",\n    \"mozMovementX\",\n    \"mozMovementY\",\n    \"mozOpaque\",\n    \"mozOrientation\",\n    \"mozPaintCount\",\n    \"mozPaintedFrames\",\n    \"mozParsedFrames\",\n    \"mozPay\",\n    \"mozPointerLockElement\",\n    \"mozPresentedFrames\",\n    \"mozPreservesPitch\",\n    \"mozPressure\",\n    \"mozPrintCallback\",\n    \"mozRTCIceCandidate\",\n    \"mozRTCPeerConnection\",\n    \"mozRTCSessionDescription\",\n    \"mozRemove\",\n    \"mozRequestAnimationFrame\",\n    \"mozRequestFullScreen\",\n    \"mozRequestPointerLock\",\n    \"mozSetDataAt\",\n    \"mozSetImageElement\",\n    \"mozSourceNode\",\n    \"mozSrcObject\",\n    \"mozSystem\",\n    \"mozTCPSocket\",\n    \"mozTextStyle\",\n    \"mozTypesAt\",\n    \"mozUnlockOrientation\",\n    \"mozUserCancelled\",\n    \"mozVisibilityState\",\n    \"msAnimation\",\n    \"msAnimationDelay\",\n    \"msAnimationDirection\",\n    \"msAnimationDuration\",\n    \"msAnimationFillMode\",\n    \"msAnimationIterationCount\",\n    \"msAnimationName\",\n    \"msAnimationPlayState\",\n    \"msAnimationStartTime\",\n    \"msAnimationTimingFunction\",\n    \"msBackfaceVisibility\",\n    \"msBlockProgression\",\n    \"msCSSOMElementFloatMetrics\",\n    \"msCaching\",\n    \"msCachingEnabled\",\n    \"msCancelRequestAnimationFrame\",\n    \"msCapsLockWarningOff\",\n    \"msClearImmediate\",\n    \"msClose\",\n    \"msContentZoomChaining\",\n    \"msContentZoomFactor\",\n    \"msContentZoomLimit\",\n    \"msContentZoomLimitMax\",\n    \"msContentZoomLimitMin\",\n    \"msContentZoomSnap\",\n    \"msContentZoomSnapPoints\",\n    \"msContentZoomSnapType\",\n    \"msContentZooming\",\n    \"msConvertURL\",\n    \"msCrypto\",\n    \"msDoNotTrack\",\n    \"msElementsFromPoint\",\n    \"msElementsFromRect\",\n    \"msExitFullscreen\",\n    \"msExtendedCode\",\n    \"msFillRule\",\n    \"msFirstPaint\",\n    \"msFlex\",\n    \"msFlexAlign\",\n    \"msFlexDirection\",\n    \"msFlexFlow\",\n    \"msFlexItemAlign\",\n    \"msFlexLinePack\",\n    \"msFlexNegative\",\n    \"msFlexOrder\",\n    \"msFlexPack\",\n    \"msFlexPositive\",\n    \"msFlexPreferredSize\",\n    \"msFlexWrap\",\n    \"msFlowFrom\",\n    \"msFlowInto\",\n    \"msFontFeatureSettings\",\n    \"msFullscreenElement\",\n    \"msFullscreenEnabled\",\n    \"msGetInputContext\",\n    \"msGetRegionContent\",\n    \"msGetUntransformedBounds\",\n    \"msGraphicsTrustStatus\",\n    \"msGridColumn\",\n    \"msGridColumnAlign\",\n    \"msGridColumnSpan\",\n    \"msGridColumns\",\n    \"msGridRow\",\n    \"msGridRowAlign\",\n    \"msGridRowSpan\",\n    \"msGridRows\",\n    \"msHidden\",\n    \"msHighContrastAdjust\",\n    \"msHyphenateLimitChars\",\n    \"msHyphenateLimitLines\",\n    \"msHyphenateLimitZone\",\n    \"msHyphens\",\n    \"msImageSmoothingEnabled\",\n    \"msImeAlign\",\n    \"msIndexedDB\",\n    \"msInterpolationMode\",\n    \"msIsStaticHTML\",\n    \"msKeySystem\",\n    \"msKeys\",\n    \"msLaunchUri\",\n    \"msLockOrientation\",\n    \"msManipulationViewsEnabled\",\n    \"msMatchMedia\",\n    \"msMatchesSelector\",\n    \"msMaxTouchPoints\",\n    \"msOrientation\",\n    \"msOverflowStyle\",\n    \"msPerspective\",\n    \"msPerspectiveOrigin\",\n    \"msPlayToDisabled\",\n    \"msPlayToPreferredSourceUri\",\n    \"msPlayToPrimary\",\n    \"msPointerEnabled\",\n    \"msRegionOverflow\",\n    \"msReleasePointerCapture\",\n    \"msRequestAnimationFrame\",\n    \"msRequestFullscreen\",\n    \"msSaveBlob\",\n    \"msSaveOrOpenBlob\",\n    \"msScrollChaining\",\n    \"msScrollLimit\",\n    \"msScrollLimitXMax\",\n    \"msScrollLimitXMin\",\n    \"msScrollLimitYMax\",\n    \"msScrollLimitYMin\",\n    \"msScrollRails\",\n    \"msScrollSnapPointsX\",\n    \"msScrollSnapPointsY\",\n    \"msScrollSnapType\",\n    \"msScrollSnapX\",\n    \"msScrollSnapY\",\n    \"msScrollTranslation\",\n    \"msSetImmediate\",\n    \"msSetMediaKeys\",\n    \"msSetPointerCapture\",\n    \"msTextCombineHorizontal\",\n    \"msTextSizeAdjust\",\n    \"msToBlob\",\n    \"msTouchAction\",\n    \"msTouchSelect\",\n    \"msTraceAsyncCallbackCompleted\",\n    \"msTraceAsyncCallbackStarting\",\n    \"msTraceAsyncOperationCompleted\",\n    \"msTraceAsyncOperationStarting\",\n    \"msTransform\",\n    \"msTransformOrigin\",\n    \"msTransformStyle\",\n    \"msTransition\",\n    \"msTransitionDelay\",\n    \"msTransitionDuration\",\n    \"msTransitionProperty\",\n    \"msTransitionTimingFunction\",\n    \"msUnlockOrientation\",\n    \"msUpdateAsyncCallbackRelation\",\n    \"msUserSelect\",\n    \"msVisibilityState\",\n    \"msWrapFlow\",\n    \"msWrapMargin\",\n    \"msWrapThrough\",\n    \"msWriteProfilerMark\",\n    \"msZoom\",\n    \"msZoomTo\",\n    \"mt\",\n    \"multiEntry\",\n    \"multiSelectionObj\",\n    \"multiline\",\n    \"multiple\",\n    \"multiply\",\n    \"multiplySelf\",\n    \"mutableFile\",\n    \"muted\",\n    \"n\",\n    \"name\",\n    \"nameProp\",\n    \"namedItem\",\n    \"namedRecordset\",\n    \"names\",\n    \"namespaceURI\",\n    \"namespaces\",\n    \"naturalHeight\",\n    \"naturalWidth\",\n    \"navigate\",\n    \"navigation\",\n    \"navigationMode\",\n    \"navigationStart\",\n    \"navigator\",\n    \"near\",\n    \"nearestViewportElement\",\n    \"negative\",\n    \"netscape\",\n    \"networkState\",\n    \"newScale\",\n    \"newTranslate\",\n    \"newURL\",\n    \"newValue\",\n    \"newValueSpecifiedUnits\",\n    \"newVersion\",\n    \"newhome\",\n    \"next\",\n    \"nextElementSibling\",\n    \"nextNode\",\n    \"nextPage\",\n    \"nextSibling\",\n    \"nickname\",\n    \"noHref\",\n    \"noResize\",\n    \"noShade\",\n    \"noValidate\",\n    \"noWrap\",\n    \"nodeName\",\n    \"nodeType\",\n    \"nodeValue\",\n    \"normalize\",\n    \"normalizedPathSegList\",\n    \"notationName\",\n    \"notations\",\n    \"note\",\n    \"noteGrainOn\",\n    \"noteOff\",\n    \"noteOn\",\n    \"now\",\n    \"numOctaves\",\n    \"number\",\n    \"numberOfChannels\",\n    \"numberOfInputs\",\n    \"numberOfItems\",\n    \"numberOfOutputs\",\n    \"numberValue\",\n    \"oMatchesSelector\",\n    \"object\",\n    \"object-fit\",\n    \"object-position\",\n    \"objectFit\",\n    \"objectPosition\",\n    \"objectStore\",\n    \"objectStoreNames\",\n    \"observe\",\n    \"of\",\n    \"offscreenBuffering\",\n    \"offset\",\n    \"offsetHeight\",\n    \"offsetLeft\",\n    \"offsetNode\",\n    \"offsetParent\",\n    \"offsetTop\",\n    \"offsetWidth\",\n    \"offsetX\",\n    \"offsetY\",\n    \"ok\",\n    \"oldURL\",\n    \"oldValue\",\n    \"oldVersion\",\n    \"olderShadowRoot\",\n    \"onLine\",\n    \"onabort\",\n    \"onactivate\",\n    \"onactive\",\n    \"onaddstream\",\n    \"onaddtrack\",\n    \"onafterprint\",\n    \"onafterscriptexecute\",\n    \"onafterupdate\",\n    \"onaudioend\",\n    \"onaudioprocess\",\n    \"onaudiostart\",\n    \"onautocomplete\",\n    \"onautocompleteerror\",\n    \"onbeforeactivate\",\n    \"onbeforecopy\",\n    \"onbeforecut\",\n    \"onbeforedeactivate\",\n    \"onbeforeeditfocus\",\n    \"onbeforepaste\",\n    \"onbeforeprint\",\n    \"onbeforescriptexecute\",\n    \"onbeforeunload\",\n    \"onbeforeupdate\",\n    \"onblocked\",\n    \"onblur\",\n    \"onbounce\",\n    \"onboundary\",\n    \"oncached\",\n    \"oncancel\",\n    \"oncandidatewindowhide\",\n    \"oncandidatewindowshow\",\n    \"oncandidatewindowupdate\",\n    \"oncanplay\",\n    \"oncanplaythrough\",\n    \"oncellchange\",\n    \"onchange\",\n    \"onchargingchange\",\n    \"onchargingtimechange\",\n    \"onchecking\",\n    \"onclick\",\n    \"onclose\",\n    \"oncompassneedscalibration\",\n    \"oncomplete\",\n    \"oncontextmenu\",\n    \"oncontrolselect\",\n    \"oncopy\",\n    \"oncuechange\",\n    \"oncut\",\n    \"ondataavailable\",\n    \"ondatachannel\",\n    \"ondatasetchanged\",\n    \"ondatasetcomplete\",\n    \"ondblclick\",\n    \"ondeactivate\",\n    \"ondevicelight\",\n    \"ondevicemotion\",\n    \"ondeviceorientation\",\n    \"ondeviceproximity\",\n    \"ondischargingtimechange\",\n    \"ondisplay\",\n    \"ondownloading\",\n    \"ondrag\",\n    \"ondragend\",\n    \"ondragenter\",\n    \"ondragleave\",\n    \"ondragover\",\n    \"ondragstart\",\n    \"ondrop\",\n    \"ondurationchange\",\n    \"onemptied\",\n    \"onencrypted\",\n    \"onend\",\n    \"onended\",\n    \"onenter\",\n    \"onerror\",\n    \"onerrorupdate\",\n    \"onexit\",\n    \"onfilterchange\",\n    \"onfinish\",\n    \"onfocus\",\n    \"onfocusin\",\n    \"onfocusout\",\n    \"onfullscreenchange\",\n    \"onfullscreenerror\",\n    \"ongesturechange\",\n    \"ongestureend\",\n    \"ongesturestart\",\n    \"ongotpointercapture\",\n    \"onhashchange\",\n    \"onhelp\",\n    \"onicecandidate\",\n    \"oniceconnectionstatechange\",\n    \"oninactive\",\n    \"oninput\",\n    \"oninvalid\",\n    \"onkeydown\",\n    \"onkeypress\",\n    \"onkeyup\",\n    \"onlanguagechange\",\n    \"onlayoutcomplete\",\n    \"onlevelchange\",\n    \"onload\",\n    \"onloadeddata\",\n    \"onloadedmetadata\",\n    \"onloadend\",\n    \"onloadstart\",\n    \"onlosecapture\",\n    \"onlostpointercapture\",\n    \"only\",\n    \"onmark\",\n    \"onmessage\",\n    \"onmousedown\",\n    \"onmouseenter\",\n    \"onmouseleave\",\n    \"onmousemove\",\n    \"onmouseout\",\n    \"onmouseover\",\n    \"onmouseup\",\n    \"onmousewheel\",\n    \"onmove\",\n    \"onmoveend\",\n    \"onmovestart\",\n    \"onmozfullscreenchange\",\n    \"onmozfullscreenerror\",\n    \"onmozorientationchange\",\n    \"onmozpointerlockchange\",\n    \"onmozpointerlockerror\",\n    \"onmscontentzoom\",\n    \"onmsfullscreenchange\",\n    \"onmsfullscreenerror\",\n    \"onmsgesturechange\",\n    \"onmsgesturedoubletap\",\n    \"onmsgestureend\",\n    \"onmsgesturehold\",\n    \"onmsgesturestart\",\n    \"onmsgesturetap\",\n    \"onmsgotpointercapture\",\n    \"onmsinertiastart\",\n    \"onmslostpointercapture\",\n    \"onmsmanipulationstatechanged\",\n    \"onmsneedkey\",\n    \"onmsorientationchange\",\n    \"onmspointercancel\",\n    \"onmspointerdown\",\n    \"onmspointerenter\",\n    \"onmspointerhover\",\n    \"onmspointerleave\",\n    \"onmspointermove\",\n    \"onmspointerout\",\n    \"onmspointerover\",\n    \"onmspointerup\",\n    \"onmssitemodejumplistitemremoved\",\n    \"onmsthumbnailclick\",\n    \"onnegotiationneeded\",\n    \"onnomatch\",\n    \"onnoupdate\",\n    \"onobsolete\",\n    \"onoffline\",\n    \"ononline\",\n    \"onopen\",\n    \"onorientationchange\",\n    \"onpagechange\",\n    \"onpagehide\",\n    \"onpageshow\",\n    \"onpaste\",\n    \"onpause\",\n    \"onplay\",\n    \"onplaying\",\n    \"onpluginstreamstart\",\n    \"onpointercancel\",\n    \"onpointerdown\",\n    \"onpointerenter\",\n    \"onpointerleave\",\n    \"onpointerlockchange\",\n    \"onpointerlockerror\",\n    \"onpointermove\",\n    \"onpointerout\",\n    \"onpointerover\",\n    \"onpointerup\",\n    \"onpopstate\",\n    \"onprogress\",\n    \"onpropertychange\",\n    \"onratechange\",\n    \"onreadystatechange\",\n    \"onremovestream\",\n    \"onremovetrack\",\n    \"onreset\",\n    \"onresize\",\n    \"onresizeend\",\n    \"onresizestart\",\n    \"onresourcetimingbufferfull\",\n    \"onresult\",\n    \"onresume\",\n    \"onrowenter\",\n    \"onrowexit\",\n    \"onrowsdelete\",\n    \"onrowsinserted\",\n    \"onscroll\",\n    \"onsearch\",\n    \"onseeked\",\n    \"onseeking\",\n    \"onselect\",\n    \"onselectionchange\",\n    \"onselectstart\",\n    \"onshow\",\n    \"onsignalingstatechange\",\n    \"onsoundend\",\n    \"onsoundstart\",\n    \"onspeechend\",\n    \"onspeechstart\",\n    \"onstalled\",\n    \"onstart\",\n    \"onstatechange\",\n    \"onstop\",\n    \"onstorage\",\n    \"onstoragecommit\",\n    \"onsubmit\",\n    \"onsuccess\",\n    \"onsuspend\",\n    \"ontextinput\",\n    \"ontimeout\",\n    \"ontimeupdate\",\n    \"ontoggle\",\n    \"ontouchcancel\",\n    \"ontouchend\",\n    \"ontouchmove\",\n    \"ontouchstart\",\n    \"ontransitionend\",\n    \"onunload\",\n    \"onupdateready\",\n    \"onupgradeneeded\",\n    \"onuserproximity\",\n    \"onversionchange\",\n    \"onvoiceschanged\",\n    \"onvolumechange\",\n    \"onwaiting\",\n    \"onwarning\",\n    \"onwebkitanimationend\",\n    \"onwebkitanimationiteration\",\n    \"onwebkitanimationstart\",\n    \"onwebkitcurrentplaybacktargetiswirelesschanged\",\n    \"onwebkitfullscreenchange\",\n    \"onwebkitfullscreenerror\",\n    \"onwebkitkeyadded\",\n    \"onwebkitkeyerror\",\n    \"onwebkitkeymessage\",\n    \"onwebkitneedkey\",\n    \"onwebkitorientationchange\",\n    \"onwebkitplaybacktargetavailabilitychanged\",\n    \"onwebkitpointerlockchange\",\n    \"onwebkitpointerlockerror\",\n    \"onwebkitresourcetimingbufferfull\",\n    \"onwebkittransitionend\",\n    \"onwheel\",\n    \"onzoom\",\n    \"opacity\",\n    \"open\",\n    \"openCursor\",\n    \"openDatabase\",\n    \"openKeyCursor\",\n    \"opener\",\n    \"opera\",\n    \"operationType\",\n    \"operator\",\n    \"opr\",\n    \"optimum\",\n    \"options\",\n    \"order\",\n    \"orderX\",\n    \"orderY\",\n    \"ordered\",\n    \"org\",\n    \"orient\",\n    \"orientAngle\",\n    \"orientType\",\n    \"orientation\",\n    \"origin\",\n    \"originalTarget\",\n    \"orphans\",\n    \"oscpu\",\n    \"outerHTML\",\n    \"outerHeight\",\n    \"outerText\",\n    \"outerWidth\",\n    \"outline\",\n    \"outline-color\",\n    \"outline-offset\",\n    \"outline-style\",\n    \"outline-width\",\n    \"outlineColor\",\n    \"outlineOffset\",\n    \"outlineStyle\",\n    \"outlineWidth\",\n    \"outputBuffer\",\n    \"overflow\",\n    \"overflow-x\",\n    \"overflow-y\",\n    \"overflowX\",\n    \"overflowY\",\n    \"overrideMimeType\",\n    \"oversample\",\n    \"ownerDocument\",\n    \"ownerElement\",\n    \"ownerNode\",\n    \"ownerRule\",\n    \"ownerSVGElement\",\n    \"owningElement\",\n    \"p1\",\n    \"p2\",\n    \"p3\",\n    \"p4\",\n    \"pad\",\n    \"padding\",\n    \"padding-bottom\",\n    \"padding-left\",\n    \"padding-right\",\n    \"padding-top\",\n    \"paddingBottom\",\n    \"paddingLeft\",\n    \"paddingRight\",\n    \"paddingTop\",\n    \"page\",\n    \"page-break-after\",\n    \"page-break-before\",\n    \"page-break-inside\",\n    \"pageBreakAfter\",\n    \"pageBreakBefore\",\n    \"pageBreakInside\",\n    \"pageCount\",\n    \"pageX\",\n    \"pageXOffset\",\n    \"pageY\",\n    \"pageYOffset\",\n    \"pages\",\n    \"paint-order\",\n    \"paintOrder\",\n    \"paintRequests\",\n    \"paintType\",\n    \"palette\",\n    \"panningModel\",\n    \"parent\",\n    \"parentElement\",\n    \"parentNode\",\n    \"parentRule\",\n    \"parentStyleSheet\",\n    \"parentTextEdit\",\n    \"parentWindow\",\n    \"parse\",\n    \"parseFloat\",\n    \"parseFromString\",\n    \"parseInt\",\n    \"participants\",\n    \"password\",\n    \"pasteHTML\",\n    \"path\",\n    \"pathLength\",\n    \"pathSegList\",\n    \"pathSegType\",\n    \"pathSegTypeAsLetter\",\n    \"pathname\",\n    \"pattern\",\n    \"patternContentUnits\",\n    \"patternMismatch\",\n    \"patternTransform\",\n    \"patternUnits\",\n    \"pause\",\n    \"pauseAnimations\",\n    \"pauseOnExit\",\n    \"paused\",\n    \"pending\",\n    \"performance\",\n    \"permission\",\n    \"persisted\",\n    \"personalbar\",\n    \"perspective\",\n    \"perspective-origin\",\n    \"perspectiveOrigin\",\n    \"phoneticFamilyName\",\n    \"phoneticGivenName\",\n    \"photo\",\n    \"ping\",\n    \"pitch\",\n    \"pixelBottom\",\n    \"pixelDepth\",\n    \"pixelHeight\",\n    \"pixelLeft\",\n    \"pixelRight\",\n    \"pixelStorei\",\n    \"pixelTop\",\n    \"pixelUnitToMillimeterX\",\n    \"pixelUnitToMillimeterY\",\n    \"pixelWidth\",\n    \"placeholder\",\n    \"platform\",\n    \"play\",\n    \"playbackRate\",\n    \"playbackState\",\n    \"playbackTime\",\n    \"played\",\n    \"plugins\",\n    \"pluginspage\",\n    \"pname\",\n    \"pointer-events\",\n    \"pointerBeforeReferenceNode\",\n    \"pointerEnabled\",\n    \"pointerEvents\",\n    \"pointerId\",\n    \"pointerLockElement\",\n    \"pointerType\",\n    \"points\",\n    \"pointsAtX\",\n    \"pointsAtY\",\n    \"pointsAtZ\",\n    \"polygonOffset\",\n    \"pop\",\n    \"popupWindowFeatures\",\n    \"popupWindowName\",\n    \"popupWindowURI\",\n    \"port\",\n    \"port1\",\n    \"port2\",\n    \"ports\",\n    \"posBottom\",\n    \"posHeight\",\n    \"posLeft\",\n    \"posRight\",\n    \"posTop\",\n    \"posWidth\",\n    \"position\",\n    \"positionAlign\",\n    \"postError\",\n    \"postMessage\",\n    \"poster\",\n    \"pow\",\n    \"powerOff\",\n    \"preMultiplySelf\",\n    \"precision\",\n    \"preferredStyleSheetSet\",\n    \"preferredStylesheetSet\",\n    \"prefix\",\n    \"preload\",\n    \"preserveAlpha\",\n    \"preserveAspectRatio\",\n    \"preserveAspectRatioString\",\n    \"pressed\",\n    \"pressure\",\n    \"prevValue\",\n    \"preventDefault\",\n    \"preventExtensions\",\n    \"previousElementSibling\",\n    \"previousNode\",\n    \"previousPage\",\n    \"previousScale\",\n    \"previousSibling\",\n    \"previousTranslate\",\n    \"primaryKey\",\n    \"primitiveType\",\n    \"primitiveUnits\",\n    \"principals\",\n    \"print\",\n    \"privateKey\",\n    \"probablySupportsContext\",\n    \"process\",\n    \"processIceMessage\",\n    \"product\",\n    \"productSub\",\n    \"profile\",\n    \"profileEnd\",\n    \"profiles\",\n    \"prompt\",\n    \"properties\",\n    \"propertyIsEnumerable\",\n    \"propertyName\",\n    \"protocol\",\n    \"protocolLong\",\n    \"prototype\",\n    \"pseudoClass\",\n    \"pseudoElement\",\n    \"publicId\",\n    \"publicKey\",\n    \"published\",\n    \"push\",\n    \"pushNotification\",\n    \"pushState\",\n    \"put\",\n    \"putImageData\",\n    \"quadraticCurveTo\",\n    \"qualifier\",\n    \"queryCommandEnabled\",\n    \"queryCommandIndeterm\",\n    \"queryCommandState\",\n    \"queryCommandSupported\",\n    \"queryCommandText\",\n    \"queryCommandValue\",\n    \"querySelector\",\n    \"querySelectorAll\",\n    \"quote\",\n    \"quotes\",\n    \"r\",\n    \"r1\",\n    \"r2\",\n    \"race\",\n    \"radiogroup\",\n    \"radiusX\",\n    \"radiusY\",\n    \"random\",\n    \"range\",\n    \"rangeCount\",\n    \"rangeMax\",\n    \"rangeMin\",\n    \"rangeOffset\",\n    \"rangeOverflow\",\n    \"rangeParent\",\n    \"rangeUnderflow\",\n    \"rate\",\n    \"ratio\",\n    \"raw\",\n    \"read\",\n    \"readAsArrayBuffer\",\n    \"readAsBinaryString\",\n    \"readAsBlob\",\n    \"readAsDataURL\",\n    \"readAsText\",\n    \"readOnly\",\n    \"readPixels\",\n    \"readReportRequested\",\n    \"readyState\",\n    \"reason\",\n    \"reboot\",\n    \"receiver\",\n    \"receivers\",\n    \"recordNumber\",\n    \"recordset\",\n    \"rect\",\n    \"red\",\n    \"redirectCount\",\n    \"redirectEnd\",\n    \"redirectStart\",\n    \"reduce\",\n    \"reduceRight\",\n    \"reduction\",\n    \"refDistance\",\n    \"refX\",\n    \"refY\",\n    \"referenceNode\",\n    \"referrer\",\n    \"refresh\",\n    \"region\",\n    \"regionAnchorX\",\n    \"regionAnchorY\",\n    \"regionId\",\n    \"regions\",\n    \"register\",\n    \"registerContentHandler\",\n    \"registerElement\",\n    \"registerProtocolHandler\",\n    \"reject\",\n    \"rel\",\n    \"relList\",\n    \"relatedNode\",\n    \"relatedTarget\",\n    \"release\",\n    \"releaseCapture\",\n    \"releaseEvents\",\n    \"releasePointerCapture\",\n    \"releaseShaderCompiler\",\n    \"reliable\",\n    \"reload\",\n    \"remainingSpace\",\n    \"remoteDescription\",\n    \"remove\",\n    \"removeAllRanges\",\n    \"removeAttribute\",\n    \"removeAttributeNS\",\n    \"removeAttributeNode\",\n    \"removeBehavior\",\n    \"removeChild\",\n    \"removeCue\",\n    \"removeEventListener\",\n    \"removeFilter\",\n    \"removeImport\",\n    \"removeItem\",\n    \"removeListener\",\n    \"removeNamedItem\",\n    \"removeNamedItemNS\",\n    \"removeNode\",\n    \"removeParameter\",\n    \"removeProperty\",\n    \"removeRange\",\n    \"removeRegion\",\n    \"removeRule\",\n    \"removeSiteSpecificTrackingException\",\n    \"removeSourceBuffer\",\n    \"removeStream\",\n    \"removeTrack\",\n    \"removeVariable\",\n    \"removeWakeLockListener\",\n    \"removeWebWideTrackingException\",\n    \"removedNodes\",\n    \"renderbufferStorage\",\n    \"renderedBuffer\",\n    \"renderingMode\",\n    \"repeat\",\n    \"replace\",\n    \"replaceAdjacentText\",\n    \"replaceChild\",\n    \"replaceData\",\n    \"replaceId\",\n    \"replaceItem\",\n    \"replaceNode\",\n    \"replaceState\",\n    \"replaceTrack\",\n    \"replaceWholeText\",\n    \"reportValidity\",\n    \"requestAnimationFrame\",\n    \"requestAutocomplete\",\n    \"requestData\",\n    \"requestFullscreen\",\n    \"requestMediaKeySystemAccess\",\n    \"requestPermission\",\n    \"requestPointerLock\",\n    \"requestStart\",\n    \"requestingWindow\",\n    \"required\",\n    \"requiredExtensions\",\n    \"requiredFeatures\",\n    \"reset\",\n    \"resetTransform\",\n    \"resize\",\n    \"resizeBy\",\n    \"resizeTo\",\n    \"resolve\",\n    \"response\",\n    \"responseBody\",\n    \"responseEnd\",\n    \"responseStart\",\n    \"responseText\",\n    \"responseType\",\n    \"responseURL\",\n    \"responseXML\",\n    \"restore\",\n    \"result\",\n    \"resultType\",\n    \"resume\",\n    \"returnValue\",\n    \"rev\",\n    \"reverse\",\n    \"reversed\",\n    \"revocable\",\n    \"revokeObjectURL\",\n    \"rgbColor\",\n    \"right\",\n    \"rightContext\",\n    \"rightMargin\",\n    \"rolloffFactor\",\n    \"root\",\n    \"rootElement\",\n    \"rotate\",\n    \"rotateAxisAngle\",\n    \"rotateAxisAngleSelf\",\n    \"rotateFromVector\",\n    \"rotateFromVectorSelf\",\n    \"rotateSelf\",\n    \"rotation\",\n    \"rotationRate\",\n    \"round\",\n    \"rowIndex\",\n    \"rowSpan\",\n    \"rows\",\n    \"rubyAlign\",\n    \"rubyOverhang\",\n    \"rubyPosition\",\n    \"rules\",\n    \"runtime\",\n    \"runtimeStyle\",\n    \"rx\",\n    \"ry\",\n    \"safari\",\n    \"sampleCoverage\",\n    \"sampleRate\",\n    \"sandbox\",\n    \"save\",\n    \"scale\",\n    \"scale3d\",\n    \"scale3dSelf\",\n    \"scaleNonUniform\",\n    \"scaleNonUniformSelf\",\n    \"scaleSelf\",\n    \"scheme\",\n    \"scissor\",\n    \"scope\",\n    \"scopeName\",\n    \"scoped\",\n    \"screen\",\n    \"screenBrightness\",\n    \"screenEnabled\",\n    \"screenLeft\",\n    \"screenPixelToMillimeterX\",\n    \"screenPixelToMillimeterY\",\n    \"screenTop\",\n    \"screenX\",\n    \"screenY\",\n    \"scripts\",\n    \"scroll\",\n    \"scroll-behavior\",\n    \"scrollAmount\",\n    \"scrollBehavior\",\n    \"scrollBy\",\n    \"scrollByLines\",\n    \"scrollByPages\",\n    \"scrollDelay\",\n    \"scrollHeight\",\n    \"scrollIntoView\",\n    \"scrollIntoViewIfNeeded\",\n    \"scrollLeft\",\n    \"scrollLeftMax\",\n    \"scrollMaxX\",\n    \"scrollMaxY\",\n    \"scrollTo\",\n    \"scrollTop\",\n    \"scrollTopMax\",\n    \"scrollWidth\",\n    \"scrollX\",\n    \"scrollY\",\n    \"scrollbar3dLightColor\",\n    \"scrollbarArrowColor\",\n    \"scrollbarBaseColor\",\n    \"scrollbarDarkShadowColor\",\n    \"scrollbarFaceColor\",\n    \"scrollbarHighlightColor\",\n    \"scrollbarShadowColor\",\n    \"scrollbarTrackColor\",\n    \"scrollbars\",\n    \"scrolling\",\n    \"sdp\",\n    \"sdpMLineIndex\",\n    \"sdpMid\",\n    \"seal\",\n    \"search\",\n    \"searchBox\",\n    \"searchBoxJavaBridge_\",\n    \"searchParams\",\n    \"sectionRowIndex\",\n    \"secureConnectionStart\",\n    \"security\",\n    \"seed\",\n    \"seekable\",\n    \"seeking\",\n    \"select\",\n    \"selectAllChildren\",\n    \"selectNode\",\n    \"selectNodeContents\",\n    \"selectNodes\",\n    \"selectSingleNode\",\n    \"selectSubString\",\n    \"selected\",\n    \"selectedIndex\",\n    \"selectedOptions\",\n    \"selectedStyleSheetSet\",\n    \"selectedStylesheetSet\",\n    \"selection\",\n    \"selectionDirection\",\n    \"selectionEnd\",\n    \"selectionStart\",\n    \"selector\",\n    \"selectorText\",\n    \"self\",\n    \"send\",\n    \"sendAsBinary\",\n    \"sendBeacon\",\n    \"sender\",\n    \"sentTimestamp\",\n    \"separator\",\n    \"serializeToString\",\n    \"serviceWorker\",\n    \"sessionId\",\n    \"sessionStorage\",\n    \"set\",\n    \"setActive\",\n    \"setAlpha\",\n    \"setAttribute\",\n    \"setAttributeNS\",\n    \"setAttributeNode\",\n    \"setAttributeNodeNS\",\n    \"setBaseAndExtent\",\n    \"setBingCurrentSearchDefault\",\n    \"setCapture\",\n    \"setColor\",\n    \"setCompositeOperation\",\n    \"setCurrentTime\",\n    \"setCustomValidity\",\n    \"setData\",\n    \"setDate\",\n    \"setDragImage\",\n    \"setEnd\",\n    \"setEndAfter\",\n    \"setEndBefore\",\n    \"setEndPoint\",\n    \"setFillColor\",\n    \"setFilterRes\",\n    \"setFloat32\",\n    \"setFloat64\",\n    \"setFloatValue\",\n    \"setFullYear\",\n    \"setHours\",\n    \"setImmediate\",\n    \"setInt16\",\n    \"setInt32\",\n    \"setInt8\",\n    \"setInterval\",\n    \"setItem\",\n    \"setLineCap\",\n    \"setLineDash\",\n    \"setLineJoin\",\n    \"setLineWidth\",\n    \"setLocalDescription\",\n    \"setMatrix\",\n    \"setMatrixValue\",\n    \"setMediaKeys\",\n    \"setMilliseconds\",\n    \"setMinutes\",\n    \"setMiterLimit\",\n    \"setMonth\",\n    \"setNamedItem\",\n    \"setNamedItemNS\",\n    \"setNonUserCodeExceptions\",\n    \"setOrientToAngle\",\n    \"setOrientToAuto\",\n    \"setOrientation\",\n    \"setOverrideHistoryNavigationMode\",\n    \"setPaint\",\n    \"setParameter\",\n    \"setPeriodicWave\",\n    \"setPointerCapture\",\n    \"setPosition\",\n    \"setPreference\",\n    \"setProperty\",\n    \"setPrototypeOf\",\n    \"setRGBColor\",\n    \"setRGBColorICCColor\",\n    \"setRadius\",\n    \"setRangeText\",\n    \"setRemoteDescription\",\n    \"setRequestHeader\",\n    \"setResizable\",\n    \"setResourceTimingBufferSize\",\n    \"setRotate\",\n    \"setScale\",\n    \"setSeconds\",\n    \"setSelectionRange\",\n    \"setServerCertificate\",\n    \"setShadow\",\n    \"setSkewX\",\n    \"setSkewY\",\n    \"setStart\",\n    \"setStartAfter\",\n    \"setStartBefore\",\n    \"setStdDeviation\",\n    \"setStringValue\",\n    \"setStrokeColor\",\n    \"setSuggestResult\",\n    \"setTargetAtTime\",\n    \"setTargetValueAtTime\",\n    \"setTime\",\n    \"setTimeout\",\n    \"setTransform\",\n    \"setTranslate\",\n    \"setUTCDate\",\n    \"setUTCFullYear\",\n    \"setUTCHours\",\n    \"setUTCMilliseconds\",\n    \"setUTCMinutes\",\n    \"setUTCMonth\",\n    \"setUTCSeconds\",\n    \"setUint16\",\n    \"setUint32\",\n    \"setUint8\",\n    \"setUri\",\n    \"setValueAtTime\",\n    \"setValueCurveAtTime\",\n    \"setVariable\",\n    \"setVelocity\",\n    \"setVersion\",\n    \"setYear\",\n    \"settingName\",\n    \"settingValue\",\n    \"sex\",\n    \"shaderSource\",\n    \"shadowBlur\",\n    \"shadowColor\",\n    \"shadowOffsetX\",\n    \"shadowOffsetY\",\n    \"shadowRoot\",\n    \"shape\",\n    \"shape-rendering\",\n    \"shapeRendering\",\n    \"sheet\",\n    \"shift\",\n    \"shiftKey\",\n    \"shiftLeft\",\n    \"show\",\n    \"showHelp\",\n    \"showModal\",\n    \"showModalDialog\",\n    \"showModelessDialog\",\n    \"showNotification\",\n    \"sidebar\",\n    \"sign\",\n    \"signalingState\",\n    \"sin\",\n    \"singleNodeValue\",\n    \"sinh\",\n    \"size\",\n    \"sizeToContent\",\n    \"sizes\",\n    \"skewX\",\n    \"skewXSelf\",\n    \"skewY\",\n    \"skewYSelf\",\n    \"slice\",\n    \"slope\",\n    \"small\",\n    \"smooth\",\n    \"smil\",\n    \"smoothingTimeConstant\",\n    \"snapToLines\",\n    \"snapshotItem\",\n    \"snapshotLength\",\n    \"some\",\n    \"sort\",\n    \"source\",\n    \"sourceBuffer\",\n    \"sourceBuffers\",\n    \"sourceIndex\",\n    \"spacing\",\n    \"span\",\n    \"speakAs\",\n    \"speaking\",\n    \"specified\",\n    \"specularConstant\",\n    \"specularExponent\",\n    \"speechSynthesis\",\n    \"speed\",\n    \"speedOfSound\",\n    \"spellcheck\",\n    \"splice\",\n    \"split\",\n    \"splitText\",\n    \"spreadMethod\",\n    \"sqrt\",\n    \"src\",\n    \"srcElement\",\n    \"srcFilter\",\n    \"srcUrn\",\n    \"srcdoc\",\n    \"srclang\",\n    \"srcset\",\n    \"stack\",\n    \"stackTraceLimit\",\n    \"stacktrace\",\n    \"standalone\",\n    \"standby\",\n    \"start\",\n    \"startContainer\",\n    \"startIce\",\n    \"startOffset\",\n    \"startRendering\",\n    \"startTime\",\n    \"startsWith\",\n    \"state\",\n    \"status\",\n    \"statusMessage\",\n    \"statusText\",\n    \"statusbar\",\n    \"stdDeviationX\",\n    \"stdDeviationY\",\n    \"stencilFunc\",\n    \"stencilFuncSeparate\",\n    \"stencilMask\",\n    \"stencilMaskSeparate\",\n    \"stencilOp\",\n    \"stencilOpSeparate\",\n    \"step\",\n    \"stepDown\",\n    \"stepMismatch\",\n    \"stepUp\",\n    \"sticky\",\n    \"stitchTiles\",\n    \"stop\",\n    \"stop-color\",\n    \"stop-opacity\",\n    \"stopColor\",\n    \"stopImmediatePropagation\",\n    \"stopOpacity\",\n    \"stopPropagation\",\n    \"storageArea\",\n    \"storageName\",\n    \"storageStatus\",\n    \"storeSiteSpecificTrackingException\",\n    \"storeWebWideTrackingException\",\n    \"stpVersion\",\n    \"stream\",\n    \"strike\",\n    \"stringValue\",\n    \"stringify\",\n    \"stroke\",\n    \"stroke-dasharray\",\n    \"stroke-dashoffset\",\n    \"stroke-linecap\",\n    \"stroke-linejoin\",\n    \"stroke-miterlimit\",\n    \"stroke-opacity\",\n    \"stroke-width\",\n    \"strokeDasharray\",\n    \"strokeDashoffset\",\n    \"strokeLinecap\",\n    \"strokeLinejoin\",\n    \"strokeMiterlimit\",\n    \"strokeOpacity\",\n    \"strokeRect\",\n    \"strokeStyle\",\n    \"strokeText\",\n    \"strokeWidth\",\n    \"style\",\n    \"styleFloat\",\n    \"styleMedia\",\n    \"styleSheet\",\n    \"styleSheetSets\",\n    \"styleSheets\",\n    \"sub\",\n    \"subarray\",\n    \"subject\",\n    \"submit\",\n    \"subscribe\",\n    \"substr\",\n    \"substring\",\n    \"substringData\",\n    \"subtle\",\n    \"suffix\",\n    \"suffixes\",\n    \"summary\",\n    \"sup\",\n    \"supports\",\n    \"surfaceScale\",\n    \"surroundContents\",\n    \"suspend\",\n    \"suspendRedraw\",\n    \"swapCache\",\n    \"swapNode\",\n    \"sweepFlag\",\n    \"symbols\",\n    \"system\",\n    \"systemCode\",\n    \"systemId\",\n    \"systemLanguage\",\n    \"systemXDPI\",\n    \"systemYDPI\",\n    \"tBodies\",\n    \"tFoot\",\n    \"tHead\",\n    \"tabIndex\",\n    \"table\",\n    \"table-layout\",\n    \"tableLayout\",\n    \"tableValues\",\n    \"tag\",\n    \"tagName\",\n    \"tagUrn\",\n    \"tags\",\n    \"taintEnabled\",\n    \"takeRecords\",\n    \"tan\",\n    \"tanh\",\n    \"target\",\n    \"targetElement\",\n    \"targetTouches\",\n    \"targetX\",\n    \"targetY\",\n    \"tel\",\n    \"terminate\",\n    \"test\",\n    \"texImage2D\",\n    \"texParameterf\",\n    \"texParameteri\",\n    \"texSubImage2D\",\n    \"text\",\n    \"text-align\",\n    \"text-anchor\",\n    \"text-decoration\",\n    \"text-decoration-color\",\n    \"text-decoration-line\",\n    \"text-decoration-style\",\n    \"text-indent\",\n    \"text-overflow\",\n    \"text-rendering\",\n    \"text-shadow\",\n    \"text-transform\",\n    \"textAlign\",\n    \"textAlignLast\",\n    \"textAnchor\",\n    \"textAutospace\",\n    \"textBaseline\",\n    \"textContent\",\n    \"textDecoration\",\n    \"textDecorationBlink\",\n    \"textDecorationColor\",\n    \"textDecorationLine\",\n    \"textDecorationLineThrough\",\n    \"textDecorationNone\",\n    \"textDecorationOverline\",\n    \"textDecorationStyle\",\n    \"textDecorationUnderline\",\n    \"textIndent\",\n    \"textJustify\",\n    \"textJustifyTrim\",\n    \"textKashida\",\n    \"textKashidaSpace\",\n    \"textLength\",\n    \"textOverflow\",\n    \"textRendering\",\n    \"textShadow\",\n    \"textTracks\",\n    \"textTransform\",\n    \"textUnderlinePosition\",\n    \"then\",\n    \"threadId\",\n    \"threshold\",\n    \"tiltX\",\n    \"tiltY\",\n    \"time\",\n    \"timeEnd\",\n    \"timeStamp\",\n    \"timeout\",\n    \"timestamp\",\n    \"timestampOffset\",\n    \"timing\",\n    \"title\",\n    \"toArray\",\n    \"toBlob\",\n    \"toDataURL\",\n    \"toDateString\",\n    \"toElement\",\n    \"toExponential\",\n    \"toFixed\",\n    \"toFloat32Array\",\n    \"toFloat64Array\",\n    \"toGMTString\",\n    \"toISOString\",\n    \"toJSON\",\n    \"toLocaleDateString\",\n    \"toLocaleFormat\",\n    \"toLocaleLowerCase\",\n    \"toLocaleString\",\n    \"toLocaleTimeString\",\n    \"toLocaleUpperCase\",\n    \"toLowerCase\",\n    \"toMethod\",\n    \"toPrecision\",\n    \"toSdp\",\n    \"toSource\",\n    \"toStaticHTML\",\n    \"toString\",\n    \"toStringTag\",\n    \"toTimeString\",\n    \"toUTCString\",\n    \"toUpperCase\",\n    \"toggle\",\n    \"toggleLongPressEnabled\",\n    \"tooLong\",\n    \"toolbar\",\n    \"top\",\n    \"topMargin\",\n    \"total\",\n    \"totalFrameDelay\",\n    \"totalVideoFrames\",\n    \"touchAction\",\n    \"touches\",\n    \"trace\",\n    \"track\",\n    \"transaction\",\n    \"transactions\",\n    \"transform\",\n    \"transform-origin\",\n    \"transform-style\",\n    \"transformOrigin\",\n    \"transformPoint\",\n    \"transformString\",\n    \"transformStyle\",\n    \"transformToDocument\",\n    \"transformToFragment\",\n    \"transition\",\n    \"transition-delay\",\n    \"transition-duration\",\n    \"transition-property\",\n    \"transition-timing-function\",\n    \"transitionDelay\",\n    \"transitionDuration\",\n    \"transitionProperty\",\n    \"transitionTimingFunction\",\n    \"translate\",\n    \"translateSelf\",\n    \"translationX\",\n    \"translationY\",\n    \"trim\",\n    \"trimLeft\",\n    \"trimRight\",\n    \"trueSpeed\",\n    \"trunc\",\n    \"truncate\",\n    \"type\",\n    \"typeDetail\",\n    \"typeMismatch\",\n    \"typeMustMatch\",\n    \"types\",\n    \"ubound\",\n    \"undefined\",\n    \"unescape\",\n    \"uneval\",\n    \"unicode-bidi\",\n    \"unicodeBidi\",\n    \"uniform1f\",\n    \"uniform1fv\",\n    \"uniform1i\",\n    \"uniform1iv\",\n    \"uniform2f\",\n    \"uniform2fv\",\n    \"uniform2i\",\n    \"uniform2iv\",\n    \"uniform3f\",\n    \"uniform3fv\",\n    \"uniform3i\",\n    \"uniform3iv\",\n    \"uniform4f\",\n    \"uniform4fv\",\n    \"uniform4i\",\n    \"uniform4iv\",\n    \"uniformMatrix2fv\",\n    \"uniformMatrix3fv\",\n    \"uniformMatrix4fv\",\n    \"unique\",\n    \"uniqueID\",\n    \"uniqueNumber\",\n    \"unitType\",\n    \"units\",\n    \"unloadEventEnd\",\n    \"unloadEventStart\",\n    \"unlock\",\n    \"unmount\",\n    \"unobserve\",\n    \"unpause\",\n    \"unpauseAnimations\",\n    \"unreadCount\",\n    \"unregister\",\n    \"unregisterContentHandler\",\n    \"unregisterProtocolHandler\",\n    \"unscopables\",\n    \"unselectable\",\n    \"unshift\",\n    \"unsubscribe\",\n    \"unsuspendRedraw\",\n    \"unsuspendRedrawAll\",\n    \"unwatch\",\n    \"unwrapKey\",\n    \"update\",\n    \"updateCommands\",\n    \"updateIce\",\n    \"updateInterval\",\n    \"updateSettings\",\n    \"updated\",\n    \"updating\",\n    \"upload\",\n    \"upper\",\n    \"upperBound\",\n    \"upperOpen\",\n    \"uri\",\n    \"url\",\n    \"urn\",\n    \"urns\",\n    \"usages\",\n    \"useCurrentView\",\n    \"useMap\",\n    \"useProgram\",\n    \"usedSpace\",\n    \"userAgent\",\n    \"userLanguage\",\n    \"username\",\n    \"v8BreakIterator\",\n    \"vAlign\",\n    \"vLink\",\n    \"valid\",\n    \"validateProgram\",\n    \"validationMessage\",\n    \"validity\",\n    \"value\",\n    \"valueAsDate\",\n    \"valueAsNumber\",\n    \"valueAsString\",\n    \"valueInSpecifiedUnits\",\n    \"valueMissing\",\n    \"valueOf\",\n    \"valueText\",\n    \"valueType\",\n    \"values\",\n    \"vector-effect\",\n    \"vectorEffect\",\n    \"velocityAngular\",\n    \"velocityExpansion\",\n    \"velocityX\",\n    \"velocityY\",\n    \"vendor\",\n    \"vendorSub\",\n    \"verify\",\n    \"version\",\n    \"vertexAttrib1f\",\n    \"vertexAttrib1fv\",\n    \"vertexAttrib2f\",\n    \"vertexAttrib2fv\",\n    \"vertexAttrib3f\",\n    \"vertexAttrib3fv\",\n    \"vertexAttrib4f\",\n    \"vertexAttrib4fv\",\n    \"vertexAttribDivisorANGLE\",\n    \"vertexAttribPointer\",\n    \"vertical\",\n    \"vertical-align\",\n    \"verticalAlign\",\n    \"verticalOverflow\",\n    \"vibrate\",\n    \"videoHeight\",\n    \"videoTracks\",\n    \"videoWidth\",\n    \"view\",\n    \"viewBox\",\n    \"viewBoxString\",\n    \"viewTarget\",\n    \"viewTargetString\",\n    \"viewport\",\n    \"viewportAnchorX\",\n    \"viewportAnchorY\",\n    \"viewportElement\",\n    \"visibility\",\n    \"visibilityState\",\n    \"visible\",\n    \"vlinkColor\",\n    \"voice\",\n    \"volume\",\n    \"vrml\",\n    \"vspace\",\n    \"w\",\n    \"wand\",\n    \"warn\",\n    \"wasClean\",\n    \"watch\",\n    \"watchPosition\",\n    \"webdriver\",\n    \"webkitAddKey\",\n    \"webkitAnimation\",\n    \"webkitAnimationDelay\",\n    \"webkitAnimationDirection\",\n    \"webkitAnimationDuration\",\n    \"webkitAnimationFillMode\",\n    \"webkitAnimationIterationCount\",\n    \"webkitAnimationName\",\n    \"webkitAnimationPlayState\",\n    \"webkitAnimationTimingFunction\",\n    \"webkitAppearance\",\n    \"webkitAudioContext\",\n    \"webkitAudioDecodedByteCount\",\n    \"webkitAudioPannerNode\",\n    \"webkitBackfaceVisibility\",\n    \"webkitBackground\",\n    \"webkitBackgroundAttachment\",\n    \"webkitBackgroundClip\",\n    \"webkitBackgroundColor\",\n    \"webkitBackgroundImage\",\n    \"webkitBackgroundOrigin\",\n    \"webkitBackgroundPosition\",\n    \"webkitBackgroundPositionX\",\n    \"webkitBackgroundPositionY\",\n    \"webkitBackgroundRepeat\",\n    \"webkitBackgroundSize\",\n    \"webkitBackingStorePixelRatio\",\n    \"webkitBorderImage\",\n    \"webkitBorderImageOutset\",\n    \"webkitBorderImageRepeat\",\n    \"webkitBorderImageSlice\",\n    \"webkitBorderImageSource\",\n    \"webkitBorderImageWidth\",\n    \"webkitBoxAlign\",\n    \"webkitBoxDirection\",\n    \"webkitBoxFlex\",\n    \"webkitBoxOrdinalGroup\",\n    \"webkitBoxOrient\",\n    \"webkitBoxPack\",\n    \"webkitBoxSizing\",\n    \"webkitCancelAnimationFrame\",\n    \"webkitCancelFullScreen\",\n    \"webkitCancelKeyRequest\",\n    \"webkitCancelRequestAnimationFrame\",\n    \"webkitClearResourceTimings\",\n    \"webkitClosedCaptionsVisible\",\n    \"webkitConvertPointFromNodeToPage\",\n    \"webkitConvertPointFromPageToNode\",\n    \"webkitCreateShadowRoot\",\n    \"webkitCurrentFullScreenElement\",\n    \"webkitCurrentPlaybackTargetIsWireless\",\n    \"webkitDirectionInvertedFromDevice\",\n    \"webkitDisplayingFullscreen\",\n    \"webkitEnterFullScreen\",\n    \"webkitEnterFullscreen\",\n    \"webkitExitFullScreen\",\n    \"webkitExitFullscreen\",\n    \"webkitExitPointerLock\",\n    \"webkitFullScreenKeyboardInputAllowed\",\n    \"webkitFullscreenElement\",\n    \"webkitFullscreenEnabled\",\n    \"webkitGenerateKeyRequest\",\n    \"webkitGetAsEntry\",\n    \"webkitGetDatabaseNames\",\n    \"webkitGetEntries\",\n    \"webkitGetEntriesByName\",\n    \"webkitGetEntriesByType\",\n    \"webkitGetFlowByName\",\n    \"webkitGetGamepads\",\n    \"webkitGetImageDataHD\",\n    \"webkitGetNamedFlows\",\n    \"webkitGetRegionFlowRanges\",\n    \"webkitGetUserMedia\",\n    \"webkitHasClosedCaptions\",\n    \"webkitHidden\",\n    \"webkitIDBCursor\",\n    \"webkitIDBDatabase\",\n    \"webkitIDBDatabaseError\",\n    \"webkitIDBDatabaseException\",\n    \"webkitIDBFactory\",\n    \"webkitIDBIndex\",\n    \"webkitIDBKeyRange\",\n    \"webkitIDBObjectStore\",\n    \"webkitIDBRequest\",\n    \"webkitIDBTransaction\",\n    \"webkitImageSmoothingEnabled\",\n    \"webkitIndexedDB\",\n    \"webkitInitMessageEvent\",\n    \"webkitIsFullScreen\",\n    \"webkitKeys\",\n    \"webkitLineDashOffset\",\n    \"webkitLockOrientation\",\n    \"webkitMatchesSelector\",\n    \"webkitMediaStream\",\n    \"webkitNotifications\",\n    \"webkitOfflineAudioContext\",\n    \"webkitOrientation\",\n    \"webkitPeerConnection00\",\n    \"webkitPersistentStorage\",\n    \"webkitPointerLockElement\",\n    \"webkitPostMessage\",\n    \"webkitPreservesPitch\",\n    \"webkitPutImageDataHD\",\n    \"webkitRTCPeerConnection\",\n    \"webkitRegionOverset\",\n    \"webkitRequestAnimationFrame\",\n    \"webkitRequestFileSystem\",\n    \"webkitRequestFullScreen\",\n    \"webkitRequestFullscreen\",\n    \"webkitRequestPointerLock\",\n    \"webkitResolveLocalFileSystemURL\",\n    \"webkitSetMediaKeys\",\n    \"webkitSetResourceTimingBufferSize\",\n    \"webkitShadowRoot\",\n    \"webkitShowPlaybackTargetPicker\",\n    \"webkitSlice\",\n    \"webkitSpeechGrammar\",\n    \"webkitSpeechGrammarList\",\n    \"webkitSpeechRecognition\",\n    \"webkitSpeechRecognitionError\",\n    \"webkitSpeechRecognitionEvent\",\n    \"webkitStorageInfo\",\n    \"webkitSupportsFullscreen\",\n    \"webkitTemporaryStorage\",\n    \"webkitTextSizeAdjust\",\n    \"webkitTransform\",\n    \"webkitTransformOrigin\",\n    \"webkitTransition\",\n    \"webkitTransitionDelay\",\n    \"webkitTransitionDuration\",\n    \"webkitTransitionProperty\",\n    \"webkitTransitionTimingFunction\",\n    \"webkitURL\",\n    \"webkitUnlockOrientation\",\n    \"webkitUserSelect\",\n    \"webkitVideoDecodedByteCount\",\n    \"webkitVisibilityState\",\n    \"webkitWirelessVideoPlaybackDisabled\",\n    \"webkitdropzone\",\n    \"webstore\",\n    \"weight\",\n    \"whatToShow\",\n    \"wheelDelta\",\n    \"wheelDeltaX\",\n    \"wheelDeltaY\",\n    \"which\",\n    \"white-space\",\n    \"whiteSpace\",\n    \"wholeText\",\n    \"widows\",\n    \"width\",\n    \"will-change\",\n    \"willChange\",\n    \"willValidate\",\n    \"window\",\n    \"withCredentials\",\n    \"word-break\",\n    \"word-spacing\",\n    \"word-wrap\",\n    \"wordBreak\",\n    \"wordSpacing\",\n    \"wordWrap\",\n    \"wrap\",\n    \"wrapKey\",\n    \"write\",\n    \"writeln\",\n    \"writingMode\",\n    \"x\",\n    \"x1\",\n    \"x2\",\n    \"xChannelSelector\",\n    \"xmlEncoding\",\n    \"xmlStandalone\",\n    \"xmlVersion\",\n    \"xmlbase\",\n    \"xmllang\",\n    \"xmlspace\",\n    \"y\",\n    \"y1\",\n    \"y2\",\n    \"yChannelSelector\",\n    \"yandex\",\n    \"z\",\n    \"z-index\",\n    \"zIndex\",\n    \"zoom\",\n    \"zoomAndPan\",\n    \"zoomRectScreen\"\n]\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n/* global global, self */\n\nimport {\n    defaults,\n    push_uniq,\n} from \"./utils\";\nimport { base54 } from \"./scope\";\nimport {\n    AST_Call,\n    AST_Conditional,\n    AST_Dot,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    TreeTransformer,\n    TreeWalker,\n} from \"./ast.js\";\nimport { domprops } from \"../tools/domprops.js\";\n\nfunction find_builtins(reserved) {\n    domprops.forEach(add);\n\n    // Compatibility fix for some standard defined globals not defined on every js environment\n    var new_globals = [\"Symbol\", \"Map\", \"Promise\", \"Proxy\", \"Reflect\", \"Set\", \"WeakMap\", \"WeakSet\"];\n    var objects = {};\n    var global_ref = typeof global === \"object\" ? global : self;\n\n    new_globals.forEach(function (new_global) {\n        objects[new_global] = global_ref[new_global] || new Function();\n    });\n\n    // NaN will be included due to Number.NaN\n    [\n        \"null\",\n        \"true\",\n        \"false\",\n        \"Infinity\",\n        \"-Infinity\",\n        \"undefined\",\n    ].forEach(add);\n    [ Object, Array, Function, Number,\n      String, Boolean, Error, Math,\n      Date, RegExp, objects.Symbol, ArrayBuffer,\n      DataView, decodeURI, decodeURIComponent,\n      encodeURI, encodeURIComponent, eval, EvalError,\n      Float32Array, Float64Array, Int8Array, Int16Array,\n      Int32Array, isFinite, isNaN, JSON, objects.Map, parseFloat,\n      parseInt, objects.Promise, objects.Proxy, RangeError, ReferenceError,\n      objects.Reflect, objects.Set, SyntaxError, TypeError, Uint8Array,\n      Uint8ClampedArray, Uint16Array, Uint32Array, URIError,\n      objects.WeakMap, objects.WeakSet\n    ].forEach(function(ctor) {\n        Object.getOwnPropertyNames(ctor).map(add);\n        if (ctor.prototype) {\n            Object.getOwnPropertyNames(ctor.prototype).map(add);\n        }\n    });\n    function add(name) {\n        reserved.add(name);\n    }\n}\n\nfunction reserve_quoted_keys(ast, reserved) {\n    function add(name) {\n        push_uniq(reserved, name);\n    }\n\n    ast.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_ObjectKeyVal && node.quote) {\n            add(node.key);\n        } else if (node instanceof AST_ObjectProperty && node.quote) {\n            add(node.key.name);\n        } else if (node instanceof AST_Sub) {\n            addStrings(node.property, add);\n        }\n    }));\n}\n\nfunction addStrings(node, add) {\n    node.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_Sequence) {\n            addStrings(node.tail_node(), add);\n        } else if (node instanceof AST_String) {\n            add(node.value);\n        } else if (node instanceof AST_Conditional) {\n            addStrings(node.consequent, add);\n            addStrings(node.alternative, add);\n        }\n        return true;\n    }));\n}\n\nfunction mangle_properties(ast, options) {\n    options = defaults(options, {\n        builtins: false,\n        cache: null,\n        debug: false,\n        keep_quoted: false,\n        only_cache: false,\n        regex: null,\n        reserved: null,\n    }, true);\n\n    var reserved_option = options.reserved;\n    if (!Array.isArray(reserved_option)) reserved_option = [reserved_option];\n    var reserved = new Set(reserved_option);\n    if (!options.builtins) find_builtins(reserved);\n\n    var cname = -1;\n    var cache;\n    if (options.cache) {\n        cache = options.cache.props;\n        cache.forEach(function(mangled_name) {\n            reserved.add(mangled_name);\n        });\n    } else {\n        cache = new Map();\n    }\n\n    var regex = options.regex && new RegExp(options.regex);\n\n    // note debug is either false (disabled), or a string of the debug suffix to use (enabled).\n    // note debug may be enabled as an empty string, which is falsey. Also treat passing 'true'\n    // the same as passing an empty string.\n    var debug = options.debug !== false;\n    var debug_name_suffix;\n    if (debug) {\n        debug_name_suffix = (options.debug === true ? \"\" : options.debug);\n    }\n\n    var names_to_mangle = new Set();\n    var unmangleable = new Set();\n\n    var keep_quoted_strict = options.keep_quoted === \"strict\";\n\n    // step 1: find candidates to mangle\n    ast.walk(new TreeWalker(function(node) {\n        if (node instanceof AST_ObjectKeyVal) {\n            if (typeof node.key == \"string\" &&\n                (!keep_quoted_strict || !node.quote)) {\n                add(node.key);\n            }\n        } else if (node instanceof AST_ObjectProperty) {\n            // setter or getter, since KeyVal is handled above\n            if (!keep_quoted_strict || !node.key.end.quote) {\n                add(node.key.name);\n            }\n        } else if (node instanceof AST_Dot) {\n            var root = node;\n            while (root.expression) {\n                root = root.expression;\n            }\n            if (!(root.thedef && root.thedef.undeclared) &&\n                (!keep_quoted_strict || !node.quote)) {\n                add(node.property);\n            }\n        } else if (node instanceof AST_Sub) {\n            if (!keep_quoted_strict) {\n                addStrings(node.property, add);\n            }\n        } else if (node instanceof AST_Call\n            && node.expression.print_to_string() == \"Object.defineProperty\") {\n            addStrings(node.args[1], add);\n        }\n    }));\n\n    // step 2: transform the tree, renaming properties\n    return ast.transform(new TreeTransformer(function(node) {\n        if (node instanceof AST_ObjectKeyVal) {\n            if (typeof node.key == \"string\" &&\n                (!keep_quoted_strict || !node.quote)) {\n                node.key = mangle(node.key);\n            }\n        } else if (node instanceof AST_ObjectProperty) {\n            // setter or getter\n            if (!keep_quoted_strict || !node.key.end.quote) {\n                node.key.name = mangle(node.key.name);\n            }\n        } else if (node instanceof AST_Dot) {\n            if (!keep_quoted_strict || !node.quote) {\n                node.property = mangle(node.property);\n            }\n        } else if (!options.keep_quoted && node instanceof AST_Sub) {\n            node.property = mangleStrings(node.property);\n        } else if (node instanceof AST_Call\n            && node.expression.print_to_string() == \"Object.defineProperty\") {\n            node.args[1] = mangleStrings(node.args[1]);\n        }\n    }));\n\n    // only function declarations after this line\n\n    function can_mangle(name) {\n        if (unmangleable.has(name)) return false;\n        if (reserved.has(name)) return false;\n        if (options.only_cache) {\n            return cache.has(name);\n        }\n        if (/^-?[0-9]+(\\.[0-9]+)?(e[+-][0-9]+)?$/.test(name)) return false;\n        return true;\n    }\n\n    function should_mangle(name) {\n        if (regex && !regex.test(name)) return false;\n        if (reserved.has(name)) return false;\n        return cache.has(name)\n            || names_to_mangle.has(name);\n    }\n\n    function add(name) {\n        if (can_mangle(name))\n            names_to_mangle.add(name);\n\n        if (!should_mangle(name)) {\n            unmangleable.add(name);\n        }\n    }\n\n    function mangle(name) {\n        if (!should_mangle(name)) {\n            return name;\n        }\n\n        var mangled = cache.get(name);\n        if (!mangled) {\n            if (debug) {\n                // debug mode: use a prefix and suffix to preserve readability, e.g. o.foo -> o._$foo$NNN_.\n                var debug_mangled = \"_$\" + name + \"$\" + debug_name_suffix + \"_\";\n\n                if (can_mangle(debug_mangled)) {\n                    mangled = debug_mangled;\n                }\n            }\n\n            // either debug mode is off, or it is on and we could not use the mangled name\n            if (!mangled) {\n                do {\n                    mangled = base54(++cname);\n                } while (!can_mangle(mangled));\n            }\n\n            cache.set(name, mangled);\n        }\n        return mangled;\n    }\n\n    function mangleStrings(node) {\n        return node.transform(new TreeTransformer(function(node) {\n            if (node instanceof AST_Sequence) {\n                var last = node.expressions.length - 1;\n                node.expressions[last] = mangleStrings(node.expressions[last]);\n            } else if (node instanceof AST_String) {\n                node.value = mangle(node.value);\n            } else if (node instanceof AST_Conditional) {\n                node.consequent = mangleStrings(node.consequent);\n                node.alternative = mangleStrings(node.alternative);\n            }\n            return node;\n        }));\n    }\n}\n\nexport {\n    reserve_quoted_keys,\n    mangle_properties,\n};\n","\"use strict\";\n/* eslint-env browser, es6, node */\n\nimport {\n    defaults,\n    map_from_object,\n    map_to_object,\n    HOP,\n} from \"./utils.js\";\nimport {\n    AST_Node,\n    AST_Toplevel,\n} from \"./ast.js\";\nimport { parse } from \"./parse.js\";\nimport { OutputStream } from \"./output.js\";\nimport { Compressor } from \"./compress/index.js\";\nimport { base54 } from \"./scope.js\";\nimport { SourceMap } from \"./sourcemap.js\";\nimport {\n    mangle_properties,\n    reserve_quoted_keys,\n} from \"./propmangle.js\";\n\nvar to_ascii = typeof atob == \"undefined\" ? function(b64) {\n    return Buffer.from(b64, \"base64\").toString();\n} : atob;\nvar to_base64 = typeof btoa == \"undefined\" ? function(str) {\n    return Buffer.from(str).toString(\"base64\");\n} : btoa;\n\nfunction read_source_map(code) {\n    var match = /(?:^|[^.])\\/\\/# sourceMappingURL=data:application\\/json(;[\\w=-]*)?;base64,([+/0-9A-Za-z]*=*)\\s*$/.exec(code);\n    if (!match) {\n        AST_Node.warn(\"inline source map not found\");\n        return null;\n    }\n    return to_ascii(match[2]);\n}\n\nfunction set_shorthand(name, options, keys) {\n    if (options[name]) {\n        keys.forEach(function(key) {\n            if (options[key]) {\n                if (typeof options[key] != \"object\") options[key] = {};\n                if (!(name in options[key])) options[key][name] = options[name];\n            }\n        });\n    }\n}\n\nfunction init_cache(cache) {\n    if (!cache) return;\n    if (!(\"props\" in cache)) {\n        cache.props = new Map();\n    } else if (!(cache.props instanceof Map)) {\n        cache.props = map_from_object(cache.props);\n    }\n}\n\nfunction to_json(cache) {\n    return {\n        props: map_to_object(cache.props)\n    };\n}\n\nfunction minify(files, options) {\n    var warn_function = AST_Node.warn_function;\n    try {\n        options = defaults(options, {\n            compress: {},\n            ecma: undefined,\n            enclose: false,\n            ie8: false,\n            keep_classnames: undefined,\n            keep_fnames: false,\n            mangle: {},\n            module: false,\n            nameCache: null,\n            output: {},\n            parse: {},\n            rename: undefined,\n            safari10: false,\n            sourceMap: false,\n            timings: false,\n            toplevel: false,\n            warnings: false,\n            wrap: false,\n        }, true);\n        var timings = options.timings && {\n            start: Date.now()\n        };\n        if (options.keep_classnames === undefined) {\n            options.keep_classnames = options.keep_fnames;\n        }\n        if (options.rename === undefined) {\n            options.rename = options.compress && options.mangle;\n        }\n        set_shorthand(\"ecma\", options, [ \"parse\", \"compress\", \"output\" ]);\n        set_shorthand(\"ie8\", options, [ \"compress\", \"mangle\", \"output\" ]);\n        set_shorthand(\"keep_classnames\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"keep_fnames\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"module\", options, [ \"parse\", \"compress\", \"mangle\" ]);\n        set_shorthand(\"safari10\", options, [ \"mangle\", \"output\" ]);\n        set_shorthand(\"toplevel\", options, [ \"compress\", \"mangle\" ]);\n        set_shorthand(\"warnings\", options, [ \"compress\" ]);\n        var quoted_props;\n        if (options.mangle) {\n            options.mangle = defaults(options.mangle, {\n                cache: options.nameCache && (options.nameCache.vars || {}),\n                eval: false,\n                ie8: false,\n                keep_classnames: false,\n                keep_fnames: false,\n                module: false,\n                properties: false,\n                reserved: [],\n                safari10: false,\n                toplevel: false,\n            }, true);\n            if (options.mangle.properties) {\n                if (typeof options.mangle.properties != \"object\") {\n                    options.mangle.properties = {};\n                }\n                if (options.mangle.properties.keep_quoted) {\n                    quoted_props = options.mangle.properties.reserved;\n                    if (!Array.isArray(quoted_props)) quoted_props = [];\n                    options.mangle.properties.reserved = quoted_props;\n                }\n                if (options.nameCache && !(\"cache\" in options.mangle.properties)) {\n                    options.mangle.properties.cache = options.nameCache.props || {};\n                }\n            }\n            init_cache(options.mangle.cache);\n            init_cache(options.mangle.properties.cache);\n        }\n        if (options.sourceMap) {\n            options.sourceMap = defaults(options.sourceMap, {\n                content: null,\n                filename: null,\n                includeSources: false,\n                root: null,\n                url: null,\n            }, true);\n        }\n        var warnings = [];\n        if (options.warnings && !AST_Node.warn_function) {\n            AST_Node.warn_function = function(warning) {\n                warnings.push(warning);\n            };\n        }\n        if (timings) timings.parse = Date.now();\n        var toplevel;\n        if (files instanceof AST_Toplevel) {\n            toplevel = files;\n        } else {\n            if (typeof files == \"string\") {\n                files = [ files ];\n            }\n            options.parse = options.parse || {};\n            options.parse.toplevel = null;\n            for (var name in files) if (HOP(files, name)) {\n                options.parse.filename = name;\n                options.parse.toplevel = parse(files[name], options.parse);\n                if (options.sourceMap && options.sourceMap.content == \"inline\") {\n                    if (Object.keys(files).length > 1)\n                        throw new Error(\"inline source map only works with singular input\");\n                    options.sourceMap.content = read_source_map(files[name]);\n                }\n            }\n            toplevel = options.parse.toplevel;\n        }\n        if (quoted_props && options.mangle.properties.keep_quoted !== \"strict\") {\n            reserve_quoted_keys(toplevel, quoted_props);\n        }\n        if (options.wrap) {\n            toplevel = toplevel.wrap_commonjs(options.wrap);\n        }\n        if (options.enclose) {\n            toplevel = toplevel.wrap_enclose(options.enclose);\n        }\n        if (timings) timings.rename = Date.now();\n        // disable rename on harmony due to expand_names bug in for-of loops\n        // https://github.com/mishoo/UglifyJS2/issues/2794\n        if (0 && options.rename) {\n            toplevel.figure_out_scope(options.mangle);\n            toplevel.expand_names(options.mangle);\n        }\n        if (timings) timings.compress = Date.now();\n        if (options.compress) toplevel = new Compressor(options.compress).compress(toplevel);\n        if (timings) timings.scope = Date.now();\n        if (options.mangle) toplevel.figure_out_scope(options.mangle);\n        if (timings) timings.mangle = Date.now();\n        if (options.mangle) {\n            base54.reset();\n            toplevel.compute_char_frequency(options.mangle);\n            toplevel.mangle_names(options.mangle);\n        }\n        if (timings) timings.properties = Date.now();\n        if (options.mangle && options.mangle.properties) {\n            toplevel = mangle_properties(toplevel, options.mangle.properties);\n        }\n        if (timings) timings.output = Date.now();\n        var result = {};\n        if (options.output.ast) {\n            result.ast = toplevel;\n        }\n        if (!HOP(options.output, \"code\") || options.output.code) {\n            if (options.sourceMap) {\n                if (typeof options.sourceMap.content == \"string\") {\n                    options.sourceMap.content = JSON.parse(options.sourceMap.content);\n                }\n                options.output.source_map = SourceMap({\n                    file: options.sourceMap.filename,\n                    orig: options.sourceMap.content,\n                    root: options.sourceMap.root\n                });\n                if (options.sourceMap.includeSources) {\n                    if (files instanceof AST_Toplevel) {\n                        throw new Error(\"original source content unavailable\");\n                    } else for (var name in files) if (HOP(files, name)) {\n                        options.output.source_map.get().setSourceContent(name, files[name]);\n                    }\n                }\n            }\n            delete options.output.ast;\n            delete options.output.code;\n            var stream = OutputStream(options.output);\n            toplevel.print(stream);\n            result.code = stream.get();\n            if (options.sourceMap) {\n                result.map = options.output.source_map.toString();\n                if (options.sourceMap.url == \"inline\") {\n                    result.code += \"\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\" + to_base64(result.map);\n                } else if (options.sourceMap.url) {\n                    result.code += \"\\n//# sourceMappingURL=\" + options.sourceMap.url;\n                }\n            }\n        }\n        if (options.nameCache && options.mangle) {\n            if (options.mangle.cache) options.nameCache.vars = to_json(options.mangle.cache);\n            if (options.mangle.properties && options.mangle.properties.cache) {\n                options.nameCache.props = to_json(options.mangle.properties.cache);\n            }\n        }\n        if (timings) {\n            timings.end = Date.now();\n            result.timings = {\n                parse: 1e-3 * (timings.rename - timings.parse),\n                rename: 1e-3 * (timings.compress - timings.rename),\n                compress: 1e-3 * (timings.scope - timings.compress),\n                scope: 1e-3 * (timings.mangle - timings.scope),\n                mangle: 1e-3 * (timings.properties - timings.mangle),\n                properties: 1e-3 * (timings.output - timings.properties),\n                output: 1e-3 * (timings.end - timings.output),\n                total: 1e-3 * (timings.end - timings.start)\n            };\n        }\n        if (warnings.length) {\n            result.warnings = warnings;\n        }\n        return result;\n    } catch (ex) {\n        return { error: ex };\n    } finally {\n        AST_Node.warn_function = warn_function;\n    }\n}\n\nexport {\n  minify,\n  to_ascii,\n};\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport MOZ_SourceMap from \"source-map\";\nimport {\n    defaults,\n} from \"./utils.js\";\n\n// a small wrapper around fitzgen's source-map library\nfunction SourceMap(options) {\n    options = defaults(options, {\n        file : null,\n        root : null,\n        orig : null,\n\n        orig_line_diff : 0,\n        dest_line_diff : 0,\n    });\n    var generator = new MOZ_SourceMap.SourceMapGenerator({\n        file       : options.file,\n        sourceRoot : options.root\n    });\n    var orig_map = options.orig && new MOZ_SourceMap.SourceMapConsumer(options.orig);\n\n    if (orig_map) {\n        orig_map.sources.forEach(function(source) {\n            var sourceContent = orig_map.sourceContentFor(source, true);\n            if (sourceContent) {\n                generator.setSourceContent(source, sourceContent);\n            }\n        });\n    }\n\n    function add(source, gen_line, gen_col, orig_line, orig_col, name) {\n        if (orig_map) {\n            var info = orig_map.originalPositionFor({\n                line: orig_line,\n                column: orig_col\n            });\n            if (info.source === null) {\n                return;\n            }\n            source = info.source;\n            orig_line = info.line;\n            orig_col = info.column;\n            name = info.name || name;\n        }\n        generator.addMapping({\n            generated : { line: gen_line + options.dest_line_diff, column: gen_col },\n            original  : { line: orig_line + options.orig_line_diff, column: orig_col },\n            source    : source,\n            name      : name\n        });\n    }\n    return {\n        add        : add,\n        get        : function() { return generator; },\n        toString   : function() { return JSON.stringify(generator.toJSON()); }\n    };\n}\n\nexport {\n    SourceMap,\n};\n","import { minify } from \"../lib/minify\";\n\nexport function default_options() {\n    const defs = {};\n\n    Object.keys(infer_options({ 0: 0 })).forEach((component) => {\n        const options = infer_options({\n            [component]: {0: 0}\n        });\n\n        if (options) defs[component] = options;\n    });\n    return defs;\n}\n\nfunction infer_options(options) {\n    var result = minify(\"\", options);\n    return result.error && result.error.defs;\n}\n","/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport * as ast from \"./ast.js\";\nimport {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Atom,\n    AST_Await,\n    AST_Binary,\n    AST_Block,\n    AST_BlockStatement,\n    AST_Boolean,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefClass,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_Label,\n    AST_LabeledStatement,\n    AST_LabelRef,\n    AST_Lambda,\n    AST_Let,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolCatch,\n    AST_SymbolClass,\n    AST_SymbolConst,\n    AST_SymbolDefClass,\n    AST_SymbolDefun,\n    AST_SymbolExport,\n    AST_SymbolExportForeign,\n    AST_SymbolFunarg,\n    AST_SymbolImport,\n    AST_SymbolImportForeign,\n    AST_SymbolLambda,\n    AST_SymbolLet,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_SymbolVar,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Token,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n} from \"./ast.js\";\n\n(function() {\n\n    var normalize_directives = function(body) {\n        var in_directive = true;\n\n        for (var i = 0; i < body.length; i++) {\n            if (in_directive && body[i] instanceof AST_Statement && body[i].body instanceof AST_String) {\n                body[i] = new AST_Directive({\n                    start: body[i].start,\n                    end: body[i].end,\n                    value: body[i].body.value\n                });\n            } else if (in_directive && !(body[i] instanceof AST_Statement && body[i].body instanceof AST_String)) {\n                in_directive = false;\n            }\n        }\n\n        return body;\n    };\n\n    var MOZ_TO_ME = {\n        Program: function(M) {\n            return new AST_Toplevel({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: normalize_directives(M.body.map(from_moz))\n            });\n        },\n        ArrayPattern: function(M) {\n            return new AST_Destructuring({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                names: M.elements.map(function(elm) {\n                    if (elm === null) {\n                        return new AST_Hole();\n                    }\n                    return from_moz(elm);\n                }),\n                is_array: true\n            });\n        },\n        ObjectPattern: function(M) {\n            return new AST_Destructuring({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                names: M.properties.map(from_moz),\n                is_array: false\n            });\n        },\n        AssignmentPattern: function(M) {\n            return new AST_Binary({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                left: from_moz(M.left),\n                operator: \"=\",\n                right: from_moz(M.right)\n            });\n        },\n        SpreadElement: function(M) {\n            return new AST_Expansion({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n        RestElement: function(M) {\n            return new AST_Expansion({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                expression: from_moz(M.argument)\n            });\n        },\n        TemplateElement: function(M) {\n            return new AST_TemplateSegment({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                value: M.value.cooked,\n                raw: M.value.raw\n            });\n        },\n        TemplateLiteral: function(M) {\n            var segments = [];\n            for (var i = 0; i < M.quasis.length; i++) {\n                segments.push(from_moz(M.quasis[i]));\n                if (M.expressions[i]) {\n                    segments.push(from_moz(M.expressions[i]));\n                }\n            }\n            return new AST_TemplateString({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                segments: segments\n            });\n        },\n        TaggedTemplateExpression: function(M) {\n            return new AST_PrefixedTemplateString({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                template_string: from_moz(M.quasi),\n                prefix: from_moz(M.tag)\n            });\n        },\n        FunctionDeclaration: function(M) {\n            return new AST_Defun({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                is_generator: M.generator,\n                async: M.async,\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        FunctionExpression: function(M) {\n            return new AST_Function({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                name: from_moz(M.id),\n                argnames: M.params.map(from_moz),\n                is_generator: M.generator,\n                async: M.async,\n                body: normalize_directives(from_moz(M.body).body)\n            });\n        },\n        ArrowFunctionExpression: function(M) {\n            return new AST_Arrow({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                argnames: M.params.map(from_moz),\n                body: from_moz(M.body),\n                async: M.async,\n            });\n        },\n        ExpressionStatement: function(M) {\n            return new AST_SimpleStatement({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                body: from_moz(M.expression)\n            });\n        },\n        TryStatement: function(M) {\n            var handlers = M.handlers || [M.handler];\n            if (handlers.length > 1 || M.guardedHandlers && M.guardedHandlers.length) {\n                throw new Error(\"Multiple catch clauses are not supported.\");\n            }\n            return new AST_Try({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                body     : from_moz(M.block).body,\n                bcatch   : from_moz(handlers[0]),\n                bfinally : M.finalizer ? new AST_Finally(from_moz(M.finalizer)) : null\n            });\n        },\n        Property: function(M) {\n            var key = M.key;\n            var args = {\n                start    : my_start_token(key || M.value),\n                end      : my_end_token(M.value),\n                key      : key.type == \"Identifier\" ? key.name : key.value,\n                value    : from_moz(M.value)\n            };\n            if (M.computed) {\n                args.key = from_moz(M.key);\n            }\n            if (M.method) {\n                args.is_generator = M.value.generator;\n                args.async = M.value.async;\n                if (!M.computed) {\n                    args.key = new AST_SymbolMethod({ name: args.key });\n                } else {\n                    args.key = from_moz(M.key);\n                }\n                return new AST_ConciseMethod(args);\n            }\n            if (M.kind == \"init\") {\n                if (key.type != \"Identifier\" && key.type != \"Literal\") {\n                    args.key = from_moz(key);\n                }\n                return new AST_ObjectKeyVal(args);\n            }\n            if (typeof args.key === \"string\" || typeof args.key === \"number\") {\n                args.key = new AST_SymbolMethod({\n                    name: args.key\n                });\n            }\n            args.value = new AST_Accessor(args.value);\n            if (M.kind == \"get\") return new AST_ObjectGetter(args);\n            if (M.kind == \"set\") return new AST_ObjectSetter(args);\n            if (M.kind == \"method\") {\n                args.async = M.value.async;\n                args.is_generator = M.value.generator;\n                args.quote = M.computed ? \"\\\"\" : null;\n                return new AST_ConciseMethod(args);\n            }\n        },\n        MethodDefinition: function(M) {\n            var args = {\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                key      : M.computed ? from_moz(M.key) : new AST_SymbolMethod({ name: M.key.name || M.key.value }),\n                value    : from_moz(M.value),\n                static   : M.static,\n            };\n            if (M.kind == \"get\") {\n                return new AST_ObjectGetter(args);\n            }\n            if (M.kind == \"set\") {\n                return new AST_ObjectSetter(args);\n            }\n            args.is_generator = M.value.generator;\n            args.async = M.value.async;\n            return new AST_ConciseMethod(args);\n        },\n        ArrayExpression: function(M) {\n            return new AST_Array({\n                start    : my_start_token(M),\n                end      : my_end_token(M),\n                elements : M.elements.map(function(elem) {\n                    return elem === null ? new AST_Hole() : from_moz(elem);\n                })\n            });\n        },\n        ObjectExpression: function(M) {\n            return new AST_Object({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                properties : M.properties.map(function(prop) {\n                    if (prop.type === \"SpreadElement\") {\n                        return from_moz(prop);\n                    }\n                    prop.type = \"Property\";\n                    return from_moz(prop);\n                })\n            });\n        },\n        SequenceExpression: function(M) {\n            return new AST_Sequence({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expressions: M.expressions.map(from_moz)\n            });\n        },\n        MemberExpression: function(M) {\n            return new (M.computed ? AST_Sub : AST_Dot)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                property   : M.computed ? from_moz(M.property) : M.property.name,\n                expression : from_moz(M.object)\n            });\n        },\n        SwitchCase: function(M) {\n            return new (M.test ? AST_Case : AST_Default)({\n                start      : my_start_token(M),\n                end        : my_end_token(M),\n                expression : from_moz(M.test),\n                body       : M.consequent.map(from_moz)\n            });\n        },\n        VariableDeclaration: function(M) {\n            return new (M.kind === \"const\" ? AST_Const :\n                        M.kind === \"let\" ? AST_Let : AST_Var)({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                definitions : M.declarations.map(from_moz)\n            });\n        },\n\n        ImportDeclaration: function(M) {\n            var imported_name = null;\n            var imported_names = null;\n            M.specifiers.forEach(function (specifier) {\n                if (specifier.type === \"ImportSpecifier\") {\n                    if (!imported_names) { imported_names = []; }\n                    imported_names.push(new AST_NameMapping({\n                        start: my_start_token(specifier),\n                        end: my_end_token(specifier),\n                        foreign_name: from_moz(specifier.imported),\n                        name: from_moz(specifier.local)\n                    }));\n                } else if (specifier.type === \"ImportDefaultSpecifier\") {\n                    imported_name = from_moz(specifier.local);\n                } else if (specifier.type === \"ImportNamespaceSpecifier\") {\n                    if (!imported_names) { imported_names = []; }\n                    imported_names.push(new AST_NameMapping({\n                        start: my_start_token(specifier),\n                        end: my_end_token(specifier),\n                        foreign_name: new AST_SymbolImportForeign({ name: \"*\" }),\n                        name: from_moz(specifier.local)\n                    }));\n                }\n            });\n            return new AST_Import({\n                start       : my_start_token(M),\n                end         : my_end_token(M),\n                imported_name: imported_name,\n                imported_names : imported_names,\n                module_name : from_moz(M.source)\n            });\n        },\n        ExportAllDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_names: [\n                    new AST_NameMapping({\n                        name: new AST_SymbolExportForeign({ name: \"*\" }),\n                        foreign_name: new AST_SymbolExportForeign({ name: \"*\" })\n                    })\n                ],\n                module_name: from_moz(M.source)\n            });\n        },\n        ExportNamedDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_definition: from_moz(M.declaration),\n                exported_names: M.specifiers && M.specifiers.length ? M.specifiers.map(function (specifier) {\n                    return new AST_NameMapping({\n                        foreign_name: from_moz(specifier.exported),\n                        name: from_moz(specifier.local)\n                    });\n                }) : null,\n                module_name: from_moz(M.source)\n            });\n        },\n        ExportDefaultDeclaration: function(M) {\n            return new AST_Export({\n                start: my_start_token(M),\n                end: my_end_token(M),\n                exported_value: from_moz(M.declaration),\n                is_default: true\n            });\n        },\n        Literal: function(M) {\n            var val = M.value, args = {\n                start  : my_start_token(M),\n                end    : my_end_token(M)\n            };\n            if (val === null) return new AST_Null(args);\n            var rx = M.regex;\n            if (rx && rx.pattern) {\n                // RegExpLiteral as per ESTree AST spec\n                args.value = new RegExp(rx.pattern, rx.flags);\n                var raw = args.value.toString();\n                args.value.raw_source = rx.flags\n                    ? raw.substring(0, raw.length - rx.flags.length) + rx.flags\n                    : raw;\n                return new AST_RegExp(args);\n            } else if (rx) {\n                // support legacy RegExp\n                args.value = M.regex && M.raw ? M.raw : val;\n                return new AST_RegExp(args);\n            }\n            switch (typeof val) {\n              case \"string\":\n                args.value = val;\n                return new AST_String(args);\n              case \"number\":\n                args.value = val;\n                return new AST_Number(args);\n              case \"boolean\":\n                return new (val ? AST_True : AST_False)(args);\n            }\n        },\n        MetaProperty: function(M) {\n            if (M.meta.name === \"new\" && M.property.name === \"target\") {\n                return new AST_NewTarget({\n                    start: my_start_token(M),\n                    end: my_end_token(M)\n                });\n            }\n        },\n        Identifier: function(M) {\n            var p = FROM_MOZ_STACK[FROM_MOZ_STACK.length - 2];\n            return new (  p.type == \"LabeledStatement\" ? AST_Label\n                        : p.type == \"VariableDeclarator\" && p.id === M ? (p.kind == \"const\" ? AST_SymbolConst : p.kind == \"let\" ? AST_SymbolLet : AST_SymbolVar)\n                        : /Import.*Specifier/.test(p.type) ? (p.local === M ? AST_SymbolImport : AST_SymbolImportForeign)\n                        : p.type == \"ExportSpecifier\" ? (p.local === M ? AST_SymbolExport : AST_SymbolExportForeign)\n                        : p.type == \"FunctionExpression\" ? (p.id === M ? AST_SymbolLambda : AST_SymbolFunarg)\n                        : p.type == \"FunctionDeclaration\" ? (p.id === M ? AST_SymbolDefun : AST_SymbolFunarg)\n                        : p.type == \"ArrowFunctionExpression\" ? (p.params.includes(M)) ? AST_SymbolFunarg : AST_SymbolRef\n                        : p.type == \"ClassExpression\" ? (p.id === M ? AST_SymbolClass : AST_SymbolRef)\n                        : p.type == \"Property\" ? (p.key === M && p.computed || p.value === M ? AST_SymbolRef : AST_SymbolMethod)\n                        : p.type == \"ClassDeclaration\" ? (p.id === M ? AST_SymbolDefClass : AST_SymbolRef)\n                        : p.type == \"MethodDefinition\" ? (p.computed ? AST_SymbolRef : AST_SymbolMethod)\n                        : p.type == \"CatchClause\" ? AST_SymbolCatch\n                        : p.type == \"BreakStatement\" || p.type == \"ContinueStatement\" ? AST_LabelRef\n                        : AST_SymbolRef)({\n                            start : my_start_token(M),\n                            end   : my_end_token(M),\n                            name  : M.name\n                        });\n        }\n    };\n\n    MOZ_TO_ME.UpdateExpression =\n    MOZ_TO_ME.UnaryExpression = function To_Moz_Unary(M) {\n        var prefix = \"prefix\" in M ? M.prefix\n            : M.type == \"UnaryExpression\" ? true : false;\n        return new (prefix ? AST_UnaryPrefix : AST_UnaryPostfix)({\n            start      : my_start_token(M),\n            end        : my_end_token(M),\n            operator   : M.operator,\n            expression : from_moz(M.argument)\n        });\n    };\n\n    MOZ_TO_ME.ClassDeclaration =\n    MOZ_TO_ME.ClassExpression = function From_Moz_Class(M) {\n        return new (M.type === \"ClassDeclaration\" ? AST_DefClass : AST_ClassExpression)({\n            start    : my_start_token(M),\n            end      : my_end_token(M),\n            name     : from_moz(M.id),\n            extends  : from_moz(M.superClass),\n            properties: M.body.body.map(from_moz)\n        });\n    };\n\n    map(\"EmptyStatement\", AST_EmptyStatement);\n    map(\"BlockStatement\", AST_BlockStatement, \"body@body\");\n    map(\"IfStatement\", AST_If, \"test>condition, consequent>body, alternate>alternative\");\n    map(\"LabeledStatement\", AST_LabeledStatement, \"label>label, body>body\");\n    map(\"BreakStatement\", AST_Break, \"label>label\");\n    map(\"ContinueStatement\", AST_Continue, \"label>label\");\n    map(\"WithStatement\", AST_With, \"object>expression, body>body\");\n    map(\"SwitchStatement\", AST_Switch, \"discriminant>expression, cases@body\");\n    map(\"ReturnStatement\", AST_Return, \"argument>value\");\n    map(\"ThrowStatement\", AST_Throw, \"argument>value\");\n    map(\"WhileStatement\", AST_While, \"test>condition, body>body\");\n    map(\"DoWhileStatement\", AST_Do, \"test>condition, body>body\");\n    map(\"ForStatement\", AST_For, \"init>init, test>condition, update>step, body>body\");\n    map(\"ForInStatement\", AST_ForIn, \"left>init, right>object, body>body\");\n    map(\"ForOfStatement\", AST_ForOf, \"left>init, right>object, body>body, await=await\");\n    map(\"AwaitExpression\", AST_Await, \"argument>expression\");\n    map(\"YieldExpression\", AST_Yield, \"argument>expression, delegate=is_star\");\n    map(\"DebuggerStatement\", AST_Debugger);\n    map(\"VariableDeclarator\", AST_VarDef, \"id>name, init>value\");\n    map(\"CatchClause\", AST_Catch, \"param>argname, body%body\");\n\n    map(\"ThisExpression\", AST_This);\n    map(\"Super\", AST_Super);\n    map(\"BinaryExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"LogicalExpression\", AST_Binary, \"operator=operator, left>left, right>right\");\n    map(\"AssignmentExpression\", AST_Assign, \"operator=operator, left>left, right>right\");\n    map(\"ConditionalExpression\", AST_Conditional, \"test>condition, consequent>consequent, alternate>alternative\");\n    map(\"NewExpression\", AST_New, \"callee>expression, arguments@args\");\n    map(\"CallExpression\", AST_Call, \"callee>expression, arguments@args\");\n\n    def_to_moz(AST_Toplevel, function To_Moz_Program(M) {\n        return to_moz_scope(\"Program\", M);\n    });\n\n    def_to_moz(AST_Expansion, function To_Moz_Spread(M, parent) {\n        return {\n            type: to_moz_in_destructuring() ? \"RestElement\" : \"SpreadElement\",\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_PrefixedTemplateString, function To_Moz_TaggedTemplateExpression(M) {\n        return {\n            type: \"TaggedTemplateExpression\",\n            tag: to_moz(M.prefix),\n            quasi: to_moz(M.template_string)\n        };\n    });\n\n    def_to_moz(AST_TemplateString, function To_Moz_TemplateLiteral(M) {\n        var quasis = [];\n        var expressions = [];\n        for (var i = 0; i < M.segments.length; i++) {\n            if (i % 2 !== 0) {\n                expressions.push(to_moz(M.segments[i]));\n            } else {\n                quasis.push({\n                    type: \"TemplateElement\",\n                    value: {\n                        raw: M.segments[i].raw,\n                        cooked: M.segments[i].value\n                    },\n                    tail: i === M.segments.length - 1\n                });\n            }\n        }\n        return {\n            type: \"TemplateLiteral\",\n            quasis: quasis,\n            expressions: expressions\n        };\n    });\n\n    def_to_moz(AST_Defun, function To_Moz_FunctionDeclaration(M) {\n        return {\n            type: \"FunctionDeclaration\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            generator: M.is_generator,\n            async: M.async,\n            body: to_moz_scope(\"BlockStatement\", M)\n        };\n    });\n\n    def_to_moz(AST_Function, function To_Moz_FunctionExpression(M, parent) {\n        var is_generator = parent.is_generator !== undefined ?\n            parent.is_generator : M.is_generator;\n        return {\n            type: \"FunctionExpression\",\n            id: to_moz(M.name),\n            params: M.argnames.map(to_moz),\n            generator: is_generator,\n            async: M.async,\n            body: to_moz_scope(\"BlockStatement\", M)\n        };\n    });\n\n    def_to_moz(AST_Arrow, function To_Moz_ArrowFunctionExpression(M) {\n        var body = M.body instanceof Array ? {\n            type: \"BlockStatement\",\n            body: M.body.map(to_moz)\n        } : to_moz(M.body);\n        return {\n            type: \"ArrowFunctionExpression\",\n            params: M.argnames.map(to_moz),\n            async: M.async,\n            body: body\n        };\n    });\n\n    def_to_moz(AST_Destructuring, function To_Moz_ObjectPattern(M) {\n        if (M.is_array) {\n            return {\n                type: \"ArrayPattern\",\n                elements: M.names.map(to_moz)\n            };\n        }\n        return {\n            type: \"ObjectPattern\",\n            properties: M.names.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Directive, function To_Moz_Directive(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: {\n                type: \"Literal\",\n                value: M.value\n            }\n        };\n    });\n\n    def_to_moz(AST_SimpleStatement, function To_Moz_ExpressionStatement(M) {\n        return {\n            type: \"ExpressionStatement\",\n            expression: to_moz(M.body)\n        };\n    });\n\n    def_to_moz(AST_SwitchBranch, function To_Moz_SwitchCase(M) {\n        return {\n            type: \"SwitchCase\",\n            test: to_moz(M.expression),\n            consequent: M.body.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Try, function To_Moz_TryStatement(M) {\n        return {\n            type: \"TryStatement\",\n            block: to_moz_block(M),\n            handler: to_moz(M.bcatch),\n            guardedHandlers: [],\n            finalizer: to_moz(M.bfinally)\n        };\n    });\n\n    def_to_moz(AST_Catch, function To_Moz_CatchClause(M) {\n        return {\n            type: \"CatchClause\",\n            param: to_moz(M.argname),\n            guard: null,\n            body: to_moz_block(M)\n        };\n    });\n\n    def_to_moz(AST_Definitions, function To_Moz_VariableDeclaration(M) {\n        return {\n            type: \"VariableDeclaration\",\n            kind:\n                M instanceof AST_Const ? \"const\" :\n                M instanceof AST_Let ? \"let\" : \"var\",\n            declarations: M.definitions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Export, function To_Moz_ExportDeclaration(M) {\n        if (M.exported_names) {\n            if (M.exported_names[0].name.name === \"*\") {\n                return {\n                    type: \"ExportAllDeclaration\",\n                    source: to_moz(M.module_name)\n                };\n            }\n            return {\n                type: \"ExportNamedDeclaration\",\n                specifiers: M.exported_names.map(function (name_mapping) {\n                    return {\n                        type: \"ExportSpecifier\",\n                        exported: to_moz(name_mapping.foreign_name),\n                        local: to_moz(name_mapping.name)\n                    };\n                }),\n                declaration: to_moz(M.exported_definition),\n                source: to_moz(M.module_name)\n            };\n        }\n        return {\n            type: M.is_default ? \"ExportDefaultDeclaration\" : \"ExportNamedDeclaration\",\n            declaration: to_moz(M.exported_value || M.exported_definition)\n        };\n    });\n\n    def_to_moz(AST_Import, function To_Moz_ImportDeclaration(M) {\n        var specifiers = [];\n        if (M.imported_name) {\n            specifiers.push({\n                type: \"ImportDefaultSpecifier\",\n                local: to_moz(M.imported_name)\n            });\n        }\n        if (M.imported_names && M.imported_names[0].foreign_name.name === \"*\") {\n            specifiers.push({\n                type: \"ImportNamespaceSpecifier\",\n                local: to_moz(M.imported_names[0].name)\n            });\n        } else if (M.imported_names) {\n            M.imported_names.forEach(function(name_mapping) {\n                specifiers.push({\n                    type: \"ImportSpecifier\",\n                    local: to_moz(name_mapping.name),\n                    imported: to_moz(name_mapping.foreign_name)\n                });\n            });\n        }\n        return {\n            type: \"ImportDeclaration\",\n            specifiers: specifiers,\n            source: to_moz(M.module_name)\n        };\n    });\n\n    def_to_moz(AST_Sequence, function To_Moz_SequenceExpression(M) {\n        return {\n            type: \"SequenceExpression\",\n            expressions: M.expressions.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_PropAccess, function To_Moz_MemberExpression(M) {\n        var isComputed = M instanceof AST_Sub;\n        return {\n            type: \"MemberExpression\",\n            object: to_moz(M.expression),\n            computed: isComputed,\n            property: isComputed ? to_moz(M.property) : {type: \"Identifier\", name: M.property}\n        };\n    });\n\n    def_to_moz(AST_Unary, function To_Moz_Unary(M) {\n        return {\n            type: M.operator == \"++\" || M.operator == \"--\" ? \"UpdateExpression\" : \"UnaryExpression\",\n            operator: M.operator,\n            prefix: M instanceof AST_UnaryPrefix,\n            argument: to_moz(M.expression)\n        };\n    });\n\n    def_to_moz(AST_Binary, function To_Moz_BinaryExpression(M) {\n        if (M.operator == \"=\" && to_moz_in_destructuring()) {\n            return {\n                type: \"AssignmentPattern\",\n                left: to_moz(M.left),\n                right: to_moz(M.right)\n            };\n        }\n        return {\n            type: M.operator == \"&&\" || M.operator == \"||\" ? \"LogicalExpression\" : \"BinaryExpression\",\n            left: to_moz(M.left),\n            operator: M.operator,\n            right: to_moz(M.right)\n        };\n    });\n\n    def_to_moz(AST_Array, function To_Moz_ArrayExpression(M) {\n        return {\n            type: \"ArrayExpression\",\n            elements: M.elements.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_Object, function To_Moz_ObjectExpression(M) {\n        return {\n            type: \"ObjectExpression\",\n            properties: M.properties.map(to_moz)\n        };\n    });\n\n    def_to_moz(AST_ObjectProperty, function To_Moz_Property(M, parent) {\n        var key = M.key instanceof AST_Node ? to_moz(M.key) : {\n            type: \"Identifier\",\n            value: M.key\n        };\n        if (typeof M.key === \"number\") {\n            key = {\n                type: \"Literal\",\n                value: Number(M.key)\n            };\n        }\n        if (typeof M.key === \"string\") {\n            key = {\n                type: \"Identifier\",\n                name: M.key\n            };\n        }\n        var kind;\n        var string_or_num = typeof M.key === \"string\" || typeof M.key === \"number\";\n        var computed = string_or_num ? false : !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef;\n        if (M instanceof AST_ObjectKeyVal) {\n            kind = \"init\";\n            computed = !string_or_num;\n        } else\n        if (M instanceof AST_ObjectGetter) {\n            kind = \"get\";\n        } else\n        if (M instanceof AST_ObjectSetter) {\n            kind = \"set\";\n        }\n        if (parent instanceof AST_Class) {\n            return {\n                type: \"MethodDefinition\",\n                computed: computed,\n                kind: kind,\n                static: M.static,\n                key: to_moz(M.key),\n                value: to_moz(M.value)\n            };\n        }\n        return {\n            type: \"Property\",\n            computed: computed,\n            kind: kind,\n            key: key,\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_ConciseMethod, function To_Moz_MethodDefinition(M, parent) {\n        if (parent instanceof AST_Object) {\n            return {\n                type: \"Property\",\n                computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,\n                kind: \"init\",\n                method: true,\n                shorthand: false,\n                key: to_moz(M.key),\n                value: to_moz(M.value)\n            };\n        }\n        return {\n            type: \"MethodDefinition\",\n            computed: !(M.key instanceof AST_Symbol) || M.key instanceof AST_SymbolRef,\n            kind: M.key === \"constructor\" ? \"constructor\" : \"method\",\n            static: M.static,\n            key: to_moz(M.key),\n            value: to_moz(M.value)\n        };\n    });\n\n    def_to_moz(AST_Class, function To_Moz_Class(M) {\n        var type = M instanceof AST_ClassExpression ? \"ClassExpression\" : \"ClassDeclaration\";\n        return {\n            type: type,\n            superClass: to_moz(M.extends),\n            id: M.name ? to_moz(M.name) : null,\n            body: {\n                type: \"ClassBody\",\n                body: M.properties.map(to_moz)\n            }\n        };\n    });\n\n    def_to_moz(AST_NewTarget, function To_Moz_MetaProperty(M) {\n        return {\n            type: \"MetaProperty\",\n            meta: {\n                type: \"Identifier\",\n                name: \"new\"\n            },\n            property: {\n                type: \"Identifier\",\n                name: \"target\"\n            }\n        };\n    });\n\n    def_to_moz(AST_Symbol, function To_Moz_Identifier(M, parent) {\n        if (M instanceof AST_SymbolMethod && parent.quote) {\n            return {\n                type: \"Literal\",\n                value: M.name\n            };\n        }\n        var def = M.definition();\n        return {\n            type: \"Identifier\",\n            name: def ? def.mangled_name || def.name : M.name\n        };\n    });\n\n    def_to_moz(AST_RegExp, function To_Moz_RegExpLiteral(M) {\n        var pattern = M.value.source;\n        var flags = M.value.toString().match(/[gimuys]*$/)[0];\n        return {\n            type: \"Literal\",\n            value: new RegExp(pattern, flags),\n            raw: M.value.raw_source,\n            regex: {\n                pattern: pattern,\n                flags: flags,\n            }\n        };\n    });\n\n    def_to_moz(AST_Constant, function To_Moz_Literal(M) {\n        var value = M.value;\n        if (typeof value === \"number\" && (value < 0 || (value === 0 && 1 / value < 0))) {\n            return {\n                type: \"UnaryExpression\",\n                operator: \"-\",\n                prefix: true,\n                argument: {\n                    type: \"Literal\",\n                    value: -value,\n                    raw: M.start.raw\n                }\n            };\n        }\n        return {\n            type: \"Literal\",\n            value: value,\n            raw: M.start.raw\n        };\n    });\n\n    def_to_moz(AST_Atom, function To_Moz_Atom(M) {\n        return {\n            type: \"Identifier\",\n            name: String(M.value)\n        };\n    });\n\n    AST_Boolean.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Null.DEFMETHOD(\"to_mozilla_ast\", AST_Constant.prototype.to_mozilla_ast);\n    AST_Hole.DEFMETHOD(\"to_mozilla_ast\", function To_Moz_ArrayHole() { return null; });\n\n    AST_Block.DEFMETHOD(\"to_mozilla_ast\", AST_BlockStatement.prototype.to_mozilla_ast);\n    AST_Lambda.DEFMETHOD(\"to_mozilla_ast\", AST_Function.prototype.to_mozilla_ast);\n\n    /* -----[ tools ]----- */\n\n    function raw_token(moznode) {\n        if (moznode.type == \"Literal\") {\n            return moznode.raw != null ? moznode.raw : moznode.value + \"\";\n        }\n    }\n\n    function my_start_token(moznode) {\n        var loc = moznode.loc, start = loc && loc.start;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : start && start.line,\n            col     : start && start.column,\n            pos     : range ? range[0] : moznode.start,\n            endline : start && start.line,\n            endcol  : start && start.column,\n            endpos  : range ? range[0] : moznode.start,\n            raw     : raw_token(moznode),\n        });\n    }\n\n    function my_end_token(moznode) {\n        var loc = moznode.loc, end = loc && loc.end;\n        var range = moznode.range;\n        return new AST_Token({\n            file    : loc && loc.source,\n            line    : end && end.line,\n            col     : end && end.column,\n            pos     : range ? range[1] : moznode.end,\n            endline : end && end.line,\n            endcol  : end && end.column,\n            endpos  : range ? range[1] : moznode.end,\n            raw     : raw_token(moznode),\n        });\n    }\n\n    function map(moztype, mytype, propmap) {\n        var moz_to_me = \"function From_Moz_\" + moztype + \"(M){\\n\";\n        moz_to_me += \"return new U2.\" + mytype.name + \"({\\n\" +\n            \"start: my_start_token(M),\\n\" +\n            \"end: my_end_token(M)\";\n\n        var me_to_moz = \"function To_Moz_\" + moztype + \"(M){\\n\";\n        me_to_moz += \"return {\\n\" +\n            \"type: \" + JSON.stringify(moztype);\n\n        if (propmap) propmap.split(/\\s*,\\s*/).forEach(function(prop) {\n            var m = /([a-z0-9$_]+)([=@>%])([a-z0-9$_]+)/i.exec(prop);\n            if (!m) throw new Error(\"Can't understand property map: \" + prop);\n            var moz = m[1], how = m[2], my = m[3];\n            moz_to_me += \",\\n\" + my + \": \";\n            me_to_moz += \",\\n\" + moz + \": \";\n            switch (how) {\n                case \"@\":\n                    moz_to_me += \"M.\" + moz + \".map(from_moz)\";\n                    me_to_moz += \"M.\" +  my + \".map(to_moz)\";\n                    break;\n                case \">\":\n                    moz_to_me += \"from_moz(M.\" + moz + \")\";\n                    me_to_moz += \"to_moz(M.\" + my + \")\";\n                    break;\n                case \"=\":\n                    moz_to_me += \"M.\" + moz;\n                    me_to_moz += \"M.\" + my;\n                    break;\n                case \"%\":\n                    moz_to_me += \"from_moz(M.\" + moz + \").body\";\n                    me_to_moz += \"to_moz_block(M)\";\n                    break;\n                default:\n                    throw new Error(\"Can't understand operator in propmap: \" + prop);\n            }\n        });\n\n        moz_to_me += \"\\n})\\n}\";\n        me_to_moz += \"\\n}\\n}\";\n\n        //moz_to_me = parse(moz_to_me).print_to_string({ beautify: true });\n        //me_to_moz = parse(me_to_moz).print_to_string({ beautify: true });\n        //console.log(moz_to_me);\n\n        moz_to_me = new Function(\"U2\", \"my_start_token\", \"my_end_token\", \"from_moz\", \"return(\" + moz_to_me + \")\")(\n            ast, my_start_token, my_end_token, from_moz\n        );\n        me_to_moz = new Function(\"to_moz\", \"to_moz_block\", \"to_moz_scope\", \"return(\" + me_to_moz + \")\")(\n            to_moz, to_moz_block, to_moz_scope\n        );\n        MOZ_TO_ME[moztype] = moz_to_me;\n        def_to_moz(mytype, me_to_moz);\n    }\n\n    var FROM_MOZ_STACK = null;\n\n    function from_moz(node) {\n        FROM_MOZ_STACK.push(node);\n        var ret = node != null ? MOZ_TO_ME[node.type](node) : null;\n        FROM_MOZ_STACK.pop();\n        return ret;\n    }\n\n    AST_Node.from_mozilla_ast = function(node) {\n        var save_stack = FROM_MOZ_STACK;\n        FROM_MOZ_STACK = [];\n        var ast = from_moz(node);\n        FROM_MOZ_STACK = save_stack;\n        return ast;\n    };\n\n    function set_moz_loc(mynode, moznode, myparent) {\n        var start = mynode.start;\n        var end = mynode.end;\n        if (start.pos != null && end.endpos != null) {\n            moznode.range = [start.pos, end.endpos];\n        }\n        if (start.line) {\n            moznode.loc = {\n                start: {line: start.line, column: start.col},\n                end: end.endline ? {line: end.endline, column: end.endcol} : null\n            };\n            if (start.file) {\n                moznode.loc.source = start.file;\n            }\n        }\n        return moznode;\n    }\n\n    function def_to_moz(mytype, handler) {\n        mytype.DEFMETHOD(\"to_mozilla_ast\", function(parent) {\n            return set_moz_loc(this, handler(this, parent));\n        });\n    }\n\n    var TO_MOZ_STACK = null;\n\n    function to_moz(node) {\n        if (TO_MOZ_STACK === null) { TO_MOZ_STACK = []; }\n        TO_MOZ_STACK.push(node);\n        var ast = node != null ? node.to_mozilla_ast(TO_MOZ_STACK[TO_MOZ_STACK.length - 2]) : null;\n        TO_MOZ_STACK.pop();\n        if (TO_MOZ_STACK.length === 0) { TO_MOZ_STACK = null; }\n        return ast;\n    }\n\n    function to_moz_in_destructuring() {\n        var i = TO_MOZ_STACK.length;\n        while (i--) {\n            if (TO_MOZ_STACK[i] instanceof AST_Destructuring) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    function to_moz_block(node) {\n        return {\n            type: \"BlockStatement\",\n            body: node.body.map(to_moz)\n        };\n    }\n\n    function to_moz_scope(type, node) {\n        var body = node.body.map(to_moz);\n        if (node.body[0] instanceof AST_SimpleStatement && node.body[0].body instanceof AST_String) {\n            body.unshift(to_moz(new AST_EmptyStatement(node.body[0])));\n        }\n        return {\n            type: type,\n            body: body\n        };\n    }\n})();\n"]}